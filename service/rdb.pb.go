// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rdb.proto

package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import "github.com/chai2010/qingcloud-go/config"
import "github.com/chai2010/qingcloud-go/request"
import "github.com/chai2010/qingcloud-go/request/data"

var _ = config.Config{}
var _ = request.Request{}
var _ = data.Operation{}

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RDBServiceProperties struct {
	Zone string `protobuf:"bytes,1,opt,name=zone" json:"zone,omitempty"`
}

func (m *RDBServiceProperties) Reset()                    { *m = RDBServiceProperties{} }
func (m *RDBServiceProperties) String() string            { return proto.CompactTextString(m) }
func (*RDBServiceProperties) ProtoMessage()               {}
func (*RDBServiceProperties) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{0} }

func (m *RDBServiceProperties) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func init() {
	proto.RegisterType((*RDBServiceProperties)(nil), "service.RDBServiceProperties")
}

type RDBServiceInterface interface {
	CreateRDB(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error)
	DescribeRDBs(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error)
	DeleteRDBs(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error)
	StartRDBs(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error)
	StopRDBs(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error)
	ResizeRDBs(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error)
	RDBsLeaveVxnet(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error)
	RDBsJoinVxnet(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error)
	CreateRDBFromSnapshot(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error)
	CreateTempRDBInstanceFromSnapshot(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error)
	GetRDBInstanceFiles(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error)
	CopyRDBInstanceFilesToFTP(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error)
	PurgeRDBLogs(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error)
	CeaseRDBInstance(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error)
	GetRDBMonitor(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error)
	ModifyRDBParameters(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error)
	ApplyRDBParameterGroup(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error)
	DescribeRDBParameters(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error)
}

type RDBService struct {
	Config     *config.Config
	Properties *RDBServiceProperties
}

func NewRDBService(conf *config.Config, zone string) (p *RDBService, err error) {
	return &RDBService{
		Config:     conf,
		Properties: &RDBServiceProperties{Zone: zone},
	}, nil
}

func (p *RDBService) CreateRDB(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error) {
	if in == nil {
		in = &google_protobuf.Empty{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "CreateRDB",
		RequestMethod: "GET", // GET or POST
	}

	x := &google_protobuf.Empty{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *RDBService) DescribeRDBs(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error) {
	if in == nil {
		in = &google_protobuf.Empty{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DescribeRDBs",
		RequestMethod: "GET", // GET or POST
	}

	x := &google_protobuf.Empty{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *RDBService) DeleteRDBs(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error) {
	if in == nil {
		in = &google_protobuf.Empty{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DeleteRDBs",
		RequestMethod: "GET", // GET or POST
	}

	x := &google_protobuf.Empty{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *RDBService) StartRDBs(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error) {
	if in == nil {
		in = &google_protobuf.Empty{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "StartRDBs",
		RequestMethod: "GET", // GET or POST
	}

	x := &google_protobuf.Empty{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *RDBService) StopRDBs(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error) {
	if in == nil {
		in = &google_protobuf.Empty{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "StopRDBs",
		RequestMethod: "GET", // GET or POST
	}

	x := &google_protobuf.Empty{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *RDBService) ResizeRDBs(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error) {
	if in == nil {
		in = &google_protobuf.Empty{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "ResizeRDBs",
		RequestMethod: "GET", // GET or POST
	}

	x := &google_protobuf.Empty{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *RDBService) RDBsLeaveVxnet(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error) {
	if in == nil {
		in = &google_protobuf.Empty{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "RDBsLeaveVxnet",
		RequestMethod: "GET", // GET or POST
	}

	x := &google_protobuf.Empty{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *RDBService) RDBsJoinVxnet(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error) {
	if in == nil {
		in = &google_protobuf.Empty{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "RDBsJoinVxnet",
		RequestMethod: "GET", // GET or POST
	}

	x := &google_protobuf.Empty{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *RDBService) CreateRDBFromSnapshot(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error) {
	if in == nil {
		in = &google_protobuf.Empty{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "CreateRDBFromSnapshot",
		RequestMethod: "GET", // GET or POST
	}

	x := &google_protobuf.Empty{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *RDBService) CreateTempRDBInstanceFromSnapshot(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error) {
	if in == nil {
		in = &google_protobuf.Empty{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "CreateTempRDBInstanceFromSnapshot",
		RequestMethod: "GET", // GET or POST
	}

	x := &google_protobuf.Empty{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *RDBService) GetRDBInstanceFiles(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error) {
	if in == nil {
		in = &google_protobuf.Empty{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "GetRDBInstanceFiles",
		RequestMethod: "GET", // GET or POST
	}

	x := &google_protobuf.Empty{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *RDBService) CopyRDBInstanceFilesToFTP(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error) {
	if in == nil {
		in = &google_protobuf.Empty{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "CopyRDBInstanceFilesToFTP",
		RequestMethod: "GET", // GET or POST
	}

	x := &google_protobuf.Empty{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *RDBService) PurgeRDBLogs(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error) {
	if in == nil {
		in = &google_protobuf.Empty{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "PurgeRDBLogs",
		RequestMethod: "GET", // GET or POST
	}

	x := &google_protobuf.Empty{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *RDBService) CeaseRDBInstance(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error) {
	if in == nil {
		in = &google_protobuf.Empty{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "CeaseRDBInstance",
		RequestMethod: "GET", // GET or POST
	}

	x := &google_protobuf.Empty{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *RDBService) GetRDBMonitor(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error) {
	if in == nil {
		in = &google_protobuf.Empty{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "GetRDBMonitor",
		RequestMethod: "GET", // GET or POST
	}

	x := &google_protobuf.Empty{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *RDBService) ModifyRDBParameters(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error) {
	if in == nil {
		in = &google_protobuf.Empty{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "ModifyRDBParameters",
		RequestMethod: "GET", // GET or POST
	}

	x := &google_protobuf.Empty{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *RDBService) ApplyRDBParameterGroup(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error) {
	if in == nil {
		in = &google_protobuf.Empty{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "ApplyRDBParameterGroup",
		RequestMethod: "GET", // GET or POST
	}

	x := &google_protobuf.Empty{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *RDBService) DescribeRDBParameters(in *google_protobuf.Empty) (out *google_protobuf.Empty, err error) {
	if in == nil {
		in = &google_protobuf.Empty{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DescribeRDBParameters",
		RequestMethod: "GET", // GET or POST
	}

	x := &google_protobuf.Empty{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	if err != nil {
		return nil, err
	}

	return x, err
}

func init() { proto.RegisterFile("rdb.proto", fileDescriptor16) }

var fileDescriptor16 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x4f, 0x4b, 0xeb, 0x50,
	0x10, 0xc5, 0x29, 0x3c, 0xde, 0x7b, 0x19, 0xde, 0x13, 0x89, 0x5a, 0xb4, 0x6e, 0xd4, 0x95, 0xb8,
	0x48, 0x41, 0x77, 0x56, 0xfc, 0xd3, 0xa6, 0xad, 0x7f, 0x5a, 0x08, 0x49, 0x71, 0x7f, 0xd3, 0x4e,
	0xe3, 0x85, 0x24, 0x73, 0x99, 0x7b, 0x5b, 0x6c, 0x3f, 0xa6, 0x9f, 0x48, 0xd2, 0xa0, 0x56, 0xc1,
	0x45, 0xae, 0xbb, 0x64, 0x98, 0xf3, 0x9b, 0x93, 0x33, 0x43, 0xc0, 0xe1, 0x49, 0xec, 0x29, 0x26,
	0x43, 0xee, 0x1f, 0x8d, 0x3c, 0x97, 0x63, 0x6c, 0xec, 0x27, 0x44, 0x49, 0x8a, 0xcd, 0x55, 0x39,
	0x9e, 0x4d, 0x9b, 0x98, 0x29, 0xb3, 0x28, 0xbb, 0x8e, 0x4e, 0x60, 0x3b, 0xf4, 0xdb, 0x51, 0xd9,
	0x1a, 0x30, 0x29, 0x64, 0x23, 0x51, 0xbb, 0x2e, 0xfc, 0x5a, 0x52, 0x8e, 0xbb, 0xb5, 0x83, 0xda,
	0xb1, 0x13, 0xae, 0x9e, 0x4f, 0x5f, 0x1c, 0x80, 0x8f, 0x66, 0xb7, 0x05, 0x4e, 0x87, 0x51, 0x18,
	0x0c, 0xfd, 0xb6, 0x5b, 0xf7, 0xca, 0x29, 0xde, 0xdb, 0x14, 0xaf, 0x5b, 0x4c, 0x69, 0x7c, 0x53,
	0x77, 0x2f, 0xe1, 0x9f, 0x8f, 0x7a, 0xcc, 0x32, 0x2e, 0xe4, 0xba, 0xb2, 0xfe, 0x02, 0xc0, 0xc7,
	0x14, 0x8d, 0x9d, 0xba, 0x05, 0x4e, 0x64, 0x04, 0x1b, 0x2b, 0xf1, 0x39, 0xfc, 0x8d, 0x0c, 0x29,
	0x5b, 0xdb, 0x21, 0x6a, 0xb9, 0xb4, 0xb3, 0x7d, 0x0d, 0x1b, 0x85, 0x6e, 0x80, 0x62, 0x8e, 0x8f,
	0xcf, 0x39, 0x9a, 0xca, 0x84, 0x2b, 0xf8, 0x5f, 0x10, 0xee, 0x49, 0xe6, 0x76, 0x80, 0x3e, 0xec,
	0xbc, 0x2f, 0xbd, 0xc7, 0x94, 0x45, 0xb9, 0x50, 0xfa, 0x89, 0xaa, 0x83, 0x22, 0x38, 0x2c, 0x41,
	0x23, 0xcc, 0x8a, 0x2c, 0xef, 0x72, 0x6d, 0x44, 0x3e, 0xc6, 0x1f, 0x41, 0xbb, 0xb0, 0xd5, 0x47,
	0xb3, 0x4e, 0x93, 0x29, 0x56, 0xcf, 0xf9, 0x01, 0xf6, 0x3a, 0xa4, 0x16, 0x5f, 0x39, 0x23, 0xea,
	0x8d, 0x02, 0x9b, 0x4b, 0x0f, 0x66, 0x9c, 0x14, 0x81, 0x0d, 0x28, 0xa9, 0x6e, 0xa6, 0x0d, 0x9b,
	0x1d, 0x14, 0x1a, 0xd7, 0xdc, 0xd8, 0xac, 0xbd, 0xcc, 0x65, 0x48, 0xb9, 0x34, 0xc4, 0x36, 0xc1,
	0x0e, 0x69, 0x22, 0xa7, 0x45, 0x26, 0x81, 0x60, 0x91, 0xa1, 0x41, 0xae, 0xfe, 0x2d, 0xb7, 0x50,
	0xbf, 0x51, 0x2a, 0xfd, 0x44, 0xe9, 0x33, 0xcd, 0x94, 0xcd, 0x1d, 0xae, 0xfd, 0x3f, 0xec, 0x2d,
	0xc5, 0xbf, 0x57, 0xef, 0x67, 0xaf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x59, 0x87, 0x89, 0x3a,
	0x05, 0x00, 0x00,
}
