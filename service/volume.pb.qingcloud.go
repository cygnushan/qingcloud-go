// Code generated by protoc-gen-qingcloud-go. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/protoc-gen-qingcloud-go
// source: volume.proto

package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import "regexp"

import "github.com/chai2010/qingcloud-go/config"
import "github.com/chai2010/qingcloud-go/logger"
import "github.com/chai2010/qingcloud-go/request"
import "github.com/chai2010/qingcloud-go/request/data"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var _ = regexp.Match
var _ = config.Config{}
var _ = logger.SetLevel
var _ = request.Request{}
var _ = data.Operation{}

// See https://docs.qingcloud.com/api/volume/index.html
type VolumesServiceInterface interface {
	DescribeVolumes(in *DescribeVolumesInput) (out *DescribeVolumesOutput, err error)
	CreateVolumes(in *CreateVolumesInput) (out *CreateVolumesOutput, err error)
	DeleteVolumes(in *DeleteVolumesInput) (out *DeleteVolumesOutput, err error)
	AttachVolumes(in *AttachVolumesInput) (out *AttachVolumesOutput, err error)
	DetachVolumes(in *DetachVolumesInput) (out *DetachVolumesOutput, err error)
	ResizeVolumes(in *ResizeVolumesInput) (out *ResizeVolumesOutput, err error)
	ModifyVolumeAttributes(in *ModifyVolumeAttributesInput) (out *ModifyVolumeAttributesOutput, err error)
}

// See https://docs.qingcloud.com/api/volume/index.html
type VolumesService struct {
	Config           *config.Config
	Properties       *VolumesServiceProperties
	LastResponseBody string
}

// See https://docs.qingcloud.com/api/volume/index.html
func NewVolumesService(conf *config.Config, zone string) (p *VolumesService) {
	return &VolumesService{
		Config:     conf,
		Properties: &VolumesServiceProperties{Zone: zone},
	}
}

// See https://docs.qingcloud.com/api/volume/index.html
func (s *QingCloudService) Volumes(zone string) (*VolumesService, error) {
	properties := &VolumesServiceProperties{
		Zone: zone,
	}

	return &VolumesService{Config: s.Config, Properties: properties}, nil
}

func (p *VolumesService) DescribeVolumes(in *DescribeVolumesInput) (out *DescribeVolumesOutput, err error) {
	if in == nil {
		in = &DescribeVolumesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DescribeVolumes",
		RequestMethod: "GET", // GET or POST
	}

	x := &DescribeVolumesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *VolumesService) CreateVolumes(in *CreateVolumesInput) (out *CreateVolumesOutput, err error) {
	if in == nil {
		in = &CreateVolumesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "CreateVolumes",
		RequestMethod: "GET", // GET or POST
	}

	x := &CreateVolumesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *VolumesService) DeleteVolumes(in *DeleteVolumesInput) (out *DeleteVolumesOutput, err error) {
	if in == nil {
		in = &DeleteVolumesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DeleteVolumes",
		RequestMethod: "GET", // GET or POST
	}

	x := &DeleteVolumesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *VolumesService) AttachVolumes(in *AttachVolumesInput) (out *AttachVolumesOutput, err error) {
	if in == nil {
		in = &AttachVolumesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "AttachVolumes",
		RequestMethod: "GET", // GET or POST
	}

	x := &AttachVolumesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *VolumesService) DetachVolumes(in *DetachVolumesInput) (out *DetachVolumesOutput, err error) {
	if in == nil {
		in = &DetachVolumesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DetachVolumes",
		RequestMethod: "GET", // GET or POST
	}

	x := &DetachVolumesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *VolumesService) ResizeVolumes(in *ResizeVolumesInput) (out *ResizeVolumesOutput, err error) {
	if in == nil {
		in = &ResizeVolumesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "ResizeVolumes",
		RequestMethod: "GET", // GET or POST
	}

	x := &ResizeVolumesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *VolumesService) ModifyVolumeAttributes(in *ModifyVolumeAttributesInput) (out *ModifyVolumeAttributesOutput, err error) {
	if in == nil {
		in = &ModifyVolumeAttributesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "ModifyVolumeAttributes",
		RequestMethod: "GET", // GET or POST
	}

	x := &ModifyVolumeAttributesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *VolumesServiceProperties) Validate() error {
	return nil
}

func (p *DescribeVolumesInput) Validate() error {
	return nil
}

func (p *DescribeVolumesOutput) Validate() error {
	return nil
}

func (p *CreateVolumesInput) Validate() error {
	return nil
}

func (p *CreateVolumesOutput) Validate() error {
	return nil
}

func (p *DeleteVolumesInput) Validate() error {
	return nil
}

func (p *DeleteVolumesOutput) Validate() error {
	return nil
}

func (p *AttachVolumesInput) Validate() error {
	return nil
}

func (p *AttachVolumesOutput) Validate() error {
	return nil
}

func (p *DetachVolumesInput) Validate() error {
	return nil
}

func (p *DetachVolumesOutput) Validate() error {
	return nil
}

func (p *ResizeVolumesInput) Validate() error {
	return nil
}

func (p *ResizeVolumesOutput) Validate() error {
	return nil
}

func (p *ModifyVolumeAttributesInput) Validate() error {
	return nil
}

func (p *ModifyVolumeAttributesOutput) Validate() error {
	return nil
}
