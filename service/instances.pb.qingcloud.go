// Code generated by protoc-gen-qingcloud-go. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/protoc-gen-qingcloud-go
// source: instances.proto

package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import "regexp"

import "github.com/chai2010/qingcloud-go/config"
import "github.com/chai2010/qingcloud-go/logger"
import "github.com/chai2010/qingcloud-go/request"
import "github.com/chai2010/qingcloud-go/request/data"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var _ = regexp.Match
var _ = config.Config{}
var _ = logger.SetLevel
var _ = request.Request{}
var _ = data.Operation{}

// See https://docs.qingcloud.com/api/instance/index.html
type InstanceServiceInterface interface {
	DescribeInstances(in *DescribeInstancesInput) (out *DescribeInstancesOutput, err error)
	RunInstances(in *RunInstancesInput) (out *RunInstancesOutput, err error)
	TerminateInstances(in *TerminateInstancesInput) (out *TerminateInstancesOutput, err error)
	StartInstances(in *StartInstancesInput) (out *StartInstancesOutput, err error)
	StopInstances(in *StopInstancesInput) (out *StopInstancesOutput, err error)
	RestartInstances(in *RestartInstancesInput) (out *RestartInstancesOutput, err error)
	ResetInstances(in *ResetInstancesInput) (out *ResetInstancesOutput, err error)
	ResizeInstances(in *ResizeInstancesInput) (out *ResizeInstancesOutput, err error)
	ModifyInstanceAttributes(in *ModifyInstanceAttributesInput) (out *ModifyInstanceAttributesOutput, err error)
	DescribeInstanceTypes(in *DescribeInstanceTypesInput) (out *DescribeInstanceTypesOutput, err error)
	CreateBrokers(in *CreateBrokersInput) (out *CreateBrokersOutput, err error)
	DeleteBrokers(in *DeleteBrokersInput) (out *DeleteBrokersOutput, err error)
}

// See https://docs.qingcloud.com/api/instance/index.html
type InstanceService struct {
	Config           *config.Config
	Properties       *InstanceServiceProperties
	LastResponseBody string
}

// See https://docs.qingcloud.com/api/instance/index.html
func NewInstanceService(conf *config.Config, zone string) (p *InstanceService) {
	return &InstanceService{
		Config:     conf,
		Properties: &InstanceServiceProperties{Zone: zone},
	}
}

// See https://docs.qingcloud.com/api/instance/index.html
func (s *QingCloudService) Instance(zone string) (*InstanceService, error) {
	properties := &InstanceServiceProperties{
		Zone: zone,
	}

	return &InstanceService{Config: s.Config, Properties: properties}, nil
}

func (p *InstanceService) DescribeInstances(in *DescribeInstancesInput) (out *DescribeInstancesOutput, err error) {
	if in == nil {
		in = &DescribeInstancesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DescribeInstances",
		RequestMethod: "GET", // GET or POST
	}

	x := &DescribeInstancesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *InstanceService) RunInstances(in *RunInstancesInput) (out *RunInstancesOutput, err error) {
	if in == nil {
		in = &RunInstancesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "RunInstances",
		RequestMethod: "GET", // GET or POST
	}

	x := &RunInstancesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *InstanceService) TerminateInstances(in *TerminateInstancesInput) (out *TerminateInstancesOutput, err error) {
	if in == nil {
		in = &TerminateInstancesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "TerminateInstances",
		RequestMethod: "GET", // GET or POST
	}

	x := &TerminateInstancesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *InstanceService) StartInstances(in *StartInstancesInput) (out *StartInstancesOutput, err error) {
	if in == nil {
		in = &StartInstancesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "StartInstances",
		RequestMethod: "GET", // GET or POST
	}

	x := &StartInstancesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *InstanceService) StopInstances(in *StopInstancesInput) (out *StopInstancesOutput, err error) {
	if in == nil {
		in = &StopInstancesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "StopInstances",
		RequestMethod: "GET", // GET or POST
	}

	x := &StopInstancesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *InstanceService) RestartInstances(in *RestartInstancesInput) (out *RestartInstancesOutput, err error) {
	if in == nil {
		in = &RestartInstancesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "RestartInstances",
		RequestMethod: "GET", // GET or POST
	}

	x := &RestartInstancesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *InstanceService) ResetInstances(in *ResetInstancesInput) (out *ResetInstancesOutput, err error) {
	if in == nil {
		in = &ResetInstancesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "ResetInstances",
		RequestMethod: "GET", // GET or POST
	}

	x := &ResetInstancesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *InstanceService) ResizeInstances(in *ResizeInstancesInput) (out *ResizeInstancesOutput, err error) {
	if in == nil {
		in = &ResizeInstancesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "ResizeInstances",
		RequestMethod: "GET", // GET or POST
	}

	x := &ResizeInstancesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *InstanceService) ModifyInstanceAttributes(in *ModifyInstanceAttributesInput) (out *ModifyInstanceAttributesOutput, err error) {
	if in == nil {
		in = &ModifyInstanceAttributesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "ModifyInstanceAttributes",
		RequestMethod: "GET", // GET or POST
	}

	x := &ModifyInstanceAttributesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *InstanceService) DescribeInstanceTypes(in *DescribeInstanceTypesInput) (out *DescribeInstanceTypesOutput, err error) {
	if in == nil {
		in = &DescribeInstanceTypesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DescribeInstanceTypes",
		RequestMethod: "GET", // GET or POST
	}

	x := &DescribeInstanceTypesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *InstanceService) CreateBrokers(in *CreateBrokersInput) (out *CreateBrokersOutput, err error) {
	if in == nil {
		in = &CreateBrokersInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "CreateBrokers",
		RequestMethod: "GET", // GET or POST
	}

	x := &CreateBrokersOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *InstanceService) DeleteBrokers(in *DeleteBrokersInput) (out *DeleteBrokersOutput, err error) {
	if in == nil {
		in = &DeleteBrokersInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DeleteBrokers",
		RequestMethod: "GET", // GET or POST
	}

	x := &DeleteBrokersOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *InstanceServiceProperties) Validate() error {
	return nil
}

func (p *DescribeInstancesInput) Validate() error {
	return nil
}

func (p *DescribeInstancesOutput) Validate() error {
	return nil
}

func (p *RunInstancesInput) Validate() error {
	return nil
}

func (p *RunInstancesOutput) Validate() error {
	return nil
}

func (p *TerminateInstancesInput) Validate() error {
	return nil
}

func (p *TerminateInstancesOutput) Validate() error {
	return nil
}

func (p *StartInstancesInput) Validate() error {
	return nil
}

func (p *StartInstancesOutput) Validate() error {
	return nil
}

func (p *StopInstancesInput) Validate() error {
	return nil
}

func (p *StopInstancesOutput) Validate() error {
	return nil
}

func (p *RestartInstancesInput) Validate() error {
	return nil
}

func (p *RestartInstancesOutput) Validate() error {
	return nil
}

func (p *ResetInstancesInput) Validate() error {
	return nil
}

func (p *ResetInstancesOutput) Validate() error {
	return nil
}

func (p *ResizeInstancesInput) Validate() error {
	return nil
}

func (p *ResizeInstancesOutput) Validate() error {
	return nil
}

func (p *ModifyInstanceAttributesInput) Validate() error {
	return nil
}

func (p *ModifyInstanceAttributesOutput) Validate() error {
	return nil
}

func (p *DescribeInstanceTypesInput) Validate() error {
	return nil
}

func (p *DescribeInstanceTypesOutput) Validate() error {
	return nil
}

func (p *CreateBrokersInput) Validate() error {
	return nil
}

func (p *CreateBrokersOutput) Validate() error {
	return nil
}

func (p *DeleteBrokersInput) Validate() error {
	return nil
}

func (p *DeleteBrokersOutput) Validate() error {
	return nil
}
