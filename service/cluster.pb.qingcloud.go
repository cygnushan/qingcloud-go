// Code generated by protoc-gen-qingcloud-go. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/protoc-gen-qingcloud-go
// source: cluster.proto

package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import "regexp"

import "github.com/chai2010/qingcloud-go/config"
import "github.com/chai2010/qingcloud-go/logger"
import "github.com/chai2010/qingcloud-go/request"
import "github.com/chai2010/qingcloud-go/request/data"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var _ = regexp.Match
var _ = config.Config{}
var _ = logger.SetLevel
var _ = request.Request{}
var _ = data.Operation{}

// See https://git.internal.yunify.com/ray/pitrix-appcenter-docs/blob/master/internal/docs/cluster-lifecycle-APIs.md
type ClusterServiceInterface interface {
	CreateCluster(in *CreateClusterInput) (out *CreateClusterOutput, err error)
	DescribeClusters(in *DescribeClustersInput) (out *DescribeClustersOutput, err error)
	DescribeClusterNodes(in *DescribeClusterNodesInput) (out *DescribeClusterNodesOutput, err error)
	StopClusters(in *StopClustersInput) (out *StopClustersOutput, err error)
	StartClusters(in *StartClustersInput) (out *StartClustersOutput, err error)
	DeleteClusters(in *DeleteClustersInput) (out *DeleteClustersOutput, err error)
	Lease(in *LeaseInput) (out *LeaseOutput, err error)
	AddClusterNodes(in *AddClusterNodesInput) (out *AddClusterNodesOutput, err error)
	DeleteClusterNodes(in *DeleteClusterNodesInput) (out *DeleteClusterNodesOutput, err error)
	ResizeCluster(in *ResizeClusterInput) (out *ResizeClusterOutput, err error)
	ChangeClusterVxnet(in *ChangeClusterVxnetInput) (out *ChangeClusterVxnetOutput, err error)
	SuspendClusters(in *SuspendClustersInput) (out *SuspendClustersOutput, err error)
	UpdateClusterEnvironment(in *UpdateClusterEnvironmentInput) (out *UpdateClusterEnvironmentOutput, err error)
	ModifyClusterAttributes(in *ModifyClusterAttributesInput) (out *ModifyClusterAttributesOutput, err error)
	ModifyClusterNodeAttributes(in *ModifyClusterNodeAttributesInput) (out *ModifyClusterNodeAttributesOutput, err error)
	GetClustersStats(in *GetClustersStatsInput) (out *GetClustersStatsOutput, err error)
	DescribeClusterUsers(in *DescribeClusterUsersInput) (out *DescribeClusterUsersOutput, err error)
	RestartClusterService(in *RestartClusterServiceInput) (out *RestartClusterServiceOutput, err error)
	UpgradeClusters(in *UpgradeClustersInput) (out *UpgradeClustersOutput, err error)
	AuthorizeClustersBrokerToDeveloper(in *AuthorizeClustersBrokerToDeveloperInput) (out *AuthorizeClustersBrokerToDeveloperOutput, err error)
	RevokeClustersBrokerFromDeveloper(in *RevokeClustersBrokerFromDeveloperInput) (out *RevokeClustersBrokerFromDeveloperOutput, err error)
}

// See https://git.internal.yunify.com/ray/pitrix-appcenter-docs/blob/master/internal/docs/cluster-lifecycle-APIs.md
type ClusterService struct {
	Config           *config.Config
	Properties       *ClusterServiceProperties
	LastResponseBody string
}

// See https://git.internal.yunify.com/ray/pitrix-appcenter-docs/blob/master/internal/docs/cluster-lifecycle-APIs.md
func NewClusterService(conf *config.Config, zone string) (p *ClusterService) {
	return &ClusterService{
		Config:     conf,
		Properties: &ClusterServiceProperties{Zone: proto.String(zone)},
	}
}

// See https://git.internal.yunify.com/ray/pitrix-appcenter-docs/blob/master/internal/docs/cluster-lifecycle-APIs.md
func (s *QingCloudService) Cluster(zone string) (*ClusterService, error) {
	properties := &ClusterServiceProperties{
		Zone: proto.String(zone),
	}

	return &ClusterService{Config: s.Config, Properties: properties}, nil
}

func (p *ClusterService) CreateCluster(in *CreateClusterInput) (out *CreateClusterOutput, err error) {
	if in == nil {
		in = &CreateClusterInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "CreateCluster",
		RequestMethod: "GET", // GET or POST
	}

	x := &CreateClusterOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ClusterService) DescribeClusters(in *DescribeClustersInput) (out *DescribeClustersOutput, err error) {
	if in == nil {
		in = &DescribeClustersInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DescribeClusters",
		RequestMethod: "GET", // GET or POST
	}

	x := &DescribeClustersOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ClusterService) DescribeClusterNodes(in *DescribeClusterNodesInput) (out *DescribeClusterNodesOutput, err error) {
	if in == nil {
		in = &DescribeClusterNodesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DescribeClusterNodes",
		RequestMethod: "GET", // GET or POST
	}

	x := &DescribeClusterNodesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ClusterService) StopClusters(in *StopClustersInput) (out *StopClustersOutput, err error) {
	if in == nil {
		in = &StopClustersInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "StopClusters",
		RequestMethod: "GET", // GET or POST
	}

	x := &StopClustersOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ClusterService) StartClusters(in *StartClustersInput) (out *StartClustersOutput, err error) {
	if in == nil {
		in = &StartClustersInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "StartClusters",
		RequestMethod: "GET", // GET or POST
	}

	x := &StartClustersOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ClusterService) DeleteClusters(in *DeleteClustersInput) (out *DeleteClustersOutput, err error) {
	if in == nil {
		in = &DeleteClustersInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DeleteClusters",
		RequestMethod: "GET", // GET or POST
	}

	x := &DeleteClustersOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ClusterService) Lease(in *LeaseInput) (out *LeaseOutput, err error) {
	if in == nil {
		in = &LeaseInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "Lease",
		RequestMethod: "GET", // GET or POST
	}

	x := &LeaseOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ClusterService) AddClusterNodes(in *AddClusterNodesInput) (out *AddClusterNodesOutput, err error) {
	if in == nil {
		in = &AddClusterNodesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "AddClusterNodes",
		RequestMethod: "GET", // GET or POST
	}

	x := &AddClusterNodesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ClusterService) DeleteClusterNodes(in *DeleteClusterNodesInput) (out *DeleteClusterNodesOutput, err error) {
	if in == nil {
		in = &DeleteClusterNodesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DeleteClusterNodes",
		RequestMethod: "GET", // GET or POST
	}

	x := &DeleteClusterNodesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ClusterService) ResizeCluster(in *ResizeClusterInput) (out *ResizeClusterOutput, err error) {
	if in == nil {
		in = &ResizeClusterInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "ResizeCluster",
		RequestMethod: "GET", // GET or POST
	}

	x := &ResizeClusterOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ClusterService) ChangeClusterVxnet(in *ChangeClusterVxnetInput) (out *ChangeClusterVxnetOutput, err error) {
	if in == nil {
		in = &ChangeClusterVxnetInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "ChangeClusterVxnet",
		RequestMethod: "GET", // GET or POST
	}

	x := &ChangeClusterVxnetOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ClusterService) SuspendClusters(in *SuspendClustersInput) (out *SuspendClustersOutput, err error) {
	if in == nil {
		in = &SuspendClustersInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "SuspendClusters",
		RequestMethod: "GET", // GET or POST
	}

	x := &SuspendClustersOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ClusterService) UpdateClusterEnvironment(in *UpdateClusterEnvironmentInput) (out *UpdateClusterEnvironmentOutput, err error) {
	if in == nil {
		in = &UpdateClusterEnvironmentInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "UpdateClusterEnvironment",
		RequestMethod: "GET", // GET or POST
	}

	x := &UpdateClusterEnvironmentOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ClusterService) ModifyClusterAttributes(in *ModifyClusterAttributesInput) (out *ModifyClusterAttributesOutput, err error) {
	if in == nil {
		in = &ModifyClusterAttributesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "ModifyClusterAttributes",
		RequestMethod: "GET", // GET or POST
	}

	x := &ModifyClusterAttributesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ClusterService) ModifyClusterNodeAttributes(in *ModifyClusterNodeAttributesInput) (out *ModifyClusterNodeAttributesOutput, err error) {
	if in == nil {
		in = &ModifyClusterNodeAttributesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "ModifyClusterNodeAttributes",
		RequestMethod: "GET", // GET or POST
	}

	x := &ModifyClusterNodeAttributesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ClusterService) GetClustersStats(in *GetClustersStatsInput) (out *GetClustersStatsOutput, err error) {
	if in == nil {
		in = &GetClustersStatsInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "GetClustersStats",
		RequestMethod: "GET", // GET or POST
	}

	x := &GetClustersStatsOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ClusterService) DescribeClusterUsers(in *DescribeClusterUsersInput) (out *DescribeClusterUsersOutput, err error) {
	if in == nil {
		in = &DescribeClusterUsersInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DescribeClusterUsers",
		RequestMethod: "GET", // GET or POST
	}

	x := &DescribeClusterUsersOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ClusterService) RestartClusterService(in *RestartClusterServiceInput) (out *RestartClusterServiceOutput, err error) {
	if in == nil {
		in = &RestartClusterServiceInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "RestartClusterService",
		RequestMethod: "GET", // GET or POST
	}

	x := &RestartClusterServiceOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ClusterService) UpgradeClusters(in *UpgradeClustersInput) (out *UpgradeClustersOutput, err error) {
	if in == nil {
		in = &UpgradeClustersInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "UpgradeClusters",
		RequestMethod: "GET", // GET or POST
	}

	x := &UpgradeClustersOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ClusterService) AuthorizeClustersBrokerToDeveloper(in *AuthorizeClustersBrokerToDeveloperInput) (out *AuthorizeClustersBrokerToDeveloperOutput, err error) {
	if in == nil {
		in = &AuthorizeClustersBrokerToDeveloperInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "AuthorizeClustersBrokerToDeveloper",
		RequestMethod: "GET", // GET or POST
	}

	x := &AuthorizeClustersBrokerToDeveloperOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ClusterService) RevokeClustersBrokerFromDeveloper(in *RevokeClustersBrokerFromDeveloperInput) (out *RevokeClustersBrokerFromDeveloperOutput, err error) {
	if in == nil {
		in = &RevokeClustersBrokerFromDeveloperInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "RevokeClustersBrokerFromDeveloper",
		RequestMethod: "GET", // GET or POST
	}

	x := &RevokeClustersBrokerFromDeveloperOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ClusterServiceProperties) Validate() error {

	if len(p.GetZone()) == 0 {
		return fmt.Errorf("ClusterServiceProperties.Zone required field missing!")
	}

	return nil
}

func (p *CreateClusterInput_Conf) Validate() error {

	if len(p.GetAppId()) == 0 {
		return fmt.Errorf("CreateClusterInput_Conf.AppId required field missing!")
	}

	if len(p.GetAppVersion()) == 0 {
		return fmt.Errorf("CreateClusterInput_Conf.AppVersion required field missing!")
	}

	if p.GetNode() == nil {
		return fmt.Errorf("CreateClusterInput_Conf.Node required field missing!")
	}

	if len(p.GetVxnet()) == 0 {
		return fmt.Errorf("CreateClusterInput_Conf.Vxnet required field missing!")
	}

	return nil
}

func (p *CreateClusterInput) Validate() error {

	if len(p.GetConf()) == 0 {
		return fmt.Errorf("CreateClusterInput.Conf required field missing!")
	}

	return nil
}

func (p *CreateClusterOutput) Validate() error {

	if len(p.GetAction()) == 0 {
		return fmt.Errorf("CreateClusterOutput.Action required field missing!")
	}

	return nil
}

func (p *DescribeClustersInput) Validate() error {

	if len(p.GetScope()) == 0 {
		return fmt.Errorf("DescribeClustersInput.Scope required field missing!")
	}

	{
		var _enumValues = []string{
			"all",
			"cfgmgmt",
		}
		for _, v := range _enumValues {
			if p.GetScope() != v {
				return fmt.Errorf("DescribeClustersInput.Scope: invalid enum value!")
			}
		}
	}

	return nil
}

func (p *DescribeClustersOutput) Validate() error {

	if len(p.GetAction()) == 0 {
		return fmt.Errorf("DescribeClustersOutput.Action required field missing!")
	}

	return nil
}

func (p *DescribeClusterNodesInput) Validate() error {

	if len(p.GetCluster()) == 0 {
		return fmt.Errorf("DescribeClusterNodesInput.Cluster required field missing!")
	}

	return nil
}

func (p *DescribeClusterNodesOutput) Validate() error {

	if len(p.GetAction()) == 0 {
		return fmt.Errorf("DescribeClusterNodesOutput.Action required field missing!")
	}

	return nil
}

func (p *StopClustersInput) Validate() error {
	return nil
}

func (p *StopClustersOutput) Validate() error {

	if len(p.GetAction()) == 0 {
		return fmt.Errorf("StopClustersOutput.Action required field missing!")
	}

	return nil
}

func (p *StartClustersInput) Validate() error {
	return nil
}

func (p *StartClustersOutput) Validate() error {

	if len(p.GetAction()) == 0 {
		return fmt.Errorf("StartClustersOutput.Action required field missing!")
	}

	return nil
}

func (p *DeleteClustersInput) Validate() error {
	return nil
}

func (p *DeleteClustersOutput) Validate() error {

	if len(p.GetAction()) == 0 {
		return fmt.Errorf("DeleteClustersOutput.Action required field missing!")
	}

	return nil
}

func (p *LeaseInput) Validate() error {
	return nil
}

func (p *LeaseOutput) Validate() error {

	if len(p.GetAction()) == 0 {
		return fmt.Errorf("LeaseOutput.Action required field missing!")
	}

	return nil
}

func (p *AddClusterNodesInput) Validate() error {

	if len(p.GetCluster()) == 0 {
		return fmt.Errorf("AddClusterNodesInput.Cluster required field missing!")
	}

	return nil
}

func (p *AddClusterNodesOutput) Validate() error {

	if len(p.GetAction()) == 0 {
		return fmt.Errorf("AddClusterNodesOutput.Action required field missing!")
	}

	return nil
}

func (p *DeleteClusterNodesInput) Validate() error {
	return nil
}

func (p *DeleteClusterNodesOutput) Validate() error {

	if len(p.GetAction()) == 0 {
		return fmt.Errorf("DeleteClusterNodesOutput.Action required field missing!")
	}

	return nil
}

func (p *ResizeClusterInput) Validate() error {

	if len(p.GetCluster()) == 0 {
		return fmt.Errorf("ResizeClusterInput.Cluster required field missing!")
	}

	return nil
}

func (p *ResizeClusterOutput) Validate() error {

	if len(p.GetAction()) == 0 {
		return fmt.Errorf("ResizeClusterOutput.Action required field missing!")
	}

	return nil
}

func (p *ChangeClusterVxnetInput) Validate() error {

	if len(p.GetCluster()) == 0 {
		return fmt.Errorf("ChangeClusterVxnetInput.Cluster required field missing!")
	}

	if len(p.GetVxnet()) == 0 {
		return fmt.Errorf("ChangeClusterVxnetInput.Vxnet required field missing!")
	}

	return nil
}

func (p *ChangeClusterVxnetOutput) Validate() error {

	if len(p.GetAction()) == 0 {
		return fmt.Errorf("ChangeClusterVxnetOutput.Action required field missing!")
	}

	return nil
}

func (p *SuspendClustersInput) Validate() error {
	return nil
}

func (p *SuspendClustersOutput) Validate() error {

	if len(p.GetAction()) == 0 {
		return fmt.Errorf("SuspendClustersOutput.Action required field missing!")
	}

	return nil
}

func (p *UpdateClusterEnvironmentInput) Validate() error {

	if len(p.GetCluster()) == 0 {
		return fmt.Errorf("UpdateClusterEnvironmentInput.Cluster required field missing!")
	}

	return nil
}

func (p *UpdateClusterEnvironmentOutput) Validate() error {

	if len(p.GetAction()) == 0 {
		return fmt.Errorf("UpdateClusterEnvironmentOutput.Action required field missing!")
	}

	return nil
}

func (p *ModifyClusterAttributesInput) Validate() error {

	if len(p.GetCluster()) == 0 {
		return fmt.Errorf("ModifyClusterAttributesInput.Cluster required field missing!")
	}

	return nil
}

func (p *ModifyClusterAttributesOutput) Validate() error {

	if len(p.GetAction()) == 0 {
		return fmt.Errorf("ModifyClusterAttributesOutput.Action required field missing!")
	}

	return nil
}

func (p *ModifyClusterNodeAttributesInput) Validate() error {

	if len(p.GetCluster()) == 0 {
		return fmt.Errorf("ModifyClusterNodeAttributesInput.Cluster required field missing!")
	}

	if len(p.GetClusterNode()) == 0 {
		return fmt.Errorf("ModifyClusterNodeAttributesInput.ClusterNode required field missing!")
	}

	return nil
}

func (p *ModifyClusterNodeAttributesOutput) Validate() error {

	if len(p.GetAction()) == 0 {
		return fmt.Errorf("ModifyClusterNodeAttributesOutput.Action required field missing!")
	}

	return nil
}

func (p *GetClustersStatsInput) Validate() error {
	return nil
}

func (p *GetClustersStatsOutput) Validate() error {

	if len(p.GetAction()) == 0 {
		return fmt.Errorf("GetClustersStatsOutput.Action required field missing!")
	}

	return nil
}

func (p *DescribeClusterUsersInput) Validate() error {
	return nil
}

func (p *DescribeClusterUsersOutput) Validate() error {

	if len(p.GetAction()) == 0 {
		return fmt.Errorf("DescribeClusterUsersOutput.Action required field missing!")
	}

	return nil
}

func (p *RestartClusterServiceInput) Validate() error {

	if len(p.GetCluster()) == 0 {
		return fmt.Errorf("RestartClusterServiceInput.Cluster required field missing!")
	}

	return nil
}

func (p *RestartClusterServiceOutput) Validate() error {

	if len(p.GetAction()) == 0 {
		return fmt.Errorf("RestartClusterServiceOutput.Action required field missing!")
	}

	return nil
}

func (p *UpgradeClustersInput) Validate() error {

	if len(p.GetAppVersion()) == 0 {
		return fmt.Errorf("UpgradeClustersInput.AppVersion required field missing!")
	}

	return nil
}

func (p *UpgradeClustersOutput) Validate() error {

	if len(p.GetAction()) == 0 {
		return fmt.Errorf("UpgradeClustersOutput.Action required field missing!")
	}

	return nil
}

func (p *AuthorizeClustersBrokerToDeveloperInput) Validate() error {
	return nil
}

func (p *AuthorizeClustersBrokerToDeveloperOutput) Validate() error {

	if len(p.GetAction()) == 0 {
		return fmt.Errorf("AuthorizeClustersBrokerToDeveloperOutput.Action required field missing!")
	}

	return nil
}

func (p *RevokeClustersBrokerFromDeveloperInput) Validate() error {
	return nil
}

func (p *RevokeClustersBrokerFromDeveloperOutput) Validate() error {

	if len(p.GetAction()) == 0 {
		return fmt.Errorf("RevokeClustersBrokerFromDeveloperOutput.Action required field missing!")
	}

	return nil
}

func (p *ClusterProperty) Validate() error {
	return nil
}
