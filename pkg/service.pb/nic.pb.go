// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nic.proto

package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/chai2010/qingcloud-go/pkg/service.pb/qingcloud_sdk_rule"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NicServiceProperties struct {
	Zone string `protobuf:"bytes,1,opt,name=zone" json:"zone,omitempty"`
}

func (m *NicServiceProperties) Reset()                    { *m = NicServiceProperties{} }
func (m *NicServiceProperties) String() string            { return proto.CompactTextString(m) }
func (*NicServiceProperties) ProtoMessage()               {}
func (*NicServiceProperties) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{0} }

func (m *NicServiceProperties) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

type CreateNicsInput struct {
	Vxnet      string   `protobuf:"bytes,1,opt,name=vxnet" json:"vxnet,omitempty"`
	NicName    string   `protobuf:"bytes,2,opt,name=nic_name,json=nicName" json:"nic_name,omitempty"`
	Count      int32    `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	PrivateIps []string `protobuf:"bytes,4,rep,name=private_ips,json=privateIps" json:"private_ips,omitempty"`
}

func (m *CreateNicsInput) Reset()                    { *m = CreateNicsInput{} }
func (m *CreateNicsInput) String() string            { return proto.CompactTextString(m) }
func (*CreateNicsInput) ProtoMessage()               {}
func (*CreateNicsInput) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{1} }

func (m *CreateNicsInput) GetVxnet() string {
	if m != nil {
		return m.Vxnet
	}
	return ""
}

func (m *CreateNicsInput) GetNicName() string {
	if m != nil {
		return m.NicName
	}
	return ""
}

func (m *CreateNicsInput) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CreateNicsInput) GetPrivateIps() []string {
	if m != nil {
		return m.PrivateIps
	}
	return nil
}

type CreateNicsOutput struct {
	Action  string   `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	RetCode int32    `protobuf:"varint,2,opt,name=ret_code,json=retCode" json:"ret_code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Nics    []*NICIP `protobuf:"bytes,4,rep,name=nics" json:"nics,omitempty"`
}

func (m *CreateNicsOutput) Reset()                    { *m = CreateNicsOutput{} }
func (m *CreateNicsOutput) String() string            { return proto.CompactTextString(m) }
func (*CreateNicsOutput) ProtoMessage()               {}
func (*CreateNicsOutput) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{2} }

func (m *CreateNicsOutput) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *CreateNicsOutput) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *CreateNicsOutput) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateNicsOutput) GetNics() []*NICIP {
	if m != nil {
		return m.Nics
	}
	return nil
}

type DescribeNicsInput struct {
	Instances []string `protobuf:"bytes,1,rep,name=instances" json:"instances,omitempty"`
	Limit     int32    `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	NicName   string   `protobuf:"bytes,3,opt,name=nic_name,json=nicName" json:"nic_name,omitempty"`
	Nics      []string `protobuf:"bytes,4,rep,name=nics" json:"nics,omitempty"`
	Offset    int32    `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	Status    string   `protobuf:"bytes,6,opt,name=status" json:"status,omitempty"`
	VxnetType int32    `protobuf:"varint,7,opt,name=vxnet_type,json=vxnetType" json:"vxnet_type,omitempty"`
	Vxnets    []string `protobuf:"bytes,8,rep,name=vxnets" json:"vxnets,omitempty"`
}

func (m *DescribeNicsInput) Reset()                    { *m = DescribeNicsInput{} }
func (m *DescribeNicsInput) String() string            { return proto.CompactTextString(m) }
func (*DescribeNicsInput) ProtoMessage()               {}
func (*DescribeNicsInput) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{3} }

func (m *DescribeNicsInput) GetInstances() []string {
	if m != nil {
		return m.Instances
	}
	return nil
}

func (m *DescribeNicsInput) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DescribeNicsInput) GetNicName() string {
	if m != nil {
		return m.NicName
	}
	return ""
}

func (m *DescribeNicsInput) GetNics() []string {
	if m != nil {
		return m.Nics
	}
	return nil
}

func (m *DescribeNicsInput) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *DescribeNicsInput) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *DescribeNicsInput) GetVxnetType() int32 {
	if m != nil {
		return m.VxnetType
	}
	return 0
}

func (m *DescribeNicsInput) GetVxnets() []string {
	if m != nil {
		return m.Vxnets
	}
	return nil
}

type DescribeNicsOutput struct {
	Action     string `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	RetCode    int32  `protobuf:"varint,2,opt,name=ret_code,json=retCode" json:"ret_code,omitempty"`
	Message    string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	NicSet     []*NIC `protobuf:"bytes,4,rep,name=nic_set,json=nicSet" json:"nic_set,omitempty"`
	TotalCount int32  `protobuf:"varint,5,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
}

func (m *DescribeNicsOutput) Reset()                    { *m = DescribeNicsOutput{} }
func (m *DescribeNicsOutput) String() string            { return proto.CompactTextString(m) }
func (*DescribeNicsOutput) ProtoMessage()               {}
func (*DescribeNicsOutput) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{4} }

func (m *DescribeNicsOutput) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *DescribeNicsOutput) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *DescribeNicsOutput) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *DescribeNicsOutput) GetNicSet() []*NIC {
	if m != nil {
		return m.NicSet
	}
	return nil
}

func (m *DescribeNicsOutput) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

type AttachNicsInput struct {
	Nics     []string `protobuf:"bytes,1,rep,name=nics" json:"nics,omitempty"`
	Instance string   `protobuf:"bytes,2,opt,name=instance" json:"instance,omitempty"`
}

func (m *AttachNicsInput) Reset()                    { *m = AttachNicsInput{} }
func (m *AttachNicsInput) String() string            { return proto.CompactTextString(m) }
func (*AttachNicsInput) ProtoMessage()               {}
func (*AttachNicsInput) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{5} }

func (m *AttachNicsInput) GetNics() []string {
	if m != nil {
		return m.Nics
	}
	return nil
}

func (m *AttachNicsInput) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

type AttachNicsOutput struct {
	Action  string `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	RetCode int32  `protobuf:"varint,2,opt,name=ret_code,json=retCode" json:"ret_code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	JobId   string `protobuf:"bytes,4,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
}

func (m *AttachNicsOutput) Reset()                    { *m = AttachNicsOutput{} }
func (m *AttachNicsOutput) String() string            { return proto.CompactTextString(m) }
func (*AttachNicsOutput) ProtoMessage()               {}
func (*AttachNicsOutput) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{6} }

func (m *AttachNicsOutput) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *AttachNicsOutput) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *AttachNicsOutput) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *AttachNicsOutput) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

type DetachNicsInput struct {
	Nics []string `protobuf:"bytes,1,rep,name=nics" json:"nics,omitempty"`
}

func (m *DetachNicsInput) Reset()                    { *m = DetachNicsInput{} }
func (m *DetachNicsInput) String() string            { return proto.CompactTextString(m) }
func (*DetachNicsInput) ProtoMessage()               {}
func (*DetachNicsInput) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{7} }

func (m *DetachNicsInput) GetNics() []string {
	if m != nil {
		return m.Nics
	}
	return nil
}

type DetachNicsOutput struct {
	Action  string `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	RetCode int32  `protobuf:"varint,2,opt,name=ret_code,json=retCode" json:"ret_code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	JobId   string `protobuf:"bytes,4,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
}

func (m *DetachNicsOutput) Reset()                    { *m = DetachNicsOutput{} }
func (m *DetachNicsOutput) String() string            { return proto.CompactTextString(m) }
func (*DetachNicsOutput) ProtoMessage()               {}
func (*DetachNicsOutput) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{8} }

func (m *DetachNicsOutput) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *DetachNicsOutput) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *DetachNicsOutput) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *DetachNicsOutput) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

type ModifyNicAttributesInput struct {
	Nic       string `protobuf:"bytes,1,opt,name=nic" json:"nic,omitempty"`
	NicName   string `protobuf:"bytes,2,opt,name=nic_name,json=nicName" json:"nic_name,omitempty"`
	PrivateIp string `protobuf:"bytes,3,opt,name=private_ip,json=privateIp" json:"private_ip,omitempty"`
}

func (m *ModifyNicAttributesInput) Reset()                    { *m = ModifyNicAttributesInput{} }
func (m *ModifyNicAttributesInput) String() string            { return proto.CompactTextString(m) }
func (*ModifyNicAttributesInput) ProtoMessage()               {}
func (*ModifyNicAttributesInput) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{9} }

func (m *ModifyNicAttributesInput) GetNic() string {
	if m != nil {
		return m.Nic
	}
	return ""
}

func (m *ModifyNicAttributesInput) GetNicName() string {
	if m != nil {
		return m.NicName
	}
	return ""
}

func (m *ModifyNicAttributesInput) GetPrivateIp() string {
	if m != nil {
		return m.PrivateIp
	}
	return ""
}

type ModifyNicAttributesOutput struct {
	Action  string `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	RetCode int32  `protobuf:"varint,2,opt,name=ret_code,json=retCode" json:"ret_code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ModifyNicAttributesOutput) Reset()                    { *m = ModifyNicAttributesOutput{} }
func (m *ModifyNicAttributesOutput) String() string            { return proto.CompactTextString(m) }
func (*ModifyNicAttributesOutput) ProtoMessage()               {}
func (*ModifyNicAttributesOutput) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{10} }

func (m *ModifyNicAttributesOutput) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *ModifyNicAttributesOutput) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *ModifyNicAttributesOutput) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteNicsInput struct {
	Nics []string `protobuf:"bytes,1,rep,name=nics" json:"nics,omitempty"`
}

func (m *DeleteNicsInput) Reset()                    { *m = DeleteNicsInput{} }
func (m *DeleteNicsInput) String() string            { return proto.CompactTextString(m) }
func (*DeleteNicsInput) ProtoMessage()               {}
func (*DeleteNicsInput) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{11} }

func (m *DeleteNicsInput) GetNics() []string {
	if m != nil {
		return m.Nics
	}
	return nil
}

type DeleteNicsOutput struct {
	Action  string `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	RetCode int32  `protobuf:"varint,2,opt,name=ret_code,json=retCode" json:"ret_code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteNicsOutput) Reset()                    { *m = DeleteNicsOutput{} }
func (m *DeleteNicsOutput) String() string            { return proto.CompactTextString(m) }
func (*DeleteNicsOutput) ProtoMessage()               {}
func (*DeleteNicsOutput) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{12} }

func (m *DeleteNicsOutput) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *DeleteNicsOutput) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *DeleteNicsOutput) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*NicServiceProperties)(nil), "service.NicServiceProperties")
	proto.RegisterType((*CreateNicsInput)(nil), "service.CreateNicsInput")
	proto.RegisterType((*CreateNicsOutput)(nil), "service.CreateNicsOutput")
	proto.RegisterType((*DescribeNicsInput)(nil), "service.DescribeNicsInput")
	proto.RegisterType((*DescribeNicsOutput)(nil), "service.DescribeNicsOutput")
	proto.RegisterType((*AttachNicsInput)(nil), "service.AttachNicsInput")
	proto.RegisterType((*AttachNicsOutput)(nil), "service.AttachNicsOutput")
	proto.RegisterType((*DetachNicsInput)(nil), "service.DetachNicsInput")
	proto.RegisterType((*DetachNicsOutput)(nil), "service.DetachNicsOutput")
	proto.RegisterType((*ModifyNicAttributesInput)(nil), "service.ModifyNicAttributesInput")
	proto.RegisterType((*ModifyNicAttributesOutput)(nil), "service.ModifyNicAttributesOutput")
	proto.RegisterType((*DeleteNicsInput)(nil), "service.DeleteNicsInput")
	proto.RegisterType((*DeleteNicsOutput)(nil), "service.DeleteNicsOutput")
}

func init() { proto.RegisterFile("nic.proto", fileDescriptor14) }

var fileDescriptor14 = []byte{
	// 706 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x95, 0xbf, 0xfc, 0xd5, 0xb7, 0xfd, 0x68, 0x19, 0x0a, 0x72, 0x0d, 0x15, 0xc5, 0x52, 0xa5,
	0x0a, 0x89, 0x44, 0x2a, 0x3b, 0x16, 0x48, 0x21, 0x95, 0x50, 0x16, 0x84, 0x12, 0x58, 0x22, 0x59,
	0xce, 0x78, 0xd2, 0x4c, 0x49, 0x66, 0x8c, 0xe7, 0x26, 0x6a, 0xd8, 0x76, 0xc7, 0x9b, 0xf0, 0x50,
	0x3c, 0x04, 0x6f, 0x80, 0xe6, 0x27, 0xb1, 0xd3, 0x86, 0xb2, 0x0a, 0x9b, 0x28, 0xf7, 0xce, 0x9d,
	0x39, 0xe7, 0x9e, 0x39, 0x77, 0x0c, 0xbe, 0xe0, 0xb4, 0x99, 0xe5, 0x12, 0x25, 0x69, 0x28, 0x96,
	0xcf, 0x38, 0x65, 0xe1, 0x36, 0xce, 0x33, 0xa6, 0x6c, 0x36, 0x3c, 0xfc, 0xca, 0xc5, 0x05, 0x1d,
	0xcb, 0x69, 0x1a, 0xab, 0xf4, 0x4b, 0x9c, 0x4f, 0xc7, 0xac, 0xa5, 0x7f, 0xec, 0x72, 0xf4, 0x1c,
	0xf6, 0x7b, 0x9c, 0x7e, 0xb4, 0x3b, 0xcf, 0x73, 0x99, 0xb1, 0x1c, 0x39, 0x53, 0x84, 0x40, 0xf5,
	0x9b, 0x14, 0x2c, 0xf0, 0x8e, 0xbc, 0x13, 0xbf, 0x6f, 0xfe, 0x47, 0x73, 0xd8, 0xed, 0xe4, 0x2c,
	0x41, 0xd6, 0xe3, 0x54, 0x75, 0x45, 0x36, 0x45, 0xb2, 0x0f, 0xb5, 0xd9, 0x95, 0x60, 0xe8, 0xea,
	0x6c, 0x40, 0x0e, 0x60, 0x4b, 0x70, 0x1a, 0x8b, 0x64, 0xc2, 0x82, 0xff, 0xcc, 0x42, 0x43, 0x70,
	0xda, 0x4b, 0x26, 0x4c, 0x6f, 0xa0, 0x72, 0x2a, 0x30, 0xa8, 0x1c, 0x79, 0x27, 0xb5, 0xbe, 0x0d,
	0xc8, 0x53, 0xd8, 0xce, 0x72, 0x3e, 0x4b, 0x90, 0xc5, 0x3c, 0x53, 0x41, 0xf5, 0xa8, 0x72, 0xe2,
	0xf7, 0xc1, 0xa5, 0xba, 0x99, 0x8a, 0xae, 0x3d, 0xd8, 0x2b, 0xb0, 0xdf, 0x4f, 0x51, 0x83, 0x3f,
	0x82, 0x7a, 0x42, 0x91, 0x4b, 0xe1, 0xd0, 0x5d, 0xa4, 0xe1, 0x73, 0x86, 0x31, 0x95, 0xa9, 0x85,
	0xaf, 0xf5, 0x1b, 0x39, 0xc3, 0x8e, 0x4c, 0x19, 0x09, 0xa0, 0x31, 0x61, 0x4a, 0x25, 0x17, 0xcc,
	0x10, 0xf0, 0xfb, 0x8b, 0x90, 0x44, 0x50, 0x15, 0x9c, 0x5a, 0xec, 0xed, 0xd3, 0x7b, 0x4d, 0x27,
	0x66, 0xb3, 0xd7, 0xed, 0x74, 0xcf, 0xfb, 0x66, 0x2d, 0xfa, 0xe9, 0xc1, 0xfd, 0x33, 0xa6, 0x68,
	0xce, 0x07, 0x25, 0x0d, 0x9e, 0x80, 0xcf, 0x85, 0xc2, 0x44, 0x50, 0xa6, 0x02, 0xcf, 0x50, 0x2f,
	0x12, 0xba, 0xe1, 0x31, 0x9f, 0x70, 0x74, 0x4c, 0x6c, 0xb0, 0xa2, 0x50, 0x65, 0x55, 0x21, 0x52,
	0x22, 0xe2, 0x5b, 0x60, 0xdd, 0xa9, 0x1c, 0x0e, 0x15, 0xc3, 0xa0, 0x66, 0x4e, 0x71, 0x91, 0xce,
	0x2b, 0x4c, 0x70, 0xaa, 0x82, 0xba, 0x55, 0xc0, 0x46, 0xe4, 0x10, 0xc0, 0xdc, 0x44, 0xac, 0x9d,
	0x10, 0x34, 0xcc, 0x1e, 0xdf, 0x64, 0x3e, 0xcd, 0x33, 0xa6, 0xb7, 0x99, 0x40, 0x05, 0x5b, 0x06,
	0xc4, 0x45, 0xd1, 0x0f, 0x0f, 0x48, 0xb9, 0xbf, 0x4d, 0xe8, 0x7c, 0x0c, 0xba, 0xd3, 0x58, 0xf7,
	0x62, 0xa5, 0xde, 0x29, 0x4b, 0xdd, 0xaf, 0x0b, 0xed, 0x46, 0xe3, 0x08, 0x94, 0x98, 0x8c, 0x63,
	0xeb, 0x16, 0xdb, 0x36, 0x98, 0x54, 0x47, 0x67, 0xa2, 0x36, 0xec, 0xb6, 0x11, 0x13, 0x3a, 0x2a,
	0x2e, 0x62, 0xa1, 0x9c, 0x57, 0x52, 0x2e, 0x84, 0xad, 0xc5, 0x5d, 0x38, 0x2b, 0x2e, 0xe3, 0x68,
	0x06, 0x7b, 0xc5, 0x11, 0x9b, 0xe8, 0xf5, 0x21, 0xd4, 0x2f, 0xe5, 0x20, 0xe6, 0x69, 0x50, 0xb5,
	0xe3, 0x71, 0x29, 0x07, 0xdd, 0x34, 0x3a, 0x86, 0xdd, 0x33, 0xf6, 0x57, 0xea, 0x9a, 0x5e, 0x51,
	0xf6, 0x0f, 0xe9, 0x0d, 0x21, 0x78, 0x27, 0x53, 0x3e, 0x9c, 0xf7, 0x38, 0x6d, 0x23, 0xe6, 0x7c,
	0x30, 0x45, 0xe6, 0x78, 0xee, 0x41, 0x45, 0x70, 0xea, 0xc0, 0xf5, 0xdf, 0xbb, 0x66, 0xfd, 0x10,
	0xa0, 0x98, 0x6a, 0x07, 0xee, 0x2f, 0x87, 0x3a, 0x1a, 0xc1, 0xc1, 0x1a, 0x9c, 0x0d, 0x34, 0x6a,
	0x05, 0x1f, 0xb3, 0xf2, 0xc3, 0xb5, 0x4e, 0xf0, 0x58, 0x0b, 0xbe, 0x28, 0xdb, 0x00, 0x8f, 0xd3,
	0xeb, 0x2a, 0x40, 0xf1, 0xda, 0x92, 0x36, 0x40, 0xf1, 0xa6, 0x91, 0x60, 0x39, 0x07, 0x37, 0x1e,
	0xd9, 0xf0, 0x60, 0xcd, 0x8a, 0xa3, 0xf7, 0x16, 0x76, 0xca, 0x03, 0x4b, 0xc2, 0x65, 0xe9, 0xad,
	0x77, 0x2a, 0x7c, 0xbc, 0x76, 0xcd, 0x1d, 0xd4, 0x06, 0x28, 0x66, 0xa1, 0xc4, 0xe5, 0xc6, 0x8c,
	0x95, 0xb8, 0xdc, 0x1a, 0x9d, 0x36, 0x40, 0xe1, 0xd7, 0xd2, 0x11, 0x37, 0xbc, 0x5e, 0x3a, 0xe2,
	0x96, 0xbd, 0x3f, 0xc3, 0x83, 0x35, 0x96, 0x20, 0xcf, 0x96, 0x3b, 0xfe, 0x64, 0xcc, 0x30, 0xba,
	0xab, 0xa4, 0x4c, 0x70, 0x71, 0xbf, 0x2b, 0x04, 0x57, 0xbc, 0xb1, 0x42, 0x70, 0xd5, 0x0e, 0xe1,
	0x9b, 0xef, 0xbf, 0xaa, 0xaf, 0xe1, 0xc5, 0x08, 0x31, 0x53, 0xaf, 0x5a, 0xad, 0x54, 0x52, 0xd5,
	0x5c, 0x7e, 0x60, 0x9b, 0x54, 0x4e, 0x5a, 0x49, 0xc6, 0x5b, 0x82, 0xd3, 0x16, 0x17, 0x29, 0xbb,
	0x6a, 0x8e, 0x70, 0x32, 0x26, 0xff, 0x7f, 0xe0, 0xe2, 0xa2, 0x63, 0x2a, 0x7a, 0x9c, 0x0e, 0xea,
	0xe6, 0xcb, 0xfb, 0xf2, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x03, 0x95, 0xaf, 0x6e, 0xbb, 0x07,
	0x00, 0x00,
}
