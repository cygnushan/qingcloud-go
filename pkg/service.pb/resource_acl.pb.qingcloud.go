// Code generated by protoc-gen-qingcloud-go. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/protoc-gen-qingcloud-go
// source: resource_acl.proto

package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import "regexp"

import "github.com/chai2010/qingcloud-go/pkg/config"
import "github.com/chai2010/qingcloud-go/pkg/logger"
import "github.com/chai2010/qingcloud-go/pkg/request"
import "github.com/chai2010/qingcloud-go/pkg/request/data"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var _ = regexp.Match
var _ = config.Config{}
var _ = logger.SetLevel
var _ = request.Request{}
var _ = data.Operation{}

// See https://docs.qingcloud.com/api/resource_acl/index.html
type ResourceACLServiceInterface interface {
	DescribeSharedResourceGroups(in *DescribeSharedResourceGroupsInput) (out *DescribeSharedResourceGroupsOutput, err error)
	DescribeResourceGroups(in *DescribeResourceGroupsInput) (out *DescribeResourceGroupsOutput, err error)
	CreateResourceGroups(in *CreateResourceGroupsInput) (out *CreateResourceGroupsOutput, err error)
	ModifyResourceGroupAttributes(in *ModifyResourceGroupAttributesInput) (out *ModifyResourceGroupAttributesOutput, err error)
	DeleteResourceGroups(in *DeleteResourceGroupsInput) (out *DeleteResourceGroupsOutput, err error)
	DescribeResourceGroupItems(in *DescribeResourceGroupItemsInput) (out *DescribeResourceGroupItemsOutput, err error)
	AddResourceGroupItems(in *AddResourceGroupItemsInput) (out *AddResourceGroupItemsOutput, err error)
	DeleteResourceGroupItems(in *DeleteResourceGroupItemsInput) (out *DeleteResourceGroupItemsOutput, err error)
	DescribeUserGroups(in *DescribeUserGroupsInput) (out *DescribeUserGroupsOutput, err error)
	CreateUserGroups(in *CreateUserGroupsInput) (out *CreateUserGroupsOutput, err error)
	ModifyUserGroupAttributes(in *ModifyUserGroupAttributesInput) (out *ModifyUserGroupAttributesOutput, err error)
	DeleteUserGroups(in *DeleteUserGroupsInput) (out *DeleteUserGroupsOutput, err error)
	DescribeUserGroupMembers(in *DescribeUserGroupMembersInput) (out *DescribeUserGroupMembersOutput, err error)
	AddUserGroupMembers(in *AddUserGroupMembersInput) (out *AddUserGroupMembersOutput, err error)
	ModifyUserGroupMemberAttributes(in *ModifyUserGroupMemberAttributesInput) (out *ModifyUserGroupMemberAttributesOutput, err error)
	DeleteUserGroupMembers(in *DeleteUserGroupMembersInput) (out *DeleteUserGroupMembersOutput, err error)
	DescribeGroupRoles(in *DescribeGroupRolesInput) (out *DescribeGroupRolesOutput, err error)
	CreateGroupRoles(in *CreateGroupRolesInput) (out *CreateGroupRolesOutput, err error)
	ModifyGroupRoleAttributes(in *ModifyGroupRoleAttributesInput) (out *ModifyGroupRoleAttributesOutput, err error)
	DeleteGroupRoles(in *DeleteGroupRolesInput) (out *DeleteGroupRolesOutput, err error)
	DescribeGroupRoleRules(in *DescribeGroupRoleRulesInput) (out *DescribeGroupRoleRulesOutput, err error)
	AddGroupRoleRules(in *AddGroupRoleRulesInput) (out *AddGroupRoleRulesOutput, err error)
	ModifyGroupRoleRuleAttributes(in *ModifyGroupRoleRuleAttributesInput) (out *ModifyGroupRoleRuleAttributesOutput, err error)
	DeleteGroupRoleRules(in *DeleteGroupRoleRulesInput) (out *DeleteGroupRoleRulesOutput, err error)
	GrantResourceGroupsToUserGroups(in *GrantResourceGroupsToUserGroupsInput) (out *GrantResourceGroupsToUserGroupsOutput, err error)
	RevokeResourceGroupsFromUserGroups(in *RevokeResourceGroupsFromUserGroupsInput) (out *RevokeResourceGroupsFromUserGroupsOutput, err error)
	DescribeResourceUserGroups(in *DescribeResourceUserGroupsInput) (out *DescribeResourceUserGroupsOutput, err error)
}

// See https://docs.qingcloud.com/api/resource_acl/index.html
type ResourceACLService struct {
	Config           *config.Config
	Properties       *ResourceACLServiceProperties
	LastResponseBody string
}

// See https://docs.qingcloud.com/api/resource_acl/index.html
func NewResourceACLService(conf *config.Config, zone string) (p *ResourceACLService) {
	return &ResourceACLService{
		Config:     conf,
		Properties: &ResourceACLServiceProperties{Zone: proto.String(zone)},
	}
}

func (p *ResourceACLService) DescribeSharedResourceGroups(in *DescribeSharedResourceGroupsInput) (out *DescribeSharedResourceGroupsOutput, err error) {
	if in == nil {
		in = &DescribeSharedResourceGroupsInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DescribeSharedResourceGroups",
		RequestMethod: "GET", // GET or POST
	}

	x := &DescribeSharedResourceGroupsOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) DescribeResourceGroups(in *DescribeResourceGroupsInput) (out *DescribeResourceGroupsOutput, err error) {
	if in == nil {
		in = &DescribeResourceGroupsInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DescribeResourceGroups",
		RequestMethod: "GET", // GET or POST
	}

	x := &DescribeResourceGroupsOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) CreateResourceGroups(in *CreateResourceGroupsInput) (out *CreateResourceGroupsOutput, err error) {
	if in == nil {
		in = &CreateResourceGroupsInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "CreateResourceGroups",
		RequestMethod: "GET", // GET or POST
	}

	x := &CreateResourceGroupsOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) ModifyResourceGroupAttributes(in *ModifyResourceGroupAttributesInput) (out *ModifyResourceGroupAttributesOutput, err error) {
	if in == nil {
		in = &ModifyResourceGroupAttributesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "ModifyResourceGroupAttributes",
		RequestMethod: "GET", // GET or POST
	}

	x := &ModifyResourceGroupAttributesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) DeleteResourceGroups(in *DeleteResourceGroupsInput) (out *DeleteResourceGroupsOutput, err error) {
	if in == nil {
		in = &DeleteResourceGroupsInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DeleteResourceGroups",
		RequestMethod: "GET", // GET or POST
	}

	x := &DeleteResourceGroupsOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) DescribeResourceGroupItems(in *DescribeResourceGroupItemsInput) (out *DescribeResourceGroupItemsOutput, err error) {
	if in == nil {
		in = &DescribeResourceGroupItemsInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DescribeResourceGroupItems",
		RequestMethod: "GET", // GET or POST
	}

	x := &DescribeResourceGroupItemsOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) AddResourceGroupItems(in *AddResourceGroupItemsInput) (out *AddResourceGroupItemsOutput, err error) {
	if in == nil {
		in = &AddResourceGroupItemsInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "AddResourceGroupItems",
		RequestMethod: "GET", // GET or POST
	}

	x := &AddResourceGroupItemsOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) DeleteResourceGroupItems(in *DeleteResourceGroupItemsInput) (out *DeleteResourceGroupItemsOutput, err error) {
	if in == nil {
		in = &DeleteResourceGroupItemsInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DeleteResourceGroupItems",
		RequestMethod: "GET", // GET or POST
	}

	x := &DeleteResourceGroupItemsOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) DescribeUserGroups(in *DescribeUserGroupsInput) (out *DescribeUserGroupsOutput, err error) {
	if in == nil {
		in = &DescribeUserGroupsInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DescribeUserGroups",
		RequestMethod: "GET", // GET or POST
	}

	x := &DescribeUserGroupsOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) CreateUserGroups(in *CreateUserGroupsInput) (out *CreateUserGroupsOutput, err error) {
	if in == nil {
		in = &CreateUserGroupsInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "CreateUserGroups",
		RequestMethod: "GET", // GET or POST
	}

	x := &CreateUserGroupsOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) ModifyUserGroupAttributes(in *ModifyUserGroupAttributesInput) (out *ModifyUserGroupAttributesOutput, err error) {
	if in == nil {
		in = &ModifyUserGroupAttributesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "ModifyUserGroupAttributes",
		RequestMethod: "GET", // GET or POST
	}

	x := &ModifyUserGroupAttributesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) DeleteUserGroups(in *DeleteUserGroupsInput) (out *DeleteUserGroupsOutput, err error) {
	if in == nil {
		in = &DeleteUserGroupsInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DeleteUserGroups",
		RequestMethod: "GET", // GET or POST
	}

	x := &DeleteUserGroupsOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) DescribeUserGroupMembers(in *DescribeUserGroupMembersInput) (out *DescribeUserGroupMembersOutput, err error) {
	if in == nil {
		in = &DescribeUserGroupMembersInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DescribeUserGroupMembers",
		RequestMethod: "GET", // GET or POST
	}

	x := &DescribeUserGroupMembersOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) AddUserGroupMembers(in *AddUserGroupMembersInput) (out *AddUserGroupMembersOutput, err error) {
	if in == nil {
		in = &AddUserGroupMembersInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "AddUserGroupMembers",
		RequestMethod: "GET", // GET or POST
	}

	x := &AddUserGroupMembersOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) ModifyUserGroupMemberAttributes(in *ModifyUserGroupMemberAttributesInput) (out *ModifyUserGroupMemberAttributesOutput, err error) {
	if in == nil {
		in = &ModifyUserGroupMemberAttributesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "ModifyUserGroupMemberAttributes",
		RequestMethod: "GET", // GET or POST
	}

	x := &ModifyUserGroupMemberAttributesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) DeleteUserGroupMembers(in *DeleteUserGroupMembersInput) (out *DeleteUserGroupMembersOutput, err error) {
	if in == nil {
		in = &DeleteUserGroupMembersInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DeleteUserGroupMembers",
		RequestMethod: "GET", // GET or POST
	}

	x := &DeleteUserGroupMembersOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) DescribeGroupRoles(in *DescribeGroupRolesInput) (out *DescribeGroupRolesOutput, err error) {
	if in == nil {
		in = &DescribeGroupRolesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DescribeGroupRoles",
		RequestMethod: "GET", // GET or POST
	}

	x := &DescribeGroupRolesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) CreateGroupRoles(in *CreateGroupRolesInput) (out *CreateGroupRolesOutput, err error) {
	if in == nil {
		in = &CreateGroupRolesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "CreateGroupRoles",
		RequestMethod: "GET", // GET or POST
	}

	x := &CreateGroupRolesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) ModifyGroupRoleAttributes(in *ModifyGroupRoleAttributesInput) (out *ModifyGroupRoleAttributesOutput, err error) {
	if in == nil {
		in = &ModifyGroupRoleAttributesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "ModifyGroupRoleAttributes",
		RequestMethod: "GET", // GET or POST
	}

	x := &ModifyGroupRoleAttributesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) DeleteGroupRoles(in *DeleteGroupRolesInput) (out *DeleteGroupRolesOutput, err error) {
	if in == nil {
		in = &DeleteGroupRolesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DeleteGroupRoles",
		RequestMethod: "GET", // GET or POST
	}

	x := &DeleteGroupRolesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) DescribeGroupRoleRules(in *DescribeGroupRoleRulesInput) (out *DescribeGroupRoleRulesOutput, err error) {
	if in == nil {
		in = &DescribeGroupRoleRulesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DescribeGroupRoleRules",
		RequestMethod: "GET", // GET or POST
	}

	x := &DescribeGroupRoleRulesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) AddGroupRoleRules(in *AddGroupRoleRulesInput) (out *AddGroupRoleRulesOutput, err error) {
	if in == nil {
		in = &AddGroupRoleRulesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "AddGroupRoleRules",
		RequestMethod: "GET", // GET or POST
	}

	x := &AddGroupRoleRulesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) ModifyGroupRoleRuleAttributes(in *ModifyGroupRoleRuleAttributesInput) (out *ModifyGroupRoleRuleAttributesOutput, err error) {
	if in == nil {
		in = &ModifyGroupRoleRuleAttributesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "ModifyGroupRoleRuleAttributes",
		RequestMethod: "GET", // GET or POST
	}

	x := &ModifyGroupRoleRuleAttributesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) DeleteGroupRoleRules(in *DeleteGroupRoleRulesInput) (out *DeleteGroupRoleRulesOutput, err error) {
	if in == nil {
		in = &DeleteGroupRoleRulesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DeleteGroupRoleRules",
		RequestMethod: "GET", // GET or POST
	}

	x := &DeleteGroupRoleRulesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) GrantResourceGroupsToUserGroups(in *GrantResourceGroupsToUserGroupsInput) (out *GrantResourceGroupsToUserGroupsOutput, err error) {
	if in == nil {
		in = &GrantResourceGroupsToUserGroupsInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "GrantResourceGroupsToUserGroups",
		RequestMethod: "GET", // GET or POST
	}

	x := &GrantResourceGroupsToUserGroupsOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) RevokeResourceGroupsFromUserGroups(in *RevokeResourceGroupsFromUserGroupsInput) (out *RevokeResourceGroupsFromUserGroupsOutput, err error) {
	if in == nil {
		in = &RevokeResourceGroupsFromUserGroupsInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "RevokeResourceGroupsFromUserGroups",
		RequestMethod: "GET", // GET or POST
	}

	x := &RevokeResourceGroupsFromUserGroupsOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ResourceACLService) DescribeResourceUserGroups(in *DescribeResourceUserGroupsInput) (out *DescribeResourceUserGroupsOutput, err error) {
	if in == nil {
		in = &DescribeResourceUserGroupsInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DescribeResourceUserGroups",
		RequestMethod: "GET", // GET or POST
	}

	x := &DescribeResourceUserGroupsOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	p.LastResponseBody = o.ResponseBody

	if err != nil {
		return nil, err
	}

	return x, err
}
