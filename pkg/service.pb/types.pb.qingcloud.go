// Code generated by protoc-gen-qingcloud-go. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/protoc-gen-qingcloud-go
// source: types.proto

package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import "regexp"

import "github.com/chai2010/qingcloud-go/pkg/config"
import "github.com/chai2010/qingcloud-go/pkg/logger"
import "github.com/chai2010/qingcloud-go/pkg/request"
import "github.com/chai2010/qingcloud-go/pkg/request/data"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var _ = regexp.Match
var _ = config.Config{}
var _ = logger.SetLevel
var _ = request.Request{}
var _ = data.Operation{}

func (p *Tag) Validate() error {
	return nil
}

func (p *ResourceTagPair) Validate() error {
	return nil
}

func (p *ResourceTypeCount) Validate() error {
	return nil
}

func (p *EIP) Validate() error {
	return nil
}

func (p *Resource) Validate() error {
	return nil
}

func (p *Job) Validate() error {
	return nil
}

func (p *Volume) Validate() error {
	return nil
}

func (p *NIC) Validate() error {
	return nil
}

func (p *KeyPair) Validate() error {
	return nil
}

func (p *VxNet) Validate() error {
	return nil
}

func (p *Router) Validate() error {
	return nil
}

func (p *Instance) Validate() error {
	return nil
}

func (p *InstanceVxNet) Validate() error {
	return nil
}

func (p *Image) Validate() error {
	return nil
}

func (p *ImageUser) Validate() error {
	return nil
}

func (p *Mongo) Validate() error {
	return nil
}

func (p *MongoNode) Validate() error {
	return nil
}

func (p *LoadBalancer) Validate() error {
	return nil
}

func (p *LoadBalancerListener) Validate() error {
	return nil
}

func (p *LoadBalancerBackend) Validate() error {
	return nil
}

func (p *Cache) Validate() error {
	return nil
}

func (p *CacheNode) Validate() error {
	return nil
}

func (p *CacheParameter) Validate() error {
	return nil
}

func (p *CacheParameterGroup) Validate() error {
	return nil
}

func (p *CachePrivateIP) Validate() error {
	return nil
}

func (p *SparkPrivateIps) Validate() error {
	return nil
}

func (p *Data) Validate() error {
	return nil
}

func (p *DHCPOption) Validate() error {
	return nil
}

func (p *DNSAlias) Validate() error {
	return nil
}

func (p *EIPGroup) Validate() error {
	return nil
}

func (p *EIPResource) Validate() error {
	return nil
}

func (p *Extra) Validate() error {
	return nil
}

func (p *File) Validate() error {
	return nil
}

func (p *InstanceType) Validate() error {
	return nil
}

func (p *LoadBalancerPolicy) Validate() error {
	return nil
}

func (p *LoadBalancerPolicyRule) Validate() error {
	return nil
}

func (p *Meter) Validate() error {
	return nil
}

func (p *MongoParameter) Validate() error {
	return nil
}

func (p *MongoPrivateIP) Validate() error {
	return nil
}

func (p *NICIP) Validate() error {
	return nil
}

func (p *RDB) Validate() error {
	return nil
}

func (p *RDBFile) Validate() error {
	return nil
}

func (p *RDBParameter) Validate() error {
	return nil
}

func (p *RDBParameters) Validate() error {
	return nil
}

func (p *RDBPrivateIP) Validate() error {
	return nil
}

func (p *RouterStatic) Validate() error {
	return nil
}

func (p *RouterStaticEntry) Validate() error {
	return nil
}

func (p *RouterVxNet) Validate() error {
	return nil
}

func (p *S2DefaultParameters) Validate() error {
	return nil
}

func (p *S2Server) Validate() error {
	return nil
}

func (p *S2SharedTarget) Validate() error {
	return nil
}

func (p *SecurityGroup) Validate() error {
	return nil
}

func (p *SecurityGroupIPSet) Validate() error {
	return nil
}

func (p *SecurityGroupRule) Validate() error {
	return nil
}

func (p *SecurityGroupSnapshot) Validate() error {
	return nil
}

func (p *ServerCertificate) Validate() error {
	return nil
}

func (p *Snapshot) Validate() error {
	return nil
}

func (p *SnapshotResource) Validate() error {
	return nil
}

func (p *User) Validate() error {
	return nil
}

func (p *Zone) Validate() error {
	return nil
}

func (p *Cluster) Validate() error {
	return nil
}

func (p *ClasterNode) Validate() error {
	return nil
}

func (p *ResourceGroupsItem) Validate() error {
	return nil
}

func (p *UserGroupItem) Validate() error {
	return nil
}

func (p *GroupRoleItem) Validate() error {
	return nil
}

func (p *GroupRoleRuleItem) Validate() error {
	return nil
}
