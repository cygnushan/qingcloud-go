// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/golang
// source: volume.proto

package qcli_pb

import (
	"fmt"
	"os"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/urfave/cli"

	pb "github.com/chai2010/qingcloud-go/pkg/api"
	"github.com/chai2010/qingcloud-go/pkg/config"
	"github.com/chai2010/qingcloud-go/pkg/logger"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = os.Stdin

	_ = cli.Command{}
	_ = jsonpb.Unmarshal
	_ = proto.Marshal

	_ = config.Config{}
	_ = logger.Info
	_ = pb.AlarmService{}
)

func init() {
	AllCommands = append(AllCommands, CmdVolumesService)
}

var CmdVolumesService = cli.Command{
	Name:    "volumes",
	Aliases: []string{},
	Usage:   "manage VolumesService",
	Subcommands: []cli.Command{
		{
			Name:    "DescribeVolumes",
			Aliases: []string{},
			Usage:   "DescribeVolumes",
			Flags:   _flag_VolumesService_DescribeVolumes,
			Action:  _cmd_VolumesService_DescribeVolumes,
		},
		{
			Name:    "CreateVolumes",
			Aliases: []string{},
			Usage:   "CreateVolumes",
			Flags:   _flag_VolumesService_CreateVolumes,
			Action:  _cmd_VolumesService_CreateVolumes,
		},
		{
			Name:    "DeleteVolumes",
			Aliases: []string{},
			Usage:   "DeleteVolumes",
			Flags:   _flag_VolumesService_DeleteVolumes,
			Action:  _cmd_VolumesService_DeleteVolumes,
		},
		{
			Name:    "AttachVolumes",
			Aliases: []string{},
			Usage:   "AttachVolumes",
			Flags:   _flag_VolumesService_AttachVolumes,
			Action:  _cmd_VolumesService_AttachVolumes,
		},
		{
			Name:    "DetachVolumes",
			Aliases: []string{},
			Usage:   "DetachVolumes",
			Flags:   _flag_VolumesService_DetachVolumes,
			Action:  _cmd_VolumesService_DetachVolumes,
		},
		{
			Name:    "ResizeVolumes",
			Aliases: []string{},
			Usage:   "ResizeVolumes",
			Flags:   _flag_VolumesService_ResizeVolumes,
			Action:  _cmd_VolumesService_ResizeVolumes,
		},
		{
			Name:    "ModifyVolumeAttributes",
			Aliases: []string{},
			Usage:   "ModifyVolumeAttributes",
			Flags:   _flag_VolumesService_ModifyVolumeAttributes,
			Action:  _cmd_VolumesService_ModifyVolumeAttributes,
		},
	},
}

var _flag_VolumesService_DescribeVolumes = []cli.Flag{ /* fields */ }

func _cmd_VolumesService_DescribeVolumes(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewVolumesService(conf, zone)

	in := new(pb.DescribeVolumesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DescribeVolumes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_VolumesService_CreateVolumes = []cli.Flag{ /* fields */ }

func _cmd_VolumesService_CreateVolumes(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewVolumesService(conf, zone)

	in := new(pb.CreateVolumesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.CreateVolumes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_VolumesService_DeleteVolumes = []cli.Flag{ /* fields */ }

func _cmd_VolumesService_DeleteVolumes(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewVolumesService(conf, zone)

	in := new(pb.DeleteVolumesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DeleteVolumes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_VolumesService_AttachVolumes = []cli.Flag{ /* fields */ }

func _cmd_VolumesService_AttachVolumes(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewVolumesService(conf, zone)

	in := new(pb.AttachVolumesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.AttachVolumes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_VolumesService_DetachVolumes = []cli.Flag{ /* fields */ }

func _cmd_VolumesService_DetachVolumes(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewVolumesService(conf, zone)

	in := new(pb.DetachVolumesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DetachVolumes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_VolumesService_ResizeVolumes = []cli.Flag{ /* fields */ }

func _cmd_VolumesService_ResizeVolumes(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewVolumesService(conf, zone)

	in := new(pb.ResizeVolumesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.ResizeVolumes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_VolumesService_ModifyVolumeAttributes = []cli.Flag{ /* fields */ }

func _cmd_VolumesService_ModifyVolumeAttributes(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewVolumesService(conf, zone)

	in := new(pb.ModifyVolumeAttributesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.ModifyVolumeAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}
