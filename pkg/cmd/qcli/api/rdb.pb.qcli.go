// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/qcli
// source: rdb.proto

package qcli_pb

import (
	"fmt"
	"os"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/urfave/cli"

	pb "github.com/chai2010/qingcloud-go/pkg/api"
	"github.com/chai2010/qingcloud-go/pkg/config"
	"github.com/chai2010/qingcloud-go/pkg/logger"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = os.Stdin

	_ = cli.Command{}
	_ = jsonpb.Unmarshal
	_ = proto.Marshal

	_ = config.Config{}
	_ = logger.Info
	_ = pb.AlarmService{}
)

func init() {
	AllCommands = append(AllCommands, CmdRDBService)
}

var CmdRDBService = cli.Command{
	Name:    "rdb",
	Aliases: []string{},
	Usage:   "manage RDBService",
	Subcommands: []cli.Command{
		{
			Name:    "CreateRDB",
			Aliases: []string{},
			Usage:   "CreateRDB",
			Flags:   _flag_RDBService_CreateRDB,
			Action:  _cmd_RDBService_CreateRDB,
		},
		{
			Name:    "DescribeRDBs",
			Aliases: []string{},
			Usage:   "DescribeRDBs",
			Flags:   _flag_RDBService_DescribeRDBs,
			Action:  _cmd_RDBService_DescribeRDBs,
		},
		{
			Name:    "DeleteRDBs",
			Aliases: []string{},
			Usage:   "DeleteRDBs",
			Flags:   _flag_RDBService_DeleteRDBs,
			Action:  _cmd_RDBService_DeleteRDBs,
		},
		{
			Name:    "StartRDBs",
			Aliases: []string{},
			Usage:   "StartRDBs",
			Flags:   _flag_RDBService_StartRDBs,
			Action:  _cmd_RDBService_StartRDBs,
		},
		{
			Name:    "StopRDBs",
			Aliases: []string{},
			Usage:   "StopRDBs",
			Flags:   _flag_RDBService_StopRDBs,
			Action:  _cmd_RDBService_StopRDBs,
		},
		{
			Name:    "ResizeRDBs",
			Aliases: []string{},
			Usage:   "ResizeRDBs",
			Flags:   _flag_RDBService_ResizeRDBs,
			Action:  _cmd_RDBService_ResizeRDBs,
		},
		{
			Name:    "RDBsLeaveVxnet",
			Aliases: []string{},
			Usage:   "RDBsLeaveVxnet",
			Flags:   _flag_RDBService_RDBsLeaveVxnet,
			Action:  _cmd_RDBService_RDBsLeaveVxnet,
		},
		{
			Name:    "RDBsJoinVxnet",
			Aliases: []string{},
			Usage:   "RDBsJoinVxnet",
			Flags:   _flag_RDBService_RDBsJoinVxnet,
			Action:  _cmd_RDBService_RDBsJoinVxnet,
		},
		{
			Name:    "CreateRDBFromSnapshot",
			Aliases: []string{},
			Usage:   "CreateRDBFromSnapshot",
			Flags:   _flag_RDBService_CreateRDBFromSnapshot,
			Action:  _cmd_RDBService_CreateRDBFromSnapshot,
		},
		{
			Name:    "CreateTempRDBInstanceFromSnapshot",
			Aliases: []string{},
			Usage:   "CreateTempRDBInstanceFromSnapshot",
			Flags:   _flag_RDBService_CreateTempRDBInstanceFromSnapshot,
			Action:  _cmd_RDBService_CreateTempRDBInstanceFromSnapshot,
		},
		{
			Name:    "GetRDBInstanceFiles",
			Aliases: []string{},
			Usage:   "GetRDBInstanceFiles",
			Flags:   _flag_RDBService_GetRDBInstanceFiles,
			Action:  _cmd_RDBService_GetRDBInstanceFiles,
		},
		{
			Name:    "CopyRDBInstanceFilesToFTP",
			Aliases: []string{},
			Usage:   "CopyRDBInstanceFilesToFTP",
			Flags:   _flag_RDBService_CopyRDBInstanceFilesToFTP,
			Action:  _cmd_RDBService_CopyRDBInstanceFilesToFTP,
		},
		{
			Name:    "PurgeRDBLogs",
			Aliases: []string{},
			Usage:   "PurgeRDBLogs",
			Flags:   _flag_RDBService_PurgeRDBLogs,
			Action:  _cmd_RDBService_PurgeRDBLogs,
		},
		{
			Name:    "CeaseRDBInstance",
			Aliases: []string{},
			Usage:   "CeaseRDBInstance",
			Flags:   _flag_RDBService_CeaseRDBInstance,
			Action:  _cmd_RDBService_CeaseRDBInstance,
		},
		{
			Name:    "ModifyRDBParameters",
			Aliases: []string{},
			Usage:   "ModifyRDBParameters",
			Flags:   _flag_RDBService_ModifyRDBParameters,
			Action:  _cmd_RDBService_ModifyRDBParameters,
		},
		{
			Name:    "ApplyRDBParameterGroup",
			Aliases: []string{},
			Usage:   "ApplyRDBParameterGroup",
			Flags:   _flag_RDBService_ApplyRDBParameterGroup,
			Action:  _cmd_RDBService_ApplyRDBParameterGroup,
		},
		{
			Name:    "DescribeRDBParameters",
			Aliases: []string{},
			Usage:   "DescribeRDBParameters",
			Flags:   _flag_RDBService_DescribeRDBParameters,
			Action:  _cmd_RDBService_DescribeRDBParameters,
		},
	},
}

var _flag_RDBService_CreateRDB = []cli.Flag{ /* fields */ }

func _cmd_RDBService_CreateRDB(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewRDBService(conf, zone)

	in := new(pb.CreateRDBInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.CreateRDB(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_RDBService_DescribeRDBs = []cli.Flag{ /* fields */ }

func _cmd_RDBService_DescribeRDBs(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewRDBService(conf, zone)

	in := new(pb.DescribeRDBsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DescribeRDBs(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_RDBService_DeleteRDBs = []cli.Flag{ /* fields */ }

func _cmd_RDBService_DeleteRDBs(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewRDBService(conf, zone)

	in := new(pb.DeleteRDBsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DeleteRDBs(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_RDBService_StartRDBs = []cli.Flag{ /* fields */ }

func _cmd_RDBService_StartRDBs(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewRDBService(conf, zone)

	in := new(pb.StartRDBsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.StartRDBs(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_RDBService_StopRDBs = []cli.Flag{ /* fields */ }

func _cmd_RDBService_StopRDBs(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewRDBService(conf, zone)

	in := new(pb.StopRDBsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.StopRDBs(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_RDBService_ResizeRDBs = []cli.Flag{ /* fields */ }

func _cmd_RDBService_ResizeRDBs(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewRDBService(conf, zone)

	in := new(pb.ResizeRDBsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.ResizeRDBs(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_RDBService_RDBsLeaveVxnet = []cli.Flag{ /* fields */ }

func _cmd_RDBService_RDBsLeaveVxnet(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewRDBService(conf, zone)

	in := new(pb.RDBsLeaveVxnetInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.RDBsLeaveVxnet(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_RDBService_RDBsJoinVxnet = []cli.Flag{ /* fields */ }

func _cmd_RDBService_RDBsJoinVxnet(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewRDBService(conf, zone)

	in := new(pb.RDBsJoinVxnetInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.RDBsJoinVxnet(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_RDBService_CreateRDBFromSnapshot = []cli.Flag{ /* fields */ }

func _cmd_RDBService_CreateRDBFromSnapshot(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewRDBService(conf, zone)

	in := new(pb.CreateRDBFromSnapshotInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.CreateRDBFromSnapshot(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_RDBService_CreateTempRDBInstanceFromSnapshot = []cli.Flag{ /* fields */ }

func _cmd_RDBService_CreateTempRDBInstanceFromSnapshot(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewRDBService(conf, zone)

	in := new(pb.CreateTempRDBInstanceFromSnapshotInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.CreateTempRDBInstanceFromSnapshot(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_RDBService_GetRDBInstanceFiles = []cli.Flag{ /* fields */ }

func _cmd_RDBService_GetRDBInstanceFiles(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewRDBService(conf, zone)

	in := new(pb.GetRDBInstanceFilesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.GetRDBInstanceFiles(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_RDBService_CopyRDBInstanceFilesToFTP = []cli.Flag{ /* fields */ }

func _cmd_RDBService_CopyRDBInstanceFilesToFTP(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewRDBService(conf, zone)

	in := new(pb.CopyRDBInstanceFilesToFTPInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.CopyRDBInstanceFilesToFTP(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_RDBService_PurgeRDBLogs = []cli.Flag{ /* fields */ }

func _cmd_RDBService_PurgeRDBLogs(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewRDBService(conf, zone)

	in := new(pb.PurgeRDBLogsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.PurgeRDBLogs(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_RDBService_CeaseRDBInstance = []cli.Flag{ /* fields */ }

func _cmd_RDBService_CeaseRDBInstance(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewRDBService(conf, zone)

	in := new(pb.CeaseRDBInstanceInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.CeaseRDBInstance(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_RDBService_ModifyRDBParameters = []cli.Flag{ /* fields */ }

func _cmd_RDBService_ModifyRDBParameters(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewRDBService(conf, zone)

	in := new(pb.ModifyRDBParametersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.ModifyRDBParameters(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_RDBService_ApplyRDBParameterGroup = []cli.Flag{ /* fields */ }

func _cmd_RDBService_ApplyRDBParameterGroup(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewRDBService(conf, zone)

	in := new(pb.ApplyRDBParameterGroupInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.ApplyRDBParameterGroup(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_RDBService_DescribeRDBParameters = []cli.Flag{ /* fields */ }

func _cmd_RDBService_DescribeRDBParameters(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewRDBService(conf, zone)

	in := new(pb.DescribeRDBParametersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DescribeRDBParameters(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}
