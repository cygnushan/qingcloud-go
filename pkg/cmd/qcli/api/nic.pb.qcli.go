// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/golang
// source: nic.proto

package qcli_pb

import (
	"fmt"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/urfave/cli"

	pb "github.com/chai2010/qingcloud-go/pkg/api"
	"github.com/chai2010/qingcloud-go/pkg/config"
	"github.com/chai2010/qingcloud-go/pkg/logger"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf

	_ = cli.Command{}
	_ = jsonpb.Unmarshal
	_ = proto.Marshal

	_ = config.Config{}
	_ = logger.Info
	_ = pb.AlarmService{}
)

func init() {
	AllCommands = append(AllCommands, CmdNicService)
}

var CmdNicService = cli.Command{
	Name:    "nic",
	Aliases: []string{},
	Usage:   "manage NicService",
	Subcommands: []cli.Command{
		{
			Name:    "CreateNics",
			Aliases: []string{},
			Usage:   "CreateNics",
			Action:  cmdCreateNics,
		},
		{
			Name:    "DescribeNics",
			Aliases: []string{},
			Usage:   "DescribeNics",
			Action:  cmdDescribeNics,
		},
		{
			Name:    "AttachNics",
			Aliases: []string{},
			Usage:   "AttachNics",
			Action:  cmdAttachNics,
		},
		{
			Name:    "DetachNics",
			Aliases: []string{},
			Usage:   "DetachNics",
			Action:  cmdDetachNics,
		},
		{
			Name:    "ModifyNicAttributes",
			Aliases: []string{},
			Usage:   "ModifyNicAttributes",
			Action:  cmdModifyNicAttributes,
		},
		{
			Name:    "DeleteNics",
			Aliases: []string{},
			Usage:   "DeleteNics",
			Action:  cmdDeleteNics,
		},
	},
}

func cmdCreateNics(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewNicService(conf, zone)

	in := new(pb.CreateNicsInput)

	// TODO: fill field from flags

	out, err := qc.CreateNics(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeNics(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewNicService(conf, zone)

	in := new(pb.DescribeNicsInput)

	// TODO: fill field from flags

	out, err := qc.DescribeNics(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdAttachNics(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewNicService(conf, zone)

	in := new(pb.AttachNicsInput)

	// TODO: fill field from flags

	out, err := qc.AttachNics(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDetachNics(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewNicService(conf, zone)

	in := new(pb.DetachNicsInput)

	// TODO: fill field from flags

	out, err := qc.DetachNics(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyNicAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewNicService(conf, zone)

	in := new(pb.ModifyNicAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyNicAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteNics(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewNicService(conf, zone)

	in := new(pb.DeleteNicsInput)

	// TODO: fill field from flags

	out, err := qc.DeleteNics(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}
