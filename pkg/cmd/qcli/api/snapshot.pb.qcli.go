// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/golang
// source: snapshot.proto

package qcli_pb

import (
	"fmt"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/urfave/cli"

	pb "github.com/chai2010/qingcloud-go/pkg/api"
	"github.com/chai2010/qingcloud-go/pkg/config"
	"github.com/chai2010/qingcloud-go/pkg/logger"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf

	_ = cli.Command{}
	_ = jsonpb.Unmarshal
	_ = proto.Marshal

	_ = config.Config{}
	_ = logger.Info
	_ = pb.AlarmService{}
)

func init() {
	AllCommands = append(AllCommands, CmdSnapshotService)
}

var CmdSnapshotService = cli.Command{
	Name:    "snapshot",
	Aliases: []string{},
	Usage:   "manage SnapshotService",
	Subcommands: []cli.Command{
		{
			Name:    "DescribeSnapshots",
			Aliases: []string{},
			Usage:   "DescribeSnapshots",
			Action:  cmdDescribeSnapshots,
		},
		{
			Name:    "CreateSnapshots",
			Aliases: []string{},
			Usage:   "CreateSnapshots",
			Action:  cmdCreateSnapshots,
		},
		{
			Name:    "DeleteSnapshots",
			Aliases: []string{},
			Usage:   "DeleteSnapshots",
			Action:  cmdDeleteSnapshots,
		},
		{
			Name:    "ApplySnapshots",
			Aliases: []string{},
			Usage:   "ApplySnapshots",
			Action:  cmdApplySnapshots,
		},
		{
			Name:    "ModifySnapshotAttributes",
			Aliases: []string{},
			Usage:   "ModifySnapshotAttributes",
			Action:  cmdModifySnapshotAttributes,
		},
		{
			Name:    "CaptureInstanceFromSnapshot",
			Aliases: []string{},
			Usage:   "CaptureInstanceFromSnapshot",
			Action:  cmdCaptureInstanceFromSnapshot,
		},
		{
			Name:    "CreateVolumeFromSnapshot",
			Aliases: []string{},
			Usage:   "CreateVolumeFromSnapshot",
			Action:  cmdCreateVolumeFromSnapshot,
		},
	},
}

func cmdDescribeSnapshots(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSnapshotService(conf, zone)

	in := new(pb.DescribeSnapshotsInput)

	// TODO: fill field from flags

	out, err := qc.DescribeSnapshots(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCreateSnapshots(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSnapshotService(conf, zone)

	in := new(pb.CreateSnapshotsInput)

	// TODO: fill field from flags

	out, err := qc.CreateSnapshots(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteSnapshots(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSnapshotService(conf, zone)

	in := new(pb.DeleteSnapshotsInput)

	// TODO: fill field from flags

	out, err := qc.DeleteSnapshots(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdApplySnapshots(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSnapshotService(conf, zone)

	in := new(pb.ApplySnapshotsInput)

	// TODO: fill field from flags

	out, err := qc.ApplySnapshots(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifySnapshotAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSnapshotService(conf, zone)

	in := new(pb.ModifySnapshotAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifySnapshotAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCaptureInstanceFromSnapshot(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSnapshotService(conf, zone)

	in := new(pb.CaptureInstanceFromSnapshotInput)

	// TODO: fill field from flags

	out, err := qc.CaptureInstanceFromSnapshot(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCreateVolumeFromSnapshot(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSnapshotService(conf, zone)

	in := new(pb.CreateVolumeFromSnapshotInput)

	// TODO: fill field from flags

	out, err := qc.CreateVolumeFromSnapshot(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}
