// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/golang
// source: mongo.proto

package qcli_pb

import (
	"fmt"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/urfave/cli"

	pb "github.com/chai2010/qingcloud-go/pkg/api"
	"github.com/chai2010/qingcloud-go/pkg/config"
	"github.com/chai2010/qingcloud-go/pkg/logger"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf

	_ = cli.Command{}
	_ = jsonpb.Unmarshal
	_ = proto.Marshal

	_ = config.Config{}
	_ = logger.Info
	_ = pb.AlarmService{}
)

func init() {
	AllCommands = append(AllCommands, CmdMongoService)
}

var CmdMongoService = cli.Command{
	Name:    "mongo",
	Aliases: []string{},
	Usage:   "manage MongoService",
	Subcommands: []cli.Command{
		{
			Name:    "DescribeMongoNodes",
			Aliases: []string{},
			Usage:   "DescribeMongoNodes",
			Action:  cmdDescribeMongoNodes,
		},
		{
			Name:    "DescribeMongoParameters",
			Aliases: []string{},
			Usage:   "DescribeMongoParameters",
			Action:  cmdDescribeMongoParameters,
		},
		{
			Name:    "ResizeMongos",
			Aliases: []string{},
			Usage:   "ResizeMongos",
			Action:  cmdResizeMongos,
		},
		{
			Name:    "CreateMongo",
			Aliases: []string{},
			Usage:   "CreateMongo",
			Action:  cmdCreateMongo,
		},
		{
			Name:    "StopMongos",
			Aliases: []string{},
			Usage:   "StopMongos",
			Action:  cmdStopMongos,
		},
		{
			Name:    "StartMongos",
			Aliases: []string{},
			Usage:   "StartMongos",
			Action:  cmdStartMongos,
		},
		{
			Name:    "DescribeMongos",
			Aliases: []string{},
			Usage:   "DescribeMongos",
			Action:  cmdDescribeMongos,
		},
		{
			Name:    "DeleteMongos",
			Aliases: []string{},
			Usage:   "DeleteMongos",
			Action:  cmdDeleteMongos,
		},
		{
			Name:    "CreateMongoFromSnapshot",
			Aliases: []string{},
			Usage:   "CreateMongoFromSnapshot",
			Action:  cmdCreateMongoFromSnapshot,
		},
		{
			Name:    "ChangeMongoVxnet",
			Aliases: []string{},
			Usage:   "ChangeMongoVxnet",
			Action:  cmdChangeMongoVxnet,
		},
		{
			Name:    "AddMongoInstances",
			Aliases: []string{},
			Usage:   "AddMongoInstances",
			Action:  cmdAddMongoInstances,
		},
		{
			Name:    "RemoveMongoInstances",
			Aliases: []string{},
			Usage:   "RemoveMongoInstances",
			Action:  cmdRemoveMongoInstances,
		},
		{
			Name:    "ModifyMongoAttributes",
			Aliases: []string{},
			Usage:   "ModifyMongoAttributes",
			Action:  cmdModifyMongoAttributes,
		},
		{
			Name:    "ModifyMongoInstances",
			Aliases: []string{},
			Usage:   "ModifyMongoInstances",
			Action:  cmdModifyMongoInstances,
		},
	},
}

func cmdDescribeMongoNodes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewMongoService(conf, zone)

	in := new(pb.DescribeMongoNodesInput)

	// TODO: fill field from flags

	out, err := qc.DescribeMongoNodes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeMongoParameters(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewMongoService(conf, zone)

	in := new(pb.DescribeMongoParametersInput)

	// TODO: fill field from flags

	out, err := qc.DescribeMongoParameters(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdResizeMongos(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewMongoService(conf, zone)

	in := new(pb.ResizeMongosInput)

	// TODO: fill field from flags

	out, err := qc.ResizeMongos(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCreateMongo(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewMongoService(conf, zone)

	in := new(pb.CreateMongoInput)

	// TODO: fill field from flags

	out, err := qc.CreateMongo(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdStopMongos(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewMongoService(conf, zone)

	in := new(pb.StopMongosInput)

	// TODO: fill field from flags

	out, err := qc.StopMongos(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdStartMongos(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewMongoService(conf, zone)

	in := new(pb.StartMongosInput)

	// TODO: fill field from flags

	out, err := qc.StartMongos(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeMongos(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewMongoService(conf, zone)

	in := new(pb.DescribeMongosInput)

	// TODO: fill field from flags

	out, err := qc.DescribeMongos(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteMongos(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewMongoService(conf, zone)

	in := new(pb.DeleteMongosInput)

	// TODO: fill field from flags

	out, err := qc.DeleteMongos(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCreateMongoFromSnapshot(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewMongoService(conf, zone)

	in := new(pb.CreateMongoFromSnapshotInput)

	// TODO: fill field from flags

	out, err := qc.CreateMongoFromSnapshot(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdChangeMongoVxnet(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewMongoService(conf, zone)

	in := new(pb.ChangeMongoVxnetInput)

	// TODO: fill field from flags

	out, err := qc.ChangeMongoVxnet(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdAddMongoInstances(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewMongoService(conf, zone)

	in := new(pb.AddMongoInstancesInput)

	// TODO: fill field from flags

	out, err := qc.AddMongoInstances(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdRemoveMongoInstances(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewMongoService(conf, zone)

	in := new(pb.RemoveMongoInstancesInput)

	// TODO: fill field from flags

	out, err := qc.RemoveMongoInstances(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyMongoAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewMongoService(conf, zone)

	in := new(pb.ModifyMongoAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyMongoAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyMongoInstances(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewMongoService(conf, zone)

	in := new(pb.ModifyMongoInstancesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyMongoInstances(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}
