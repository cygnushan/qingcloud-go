// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/golang
// source: span.proto

package qcli_pb

import (
	"fmt"
	"os"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/urfave/cli"

	pb "github.com/chai2010/qingcloud-go/pkg/api"
	"github.com/chai2010/qingcloud-go/pkg/config"
	"github.com/chai2010/qingcloud-go/pkg/logger"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = os.Stdin

	_ = cli.Command{}
	_ = jsonpb.Unmarshal
	_ = proto.Marshal

	_ = config.Config{}
	_ = logger.Info
	_ = pb.AlarmService{}
)

func init() {
	AllCommands = append(AllCommands, CmdSpanService)
}

var CmdSpanService = cli.Command{
	Name:    "span",
	Aliases: []string{},
	Usage:   "manage SpanService",
	Subcommands: []cli.Command{
		{
			Name:    "CreateSpan",
			Aliases: []string{},
			Usage:   "CreateSpan",
			Flags:   _flag_SpanService_CreateSpan,
			Action:  _cmd_SpanService_CreateSpan,
		},
		{
			Name:    "DescribeSpans",
			Aliases: []string{},
			Usage:   "DescribeSpans",
			Flags:   _flag_SpanService_DescribeSpans,
			Action:  _cmd_SpanService_DescribeSpans,
		},
		{
			Name:    "DeleteSpans",
			Aliases: []string{},
			Usage:   "DeleteSpans",
			Flags:   _flag_SpanService_DeleteSpans,
			Action:  _cmd_SpanService_DeleteSpans,
		},
		{
			Name:    "AddSpanMembers",
			Aliases: []string{},
			Usage:   "AddSpanMembers",
			Flags:   _flag_SpanService_AddSpanMembers,
			Action:  _cmd_SpanService_AddSpanMembers,
		},
		{
			Name:    "RemoveSpanMembers",
			Aliases: []string{},
			Usage:   "RemoveSpanMembers",
			Flags:   _flag_SpanService_RemoveSpanMembers,
			Action:  _cmd_SpanService_RemoveSpanMembers,
		},
		{
			Name:    "ModifySpanAttributes",
			Aliases: []string{},
			Usage:   "ModifySpanAttributes",
			Flags:   _flag_SpanService_ModifySpanAttributes,
			Action:  _cmd_SpanService_ModifySpanAttributes,
		},
		{
			Name:    "UpdateSpan",
			Aliases: []string{},
			Usage:   "UpdateSpan",
			Flags:   _flag_SpanService_UpdateSpan,
			Action:  _cmd_SpanService_UpdateSpan,
		},
	},
}

var _flag_SpanService_CreateSpan = []cli.Flag{ /* fields */ }

func _cmd_SpanService_CreateSpan(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewSpanService(conf, zone)

	in := new(pb.CreateSpanInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.CreateSpan(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SpanService_DescribeSpans = []cli.Flag{ /* fields */ }

func _cmd_SpanService_DescribeSpans(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewSpanService(conf, zone)

	in := new(pb.DescribeSpansInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DescribeSpans(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SpanService_DeleteSpans = []cli.Flag{ /* fields */ }

func _cmd_SpanService_DeleteSpans(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewSpanService(conf, zone)

	in := new(pb.DeleteSpansInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DeleteSpans(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SpanService_AddSpanMembers = []cli.Flag{ /* fields */ }

func _cmd_SpanService_AddSpanMembers(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewSpanService(conf, zone)

	in := new(pb.AddSpanMembersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.AddSpanMembers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SpanService_RemoveSpanMembers = []cli.Flag{ /* fields */ }

func _cmd_SpanService_RemoveSpanMembers(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewSpanService(conf, zone)

	in := new(pb.RemoveSpanMembersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.RemoveSpanMembers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SpanService_ModifySpanAttributes = []cli.Flag{ /* fields */ }

func _cmd_SpanService_ModifySpanAttributes(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewSpanService(conf, zone)

	in := new(pb.ModifySpanAttributesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.ModifySpanAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SpanService_UpdateSpan = []cli.Flag{ /* fields */ }

func _cmd_SpanService_UpdateSpan(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewSpanService(conf, zone)

	in := new(pb.UpdateSpanInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.UpdateSpan(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}
