// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/qcli
// source: s2.proto

package qcli_pb

import (
	"fmt"
	"os"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/urfave/cli"

	pb "github.com/chai2010/qingcloud-go/pkg/api"
	"github.com/chai2010/qingcloud-go/pkg/config"
	"github.com/chai2010/qingcloud-go/pkg/logger"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = os.Stdin

	_ = cli.Command{}
	_ = jsonpb.Unmarshal
	_ = proto.Marshal

	_ = config.Config{}
	_ = logger.Info
	_ = pb.AlarmService{}
)

func init() {
	AllCommands = append(AllCommands, CmdS2Service)
}

var CmdS2Service = cli.Command{
	Name:    "s2",
	Aliases: []string{},
	Usage:   "manage S2Service",
	Subcommands: []cli.Command{
		{
			Name:    "CreateS2Server",
			Aliases: []string{},
			Usage:   "CreateS2Server",
			Flags:   _flag_S2Service_CreateS2Server,
			Action:  _cmd_S2Service_CreateS2Server,
		},
		{
			Name:    "DescribeS2Servers",
			Aliases: []string{},
			Usage:   "DescribeS2Servers",
			Flags:   _flag_S2Service_DescribeS2Servers,
			Action:  _cmd_S2Service_DescribeS2Servers,
		},
		{
			Name:    "ModifyS2Server",
			Aliases: []string{},
			Usage:   "ModifyS2Server",
			Flags:   _flag_S2Service_ModifyS2Server,
			Action:  _cmd_S2Service_ModifyS2Server,
		},
		{
			Name:    "ResizeS2Servers",
			Aliases: []string{},
			Usage:   "ResizeS2Servers",
			Flags:   _flag_S2Service_ResizeS2Servers,
			Action:  _cmd_S2Service_ResizeS2Servers,
		},
		{
			Name:    "DeleteS2Servers",
			Aliases: []string{},
			Usage:   "DeleteS2Servers",
			Flags:   _flag_S2Service_DeleteS2Servers,
			Action:  _cmd_S2Service_DeleteS2Servers,
		},
		{
			Name:    "PowerOnS2Servers",
			Aliases: []string{},
			Usage:   "PowerOnS2Servers",
			Flags:   _flag_S2Service_PowerOnS2Servers,
			Action:  _cmd_S2Service_PowerOnS2Servers,
		},
		{
			Name:    "PowerOffS2Servers",
			Aliases: []string{},
			Usage:   "PowerOffS2Servers",
			Flags:   _flag_S2Service_PowerOffS2Servers,
			Action:  _cmd_S2Service_PowerOffS2Servers,
		},
		{
			Name:    "UpdateS2Servers",
			Aliases: []string{},
			Usage:   "UpdateS2Servers",
			Flags:   _flag_S2Service_UpdateS2Servers,
			Action:  _cmd_S2Service_UpdateS2Servers,
		},
		{
			Name:    "ChangeS2ServerVxnet",
			Aliases: []string{},
			Usage:   "ChangeS2ServerVxnet",
			Flags:   _flag_S2Service_ChangeS2ServerVxnet,
			Action:  _cmd_S2Service_ChangeS2ServerVxnet,
		},
		{
			Name:    "CreateS2SharedTarget",
			Aliases: []string{},
			Usage:   "CreateS2SharedTarget",
			Flags:   _flag_S2Service_CreateS2SharedTarget,
			Action:  _cmd_S2Service_CreateS2SharedTarget,
		},
		{
			Name:    "DescribeS2SharedTargets",
			Aliases: []string{},
			Usage:   "DescribeS2SharedTargets",
			Flags:   _flag_S2Service_DescribeS2SharedTargets,
			Action:  _cmd_S2Service_DescribeS2SharedTargets,
		},
		{
			Name:    "DeleteS2SharedTargets",
			Aliases: []string{},
			Usage:   "DeleteS2SharedTargets",
			Flags:   _flag_S2Service_DeleteS2SharedTargets,
			Action:  _cmd_S2Service_DeleteS2SharedTargets,
		},
		{
			Name:    "EnableS2SharedTargets",
			Aliases: []string{},
			Usage:   "EnableS2SharedTargets",
			Flags:   _flag_S2Service_EnableS2SharedTargets,
			Action:  _cmd_S2Service_EnableS2SharedTargets,
		},
		{
			Name:    "DisableS2SharedTargets",
			Aliases: []string{},
			Usage:   "DisableS2SharedTargets",
			Flags:   _flag_S2Service_DisableS2SharedTargets,
			Action:  _cmd_S2Service_DisableS2SharedTargets,
		},
		{
			Name:    "ModifyS2SharedTargetAttributes",
			Aliases: []string{},
			Usage:   "ModifyS2SharedTargetAttributes",
			Flags:   _flag_S2Service_ModifyS2SharedTargetAttributes,
			Action:  _cmd_S2Service_ModifyS2SharedTargetAttributes,
		},
		{
			Name:    "AttachToS2SharedTarget",
			Aliases: []string{},
			Usage:   "AttachToS2SharedTarget",
			Flags:   _flag_S2Service_AttachToS2SharedTarget,
			Action:  _cmd_S2Service_AttachToS2SharedTarget,
		},
		{
			Name:    "DetachFromS2SharedTarget",
			Aliases: []string{},
			Usage:   "DetachFromS2SharedTarget",
			Flags:   _flag_S2Service_DetachFromS2SharedTarget,
			Action:  _cmd_S2Service_DetachFromS2SharedTarget,
		},
		{
			Name:    "DescribeS2DefaultParameters",
			Aliases: []string{},
			Usage:   "DescribeS2DefaultParameters",
			Flags:   _flag_S2Service_DescribeS2DefaultParameters,
			Action:  _cmd_S2Service_DescribeS2DefaultParameters,
		},
		{
			Name:    "CreateS2Group",
			Aliases: []string{},
			Usage:   "CreateS2Group",
			Flags:   _flag_S2Service_CreateS2Group,
			Action:  _cmd_S2Service_CreateS2Group,
		},
		{
			Name:    "DescribeS2Groups",
			Aliases: []string{},
			Usage:   "DescribeS2Groups",
			Flags:   _flag_S2Service_DescribeS2Groups,
			Action:  _cmd_S2Service_DescribeS2Groups,
		},
		{
			Name:    "ModifyS2Group",
			Aliases: []string{},
			Usage:   "ModifyS2Group",
			Flags:   _flag_S2Service_ModifyS2Group,
			Action:  _cmd_S2Service_ModifyS2Group,
		},
		{
			Name:    "DeleteS2Groups",
			Aliases: []string{},
			Usage:   "DeleteS2Groups",
			Flags:   _flag_S2Service_DeleteS2Groups,
			Action:  _cmd_S2Service_DeleteS2Groups,
		},
		{
			Name:    "CreateS2Account",
			Aliases: []string{},
			Usage:   "CreateS2Account",
			Flags:   _flag_S2Service_CreateS2Account,
			Action:  _cmd_S2Service_CreateS2Account,
		},
		{
			Name:    "DescribeS2Accounts",
			Aliases: []string{},
			Usage:   "DescribeS2Accounts",
			Flags:   _flag_S2Service_DescribeS2Accounts,
			Action:  _cmd_S2Service_DescribeS2Accounts,
		},
		{
			Name:    "ModifyS2Account",
			Aliases: []string{},
			Usage:   "ModifyS2Account",
			Flags:   _flag_S2Service_ModifyS2Account,
			Action:  _cmd_S2Service_ModifyS2Account,
		},
		{
			Name:    "DeleteS2Accounts",
			Aliases: []string{},
			Usage:   "DeleteS2Accounts",
			Flags:   _flag_S2Service_DeleteS2Accounts,
			Action:  _cmd_S2Service_DeleteS2Accounts,
		},
		{
			Name:    "AssociateS2AccountGroup",
			Aliases: []string{},
			Usage:   "AssociateS2AccountGroup",
			Flags:   _flag_S2Service_AssociateS2AccountGroup,
			Action:  _cmd_S2Service_AssociateS2AccountGroup,
		},
		{
			Name:    "DissociateS2AccountGroup",
			Aliases: []string{},
			Usage:   "DissociateS2AccountGroup",
			Flags:   _flag_S2Service_DissociateS2AccountGroup,
			Action:  _cmd_S2Service_DissociateS2AccountGroup,
		},
	},
}

var _flag_S2Service_CreateS2Server = []cli.Flag{ /* fields */ }

func _cmd_S2Service_CreateS2Server(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.CreateS2ServerInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.CreateS2Server(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_DescribeS2Servers = []cli.Flag{ /* fields */ }

func _cmd_S2Service_DescribeS2Servers(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.DescribeS2ServersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DescribeS2Servers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_ModifyS2Server = []cli.Flag{ /* fields */ }

func _cmd_S2Service_ModifyS2Server(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.ModifyS2ServerInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.ModifyS2Server(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_ResizeS2Servers = []cli.Flag{ /* fields */ }

func _cmd_S2Service_ResizeS2Servers(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.ResizeS2ServersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.ResizeS2Servers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_DeleteS2Servers = []cli.Flag{ /* fields */ }

func _cmd_S2Service_DeleteS2Servers(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.DeleteS2ServersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DeleteS2Servers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_PowerOnS2Servers = []cli.Flag{ /* fields */ }

func _cmd_S2Service_PowerOnS2Servers(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.PowerOnS2ServersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.PowerOnS2Servers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_PowerOffS2Servers = []cli.Flag{ /* fields */ }

func _cmd_S2Service_PowerOffS2Servers(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.PowerOffS2ServersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.PowerOffS2Servers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_UpdateS2Servers = []cli.Flag{ /* fields */ }

func _cmd_S2Service_UpdateS2Servers(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.UpdateS2ServersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.UpdateS2Servers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_ChangeS2ServerVxnet = []cli.Flag{ /* fields */ }

func _cmd_S2Service_ChangeS2ServerVxnet(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.ChangeS2ServerVxnetInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.ChangeS2ServerVxnet(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_CreateS2SharedTarget = []cli.Flag{ /* fields */ }

func _cmd_S2Service_CreateS2SharedTarget(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.CreateS2SharedTargetInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.CreateS2SharedTarget(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_DescribeS2SharedTargets = []cli.Flag{ /* fields */ }

func _cmd_S2Service_DescribeS2SharedTargets(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.DescribeS2SharedTargetsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DescribeS2SharedTargets(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_DeleteS2SharedTargets = []cli.Flag{ /* fields */ }

func _cmd_S2Service_DeleteS2SharedTargets(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.DeleteS2SharedTargetsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DeleteS2SharedTargets(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_EnableS2SharedTargets = []cli.Flag{ /* fields */ }

func _cmd_S2Service_EnableS2SharedTargets(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.EnableS2SharedTargetsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.EnableS2SharedTargets(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_DisableS2SharedTargets = []cli.Flag{ /* fields */ }

func _cmd_S2Service_DisableS2SharedTargets(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.DisableS2SharedTargetsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DisableS2SharedTargets(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_ModifyS2SharedTargetAttributes = []cli.Flag{ /* fields */ }

func _cmd_S2Service_ModifyS2SharedTargetAttributes(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.ModifyS2SharedTargetAttributesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.ModifyS2SharedTargetAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_AttachToS2SharedTarget = []cli.Flag{ /* fields */ }

func _cmd_S2Service_AttachToS2SharedTarget(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.AttachToS2SharedTargetInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.AttachToS2SharedTarget(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_DetachFromS2SharedTarget = []cli.Flag{ /* fields */ }

func _cmd_S2Service_DetachFromS2SharedTarget(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.DetachFromS2SharedTargetInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DetachFromS2SharedTarget(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_DescribeS2DefaultParameters = []cli.Flag{ /* fields */ }

func _cmd_S2Service_DescribeS2DefaultParameters(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.DescribeS2DefaultParametersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DescribeS2DefaultParameters(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_CreateS2Group = []cli.Flag{ /* fields */ }

func _cmd_S2Service_CreateS2Group(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.CreateS2GroupInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.CreateS2Group(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_DescribeS2Groups = []cli.Flag{ /* fields */ }

func _cmd_S2Service_DescribeS2Groups(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.DescribeS2GroupsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DescribeS2Groups(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_ModifyS2Group = []cli.Flag{ /* fields */ }

func _cmd_S2Service_ModifyS2Group(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.ModifyS2GroupInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.ModifyS2Group(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_DeleteS2Groups = []cli.Flag{ /* fields */ }

func _cmd_S2Service_DeleteS2Groups(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.DeleteS2GroupsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DeleteS2Groups(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_CreateS2Account = []cli.Flag{ /* fields */ }

func _cmd_S2Service_CreateS2Account(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.CreateS2AccountInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.CreateS2Account(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_DescribeS2Accounts = []cli.Flag{ /* fields */ }

func _cmd_S2Service_DescribeS2Accounts(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.DescribeS2AccountsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DescribeS2Accounts(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_ModifyS2Account = []cli.Flag{ /* fields */ }

func _cmd_S2Service_ModifyS2Account(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.ModifyS2AccountInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.ModifyS2Account(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_DeleteS2Accounts = []cli.Flag{ /* fields */ }

func _cmd_S2Service_DeleteS2Accounts(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.DeleteS2AccountsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DeleteS2Accounts(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_AssociateS2AccountGroup = []cli.Flag{ /* fields */ }

func _cmd_S2Service_AssociateS2AccountGroup(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.AssociateS2AccountGroupInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.AssociateS2AccountGroup(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_S2Service_DissociateS2AccountGroup = []cli.Flag{ /* fields */ }

func _cmd_S2Service_DissociateS2AccountGroup(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.DissociateS2AccountGroupInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DissociateS2AccountGroup(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}
