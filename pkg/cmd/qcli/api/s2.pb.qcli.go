// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/golang
// source: s2.proto

package qcli_pb

import (
	"fmt"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/urfave/cli"

	pb "github.com/chai2010/qingcloud-go/pkg/api"
	"github.com/chai2010/qingcloud-go/pkg/config"
	"github.com/chai2010/qingcloud-go/pkg/logger"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf

	_ = cli.Command{}
	_ = jsonpb.Unmarshal
	_ = proto.Marshal

	_ = config.Config{}
	_ = logger.Info
	_ = pb.AlarmService{}
)

func init() {
	AllCommands = append(AllCommands, CmdS2Service)
}

var CmdS2Service = cli.Command{
	Name:    "s2",
	Aliases: []string{},
	Usage:   "manage S2Service",
	Subcommands: []cli.Command{
		{
			Name:    "CreateS2Server",
			Aliases: []string{},
			Usage:   "CreateS2Server",
			Action:  cmdCreateS2Server,
		},
		{
			Name:    "DescribeS2Servers",
			Aliases: []string{},
			Usage:   "DescribeS2Servers",
			Action:  cmdDescribeS2Servers,
		},
		{
			Name:    "ModifyS2Server",
			Aliases: []string{},
			Usage:   "ModifyS2Server",
			Action:  cmdModifyS2Server,
		},
		{
			Name:    "ResizeS2Servers",
			Aliases: []string{},
			Usage:   "ResizeS2Servers",
			Action:  cmdResizeS2Servers,
		},
		{
			Name:    "DeleteS2Servers",
			Aliases: []string{},
			Usage:   "DeleteS2Servers",
			Action:  cmdDeleteS2Servers,
		},
		{
			Name:    "PowerOnS2Servers",
			Aliases: []string{},
			Usage:   "PowerOnS2Servers",
			Action:  cmdPowerOnS2Servers,
		},
		{
			Name:    "PowerOffS2Servers",
			Aliases: []string{},
			Usage:   "PowerOffS2Servers",
			Action:  cmdPowerOffS2Servers,
		},
		{
			Name:    "UpdateS2Servers",
			Aliases: []string{},
			Usage:   "UpdateS2Servers",
			Action:  cmdUpdateS2Servers,
		},
		{
			Name:    "ChangeS2ServerVxnet",
			Aliases: []string{},
			Usage:   "ChangeS2ServerVxnet",
			Action:  cmdChangeS2ServerVxnet,
		},
		{
			Name:    "CreateS2SharedTarget",
			Aliases: []string{},
			Usage:   "CreateS2SharedTarget",
			Action:  cmdCreateS2SharedTarget,
		},
		{
			Name:    "DescribeS2SharedTargets",
			Aliases: []string{},
			Usage:   "DescribeS2SharedTargets",
			Action:  cmdDescribeS2SharedTargets,
		},
		{
			Name:    "DeleteS2SharedTargets",
			Aliases: []string{},
			Usage:   "DeleteS2SharedTargets",
			Action:  cmdDeleteS2SharedTargets,
		},
		{
			Name:    "EnableS2SharedTargets",
			Aliases: []string{},
			Usage:   "EnableS2SharedTargets",
			Action:  cmdEnableS2SharedTargets,
		},
		{
			Name:    "DisableS2SharedTargets",
			Aliases: []string{},
			Usage:   "DisableS2SharedTargets",
			Action:  cmdDisableS2SharedTargets,
		},
		{
			Name:    "ModifyS2SharedTargetAttributes",
			Aliases: []string{},
			Usage:   "ModifyS2SharedTargetAttributes",
			Action:  cmdModifyS2SharedTargetAttributes,
		},
		{
			Name:    "AttachToS2SharedTarget",
			Aliases: []string{},
			Usage:   "AttachToS2SharedTarget",
			Action:  cmdAttachToS2SharedTarget,
		},
		{
			Name:    "DetachFromS2SharedTarget",
			Aliases: []string{},
			Usage:   "DetachFromS2SharedTarget",
			Action:  cmdDetachFromS2SharedTarget,
		},
		{
			Name:    "DescribeS2DefaultParameters",
			Aliases: []string{},
			Usage:   "DescribeS2DefaultParameters",
			Action:  cmdDescribeS2DefaultParameters,
		},
		{
			Name:    "CreateS2Group",
			Aliases: []string{},
			Usage:   "CreateS2Group",
			Action:  cmdCreateS2Group,
		},
		{
			Name:    "DescribeS2Groups",
			Aliases: []string{},
			Usage:   "DescribeS2Groups",
			Action:  cmdDescribeS2Groups,
		},
		{
			Name:    "ModifyS2Group",
			Aliases: []string{},
			Usage:   "ModifyS2Group",
			Action:  cmdModifyS2Group,
		},
		{
			Name:    "DeleteS2Groups",
			Aliases: []string{},
			Usage:   "DeleteS2Groups",
			Action:  cmdDeleteS2Groups,
		},
		{
			Name:    "CreateS2Account",
			Aliases: []string{},
			Usage:   "CreateS2Account",
			Action:  cmdCreateS2Account,
		},
		{
			Name:    "DescribeS2Accounts",
			Aliases: []string{},
			Usage:   "DescribeS2Accounts",
			Action:  cmdDescribeS2Accounts,
		},
		{
			Name:    "ModifyS2Account",
			Aliases: []string{},
			Usage:   "ModifyS2Account",
			Action:  cmdModifyS2Account,
		},
		{
			Name:    "DeleteS2Accounts",
			Aliases: []string{},
			Usage:   "DeleteS2Accounts",
			Action:  cmdDeleteS2Accounts,
		},
		{
			Name:    "AssociateS2AccountGroup",
			Aliases: []string{},
			Usage:   "AssociateS2AccountGroup",
			Action:  cmdAssociateS2AccountGroup,
		},
		{
			Name:    "DissociateS2AccountGroup",
			Aliases: []string{},
			Usage:   "DissociateS2AccountGroup",
			Action:  cmdDissociateS2AccountGroup,
		},
	},
}

func cmdCreateS2Server(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.CreateS2ServerInput)

	// TODO: fill field from flags

	out, err := qc.CreateS2Server(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeS2Servers(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.DescribeS2ServersInput)

	// TODO: fill field from flags

	out, err := qc.DescribeS2Servers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyS2Server(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.ModifyS2ServerInput)

	// TODO: fill field from flags

	out, err := qc.ModifyS2Server(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdResizeS2Servers(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.ResizeS2ServersInput)

	// TODO: fill field from flags

	out, err := qc.ResizeS2Servers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteS2Servers(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.DeleteS2ServersInput)

	// TODO: fill field from flags

	out, err := qc.DeleteS2Servers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdPowerOnS2Servers(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.PowerOnS2ServersInput)

	// TODO: fill field from flags

	out, err := qc.PowerOnS2Servers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdPowerOffS2Servers(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.PowerOffS2ServersInput)

	// TODO: fill field from flags

	out, err := qc.PowerOffS2Servers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdUpdateS2Servers(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.UpdateS2ServersInput)

	// TODO: fill field from flags

	out, err := qc.UpdateS2Servers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdChangeS2ServerVxnet(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.ChangeS2ServerVxnetInput)

	// TODO: fill field from flags

	out, err := qc.ChangeS2ServerVxnet(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCreateS2SharedTarget(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.CreateS2SharedTargetInput)

	// TODO: fill field from flags

	out, err := qc.CreateS2SharedTarget(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeS2SharedTargets(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.DescribeS2SharedTargetsInput)

	// TODO: fill field from flags

	out, err := qc.DescribeS2SharedTargets(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteS2SharedTargets(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.DeleteS2SharedTargetsInput)

	// TODO: fill field from flags

	out, err := qc.DeleteS2SharedTargets(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdEnableS2SharedTargets(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.EnableS2SharedTargetsInput)

	// TODO: fill field from flags

	out, err := qc.EnableS2SharedTargets(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDisableS2SharedTargets(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.DisableS2SharedTargetsInput)

	// TODO: fill field from flags

	out, err := qc.DisableS2SharedTargets(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyS2SharedTargetAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.ModifyS2SharedTargetAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyS2SharedTargetAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdAttachToS2SharedTarget(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.AttachToS2SharedTargetInput)

	// TODO: fill field from flags

	out, err := qc.AttachToS2SharedTarget(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDetachFromS2SharedTarget(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.DetachFromS2SharedTargetInput)

	// TODO: fill field from flags

	out, err := qc.DetachFromS2SharedTarget(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeS2DefaultParameters(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.DescribeS2DefaultParametersInput)

	// TODO: fill field from flags

	out, err := qc.DescribeS2DefaultParameters(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCreateS2Group(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.CreateS2GroupInput)

	// TODO: fill field from flags

	out, err := qc.CreateS2Group(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeS2Groups(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.DescribeS2GroupsInput)

	// TODO: fill field from flags

	out, err := qc.DescribeS2Groups(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyS2Group(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.ModifyS2GroupInput)

	// TODO: fill field from flags

	out, err := qc.ModifyS2Group(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteS2Groups(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.DeleteS2GroupsInput)

	// TODO: fill field from flags

	out, err := qc.DeleteS2Groups(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCreateS2Account(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.CreateS2AccountInput)

	// TODO: fill field from flags

	out, err := qc.CreateS2Account(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeS2Accounts(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.DescribeS2AccountsInput)

	// TODO: fill field from flags

	out, err := qc.DescribeS2Accounts(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyS2Account(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.ModifyS2AccountInput)

	// TODO: fill field from flags

	out, err := qc.ModifyS2Account(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteS2Accounts(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.DeleteS2AccountsInput)

	// TODO: fill field from flags

	out, err := qc.DeleteS2Accounts(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdAssociateS2AccountGroup(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.AssociateS2AccountGroupInput)

	// TODO: fill field from flags

	out, err := qc.AssociateS2AccountGroup(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDissociateS2AccountGroup(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewS2Service(conf, zone)

	in := new(pb.DissociateS2AccountGroupInput)

	// TODO: fill field from flags

	out, err := qc.DissociateS2AccountGroup(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}
