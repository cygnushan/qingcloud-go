// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/golang
// source: tag.proto

package qcli_pb

import (
	"fmt"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/urfave/cli"

	pb "github.com/chai2010/qingcloud-go/pkg/api"
	"github.com/chai2010/qingcloud-go/pkg/config"
	"github.com/chai2010/qingcloud-go/pkg/logger"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf

	_ = cli.Command{}
	_ = jsonpb.Unmarshal
	_ = proto.Marshal

	_ = config.Config{}
	_ = logger.Info
	_ = pb.AlarmService{}
)

func init() {
	AllCommands = append(AllCommands, CmdTagService)
}

var CmdTagService = cli.Command{
	Name:    "tag",
	Aliases: []string{},
	Usage:   "manage TagService",
	Subcommands: []cli.Command{
		{
			Name:    "DescribeTags",
			Aliases: []string{},
			Usage:   "DescribeTags",
			Action:  cmdDescribeTags,
		},
		{
			Name:    "CreateTag",
			Aliases: []string{},
			Usage:   "CreateTag",
			Action:  cmdCreateTag,
		},
		{
			Name:    "DeleteTags",
			Aliases: []string{},
			Usage:   "DeleteTags",
			Action:  cmdDeleteTags,
		},
		{
			Name:    "ModifyTagAttributes",
			Aliases: []string{},
			Usage:   "ModifyTagAttributes",
			Action:  cmdModifyTagAttributes,
		},
		{
			Name:    "AttachTags",
			Aliases: []string{},
			Usage:   "AttachTags",
			Action:  cmdAttachTags,
		},
		{
			Name:    "DetachTags",
			Aliases: []string{},
			Usage:   "DetachTags",
			Action:  cmdDetachTags,
		},
	},
}

func cmdDescribeTags(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewTagService(conf, zone)

	in := new(pb.DescribeTagsInput)

	// TODO: fill field from flags

	out, err := qc.DescribeTags(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCreateTag(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewTagService(conf, zone)

	in := new(pb.CreateTagInput)

	// TODO: fill field from flags

	out, err := qc.CreateTag(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteTags(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewTagService(conf, zone)

	in := new(pb.DeleteTagsInput)

	// TODO: fill field from flags

	out, err := qc.DeleteTags(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyTagAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewTagService(conf, zone)

	in := new(pb.ModifyTagAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyTagAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdAttachTags(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewTagService(conf, zone)

	in := new(pb.AttachTagsInput)

	// TODO: fill field from flags

	out, err := qc.AttachTags(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDetachTags(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewTagService(conf, zone)

	in := new(pb.DetachTagsInput)

	// TODO: fill field from flags

	out, err := qc.DetachTags(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}
