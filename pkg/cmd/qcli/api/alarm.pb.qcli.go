// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/golang
// source: alarm.proto

package qcli_pb

import (
	"fmt"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/urfave/cli"

	pb "github.com/chai2010/qingcloud-go/pkg/api"
	"github.com/chai2010/qingcloud-go/pkg/config"
	"github.com/chai2010/qingcloud-go/pkg/logger"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf

	_ = cli.Command{}
	_ = jsonpb.Unmarshal
	_ = proto.Marshal

	_ = config.Config{}
	_ = logger.Info
	_ = pb.AlarmService{}
)

func init() {
	AllCommands = append(AllCommands, CmdAlarmService)
}

var CmdAlarmService = cli.Command{
	Name:    "alarm",
	Aliases: []string{},
	Usage:   "manage AlarmService",
	Subcommands: []cli.Command{
		{
			Name:    "DescribeAlarmPolicies",
			Aliases: []string{},
			Usage:   "DescribeAlarmPolicies",
			Flags:   _flag_AlarmService_DescribeAlarmPolicies,
			Action:  _cmd_AlarmService_DescribeAlarmPolicies,
		},
		{
			Name:    "CreateAlarmPolicy",
			Aliases: []string{},
			Usage:   "CreateAlarmPolicy",
			Flags:   _flag_AlarmService_CreateAlarmPolicy,
			Action:  _cmd_AlarmService_CreateAlarmPolicy,
		},
		{
			Name:    "ModifyAlarmPolicyAttributes",
			Aliases: []string{},
			Usage:   "ModifyAlarmPolicyAttributes",
			Flags:   _flag_AlarmService_ModifyAlarmPolicyAttributes,
			Action:  _cmd_AlarmService_ModifyAlarmPolicyAttributes,
		},
		{
			Name:    "DeleteAlarmPolicies",
			Aliases: []string{},
			Usage:   "DeleteAlarmPolicies",
			Flags:   _flag_AlarmService_DeleteAlarmPolicies,
			Action:  _cmd_AlarmService_DeleteAlarmPolicies,
		},
		{
			Name:    "DescribeAlarmPolicyRules",
			Aliases: []string{},
			Usage:   "DescribeAlarmPolicyRules",
			Flags:   _flag_AlarmService_DescribeAlarmPolicyRules,
			Action:  _cmd_AlarmService_DescribeAlarmPolicyRules,
		},
		{
			Name:    "AddAlarmPolicyRules",
			Aliases: []string{},
			Usage:   "AddAlarmPolicyRules",
			Flags:   _flag_AlarmService_AddAlarmPolicyRules,
			Action:  _cmd_AlarmService_AddAlarmPolicyRules,
		},
		{
			Name:    "ModifyAlarmPolicyRuleAttributes",
			Aliases: []string{},
			Usage:   "ModifyAlarmPolicyRuleAttributes",
			Flags:   _flag_AlarmService_ModifyAlarmPolicyRuleAttributes,
			Action:  _cmd_AlarmService_ModifyAlarmPolicyRuleAttributes,
		},
		{
			Name:    "DeleteAlarmPolicyRules",
			Aliases: []string{},
			Usage:   "DeleteAlarmPolicyRules",
			Flags:   _flag_AlarmService_DeleteAlarmPolicyRules,
			Action:  _cmd_AlarmService_DeleteAlarmPolicyRules,
		},
		{
			Name:    "DescribeAlarmPolicyActions",
			Aliases: []string{},
			Usage:   "DescribeAlarmPolicyActions",
			Flags:   _flag_AlarmService_DescribeAlarmPolicyActions,
			Action:  _cmd_AlarmService_DescribeAlarmPolicyActions,
		},
		{
			Name:    "AddAlarmPolicyActions",
			Aliases: []string{},
			Usage:   "AddAlarmPolicyActions",
			Flags:   _flag_AlarmService_AddAlarmPolicyActions,
			Action:  _cmd_AlarmService_AddAlarmPolicyActions,
		},
		{
			Name:    "ModifyAlarmPolicyActionAttributes",
			Aliases: []string{},
			Usage:   "ModifyAlarmPolicyActionAttributes",
			Flags:   _flag_AlarmService_ModifyAlarmPolicyActionAttributes,
			Action:  _cmd_AlarmService_ModifyAlarmPolicyActionAttributes,
		},
		{
			Name:    "DeleteAlarmPolicyActions",
			Aliases: []string{},
			Usage:   "DeleteAlarmPolicyActions",
			Flags:   _flag_AlarmService_DeleteAlarmPolicyActions,
			Action:  _cmd_AlarmService_DeleteAlarmPolicyActions,
		},
		{
			Name:    "AssociateAlarmPolicy",
			Aliases: []string{},
			Usage:   "AssociateAlarmPolicy",
			Flags:   _flag_AlarmService_AssociateAlarmPolicy,
			Action:  _cmd_AlarmService_AssociateAlarmPolicy,
		},
		{
			Name:    "DissociateAlarmPolicy",
			Aliases: []string{},
			Usage:   "DissociateAlarmPolicy",
			Flags:   _flag_AlarmService_DissociateAlarmPolicy,
			Action:  _cmd_AlarmService_DissociateAlarmPolicy,
		},
		{
			Name:    "ApplyAlarmPolicy",
			Aliases: []string{},
			Usage:   "ApplyAlarmPolicy",
			Flags:   _flag_AlarmService_ApplyAlarmPolicy,
			Action:  _cmd_AlarmService_ApplyAlarmPolicy,
		},
		{
			Name:    "DescribeAlarms",
			Aliases: []string{},
			Usage:   "DescribeAlarms",
			Flags:   _flag_AlarmService_DescribeAlarms,
			Action:  _cmd_AlarmService_DescribeAlarms,
		},
		{
			Name:    "DescribeAlarmHistory",
			Aliases: []string{},
			Usage:   "DescribeAlarmHistory",
			Flags:   _flag_AlarmService_DescribeAlarmHistory,
			Action:  _cmd_AlarmService_DescribeAlarmHistory,
		},
	},
}

var _flag_AlarmService_DescribeAlarmPolicies = []cli.Flag{ /* fields */ }

func _cmd_AlarmService_DescribeAlarmPolicies(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.DescribeAlarmPoliciesInput)

	// TODO: fill field from flags

	out, err := qc.DescribeAlarmPolicies(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_AlarmService_CreateAlarmPolicy = []cli.Flag{ /* fields */ }

func _cmd_AlarmService_CreateAlarmPolicy(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.CreateAlarmPolicyInput)

	// TODO: fill field from flags

	out, err := qc.CreateAlarmPolicy(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_AlarmService_ModifyAlarmPolicyAttributes = []cli.Flag{ /* fields */ }

func _cmd_AlarmService_ModifyAlarmPolicyAttributes(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.ModifyAlarmPolicyAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyAlarmPolicyAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_AlarmService_DeleteAlarmPolicies = []cli.Flag{ /* fields */ }

func _cmd_AlarmService_DeleteAlarmPolicies(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.DeleteAlarmPoliciesInput)

	// TODO: fill field from flags

	out, err := qc.DeleteAlarmPolicies(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_AlarmService_DescribeAlarmPolicyRules = []cli.Flag{ /* fields */ }

func _cmd_AlarmService_DescribeAlarmPolicyRules(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.DescribeAlarmPolicyRulesInput)

	// TODO: fill field from flags

	out, err := qc.DescribeAlarmPolicyRules(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_AlarmService_AddAlarmPolicyRules = []cli.Flag{ /* fields */ }

func _cmd_AlarmService_AddAlarmPolicyRules(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.AddAlarmPolicyRulesInput)

	// TODO: fill field from flags

	out, err := qc.AddAlarmPolicyRules(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_AlarmService_ModifyAlarmPolicyRuleAttributes = []cli.Flag{ /* fields */ }

func _cmd_AlarmService_ModifyAlarmPolicyRuleAttributes(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.ModifyAlarmPolicyRuleAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyAlarmPolicyRuleAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_AlarmService_DeleteAlarmPolicyRules = []cli.Flag{ /* fields */ }

func _cmd_AlarmService_DeleteAlarmPolicyRules(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.DeleteAlarmPolicyRulesInput)

	// TODO: fill field from flags

	out, err := qc.DeleteAlarmPolicyRules(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_AlarmService_DescribeAlarmPolicyActions = []cli.Flag{ /* fields */ }

func _cmd_AlarmService_DescribeAlarmPolicyActions(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.DescribeAlarmPolicyActionsInput)

	// TODO: fill field from flags

	out, err := qc.DescribeAlarmPolicyActions(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_AlarmService_AddAlarmPolicyActions = []cli.Flag{ /* fields */ }

func _cmd_AlarmService_AddAlarmPolicyActions(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.AddAlarmPolicyActionsInput)

	// TODO: fill field from flags

	out, err := qc.AddAlarmPolicyActions(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_AlarmService_ModifyAlarmPolicyActionAttributes = []cli.Flag{ /* fields */ }

func _cmd_AlarmService_ModifyAlarmPolicyActionAttributes(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.ModifyAlarmPolicyActionAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyAlarmPolicyActionAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_AlarmService_DeleteAlarmPolicyActions = []cli.Flag{ /* fields */ }

func _cmd_AlarmService_DeleteAlarmPolicyActions(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.DeleteAlarmPolicyActionsInput)

	// TODO: fill field from flags

	out, err := qc.DeleteAlarmPolicyActions(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_AlarmService_AssociateAlarmPolicy = []cli.Flag{ /* fields */ }

func _cmd_AlarmService_AssociateAlarmPolicy(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.AssociateAlarmPolicyInput)

	// TODO: fill field from flags

	out, err := qc.AssociateAlarmPolicy(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_AlarmService_DissociateAlarmPolicy = []cli.Flag{ /* fields */ }

func _cmd_AlarmService_DissociateAlarmPolicy(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.DissociateAlarmPolicyInput)

	// TODO: fill field from flags

	out, err := qc.DissociateAlarmPolicy(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_AlarmService_ApplyAlarmPolicy = []cli.Flag{ /* fields */ }

func _cmd_AlarmService_ApplyAlarmPolicy(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.ApplyAlarmPolicyInput)

	// TODO: fill field from flags

	out, err := qc.ApplyAlarmPolicy(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_AlarmService_DescribeAlarms = []cli.Flag{ /* fields */ }

func _cmd_AlarmService_DescribeAlarms(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.DescribeAlarmsInput)

	// TODO: fill field from flags

	out, err := qc.DescribeAlarms(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_AlarmService_DescribeAlarmHistory = []cli.Flag{ /* fields */ }

func _cmd_AlarmService_DescribeAlarmHistory(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.DescribeAlarmHistoryInput)

	// TODO: fill field from flags

	out, err := qc.DescribeAlarmHistory(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}
