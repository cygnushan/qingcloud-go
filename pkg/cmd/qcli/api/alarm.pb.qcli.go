// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/golang
// source: alarm.proto

package qcli_pb

import (
	"fmt"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/urfave/cli"

	pb "github.com/chai2010/qingcloud-go/pkg/api"
	"github.com/chai2010/qingcloud-go/pkg/config"
	"github.com/chai2010/qingcloud-go/pkg/logger"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf

	_ = cli.Command{}
	_ = jsonpb.Unmarshal
	_ = proto.Marshal

	_ = config.Config{}
	_ = logger.Info
	_ = pb.AlarmService{}
)

func init() {
	AllCommands = append(AllCommands, CmdAlarmService)
}

var CmdAlarmService = cli.Command{
	Name:    "alarm",
	Aliases: []string{},
	Usage:   "manage AlarmService",
	Subcommands: []cli.Command{
		{
			Name:    "DescribeAlarmPolicies",
			Aliases: []string{},
			Usage:   "DescribeAlarmPolicies",
			Action:  cmdDescribeAlarmPolicies,
		},
		{
			Name:    "CreateAlarmPolicy",
			Aliases: []string{},
			Usage:   "CreateAlarmPolicy",
			Action:  cmdCreateAlarmPolicy,
		},
		{
			Name:    "ModifyAlarmPolicyAttributes",
			Aliases: []string{},
			Usage:   "ModifyAlarmPolicyAttributes",
			Action:  cmdModifyAlarmPolicyAttributes,
		},
		{
			Name:    "DeleteAlarmPolicies",
			Aliases: []string{},
			Usage:   "DeleteAlarmPolicies",
			Action:  cmdDeleteAlarmPolicies,
		},
		{
			Name:    "DescribeAlarmPolicyRules",
			Aliases: []string{},
			Usage:   "DescribeAlarmPolicyRules",
			Action:  cmdDescribeAlarmPolicyRules,
		},
		{
			Name:    "AddAlarmPolicyRules",
			Aliases: []string{},
			Usage:   "AddAlarmPolicyRules",
			Action:  cmdAddAlarmPolicyRules,
		},
		{
			Name:    "ModifyAlarmPolicyRuleAttributes",
			Aliases: []string{},
			Usage:   "ModifyAlarmPolicyRuleAttributes",
			Action:  cmdModifyAlarmPolicyRuleAttributes,
		},
		{
			Name:    "DeleteAlarmPolicyRules",
			Aliases: []string{},
			Usage:   "DeleteAlarmPolicyRules",
			Action:  cmdDeleteAlarmPolicyRules,
		},
		{
			Name:    "DescribeAlarmPolicyActions",
			Aliases: []string{},
			Usage:   "DescribeAlarmPolicyActions",
			Action:  cmdDescribeAlarmPolicyActions,
		},
		{
			Name:    "AddAlarmPolicyActions",
			Aliases: []string{},
			Usage:   "AddAlarmPolicyActions",
			Action:  cmdAddAlarmPolicyActions,
		},
		{
			Name:    "ModifyAlarmPolicyActionAttributes",
			Aliases: []string{},
			Usage:   "ModifyAlarmPolicyActionAttributes",
			Action:  cmdModifyAlarmPolicyActionAttributes,
		},
		{
			Name:    "DeleteAlarmPolicyActions",
			Aliases: []string{},
			Usage:   "DeleteAlarmPolicyActions",
			Action:  cmdDeleteAlarmPolicyActions,
		},
		{
			Name:    "AssociateAlarmPolicy",
			Aliases: []string{},
			Usage:   "AssociateAlarmPolicy",
			Action:  cmdAssociateAlarmPolicy,
		},
		{
			Name:    "DissociateAlarmPolicy",
			Aliases: []string{},
			Usage:   "DissociateAlarmPolicy",
			Action:  cmdDissociateAlarmPolicy,
		},
		{
			Name:    "ApplyAlarmPolicy",
			Aliases: []string{},
			Usage:   "ApplyAlarmPolicy",
			Action:  cmdApplyAlarmPolicy,
		},
		{
			Name:    "DescribeAlarms",
			Aliases: []string{},
			Usage:   "DescribeAlarms",
			Action:  cmdDescribeAlarms,
		},
		{
			Name:    "DescribeAlarmHistory",
			Aliases: []string{},
			Usage:   "DescribeAlarmHistory",
			Action:  cmdDescribeAlarmHistory,
		},
	},
}

func cmdDescribeAlarmPolicies(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.DescribeAlarmPoliciesInput)

	// TODO: fill field from flags

	out, err := qc.DescribeAlarmPolicies(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCreateAlarmPolicy(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.CreateAlarmPolicyInput)

	// TODO: fill field from flags

	out, err := qc.CreateAlarmPolicy(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyAlarmPolicyAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.ModifyAlarmPolicyAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyAlarmPolicyAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteAlarmPolicies(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.DeleteAlarmPoliciesInput)

	// TODO: fill field from flags

	out, err := qc.DeleteAlarmPolicies(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeAlarmPolicyRules(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.DescribeAlarmPolicyRulesInput)

	// TODO: fill field from flags

	out, err := qc.DescribeAlarmPolicyRules(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdAddAlarmPolicyRules(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.AddAlarmPolicyRulesInput)

	// TODO: fill field from flags

	out, err := qc.AddAlarmPolicyRules(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyAlarmPolicyRuleAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.ModifyAlarmPolicyRuleAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyAlarmPolicyRuleAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteAlarmPolicyRules(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.DeleteAlarmPolicyRulesInput)

	// TODO: fill field from flags

	out, err := qc.DeleteAlarmPolicyRules(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeAlarmPolicyActions(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.DescribeAlarmPolicyActionsInput)

	// TODO: fill field from flags

	out, err := qc.DescribeAlarmPolicyActions(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdAddAlarmPolicyActions(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.AddAlarmPolicyActionsInput)

	// TODO: fill field from flags

	out, err := qc.AddAlarmPolicyActions(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyAlarmPolicyActionAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.ModifyAlarmPolicyActionAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyAlarmPolicyActionAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteAlarmPolicyActions(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.DeleteAlarmPolicyActionsInput)

	// TODO: fill field from flags

	out, err := qc.DeleteAlarmPolicyActions(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdAssociateAlarmPolicy(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.AssociateAlarmPolicyInput)

	// TODO: fill field from flags

	out, err := qc.AssociateAlarmPolicy(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDissociateAlarmPolicy(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.DissociateAlarmPolicyInput)

	// TODO: fill field from flags

	out, err := qc.DissociateAlarmPolicy(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdApplyAlarmPolicy(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.ApplyAlarmPolicyInput)

	// TODO: fill field from flags

	out, err := qc.ApplyAlarmPolicy(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeAlarms(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.DescribeAlarmsInput)

	// TODO: fill field from flags

	out, err := qc.DescribeAlarms(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeAlarmHistory(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewAlarmService(conf, zone)

	in := new(pb.DescribeAlarmHistoryInput)

	// TODO: fill field from flags

	out, err := qc.DescribeAlarmHistory(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}
