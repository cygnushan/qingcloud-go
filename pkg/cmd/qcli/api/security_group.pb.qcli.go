// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/golang
// source: security_group.proto

package qcli_pb

import (
	"fmt"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/urfave/cli"

	pb "github.com/chai2010/qingcloud-go/pkg/api"
	"github.com/chai2010/qingcloud-go/pkg/config"
	"github.com/chai2010/qingcloud-go/pkg/logger"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf

	_ = cli.Command{}
	_ = jsonpb.Unmarshal
	_ = proto.Marshal

	_ = config.Config{}
	_ = logger.Info
	_ = pb.AlarmService{}
)

func init() {
	AllCommands = append(AllCommands, CmdSecurityGroupService)
}

var CmdSecurityGroupService = cli.Command{
	Name:    "securitygroup",
	Aliases: []string{},
	Usage:   "manage SecurityGroupService",
	Subcommands: []cli.Command{
		{
			Name:    "DescribeSecurityGroups",
			Aliases: []string{},
			Usage:   "DescribeSecurityGroups",
			Action:  cmdDescribeSecurityGroups,
		},
		{
			Name:    "CreateSecurityGroup",
			Aliases: []string{},
			Usage:   "CreateSecurityGroup",
			Action:  cmdCreateSecurityGroup,
		},
		{
			Name:    "DeleteSecurityGroups",
			Aliases: []string{},
			Usage:   "DeleteSecurityGroups",
			Action:  cmdDeleteSecurityGroups,
		},
		{
			Name:    "ApplySecurityGroup",
			Aliases: []string{},
			Usage:   "ApplySecurityGroup",
			Action:  cmdApplySecurityGroup,
		},
		{
			Name:    "ModifySecurityGroupAttributes",
			Aliases: []string{},
			Usage:   "ModifySecurityGroupAttributes",
			Action:  cmdModifySecurityGroupAttributes,
		},
		{
			Name:    "DescribeSecurityGroupRules",
			Aliases: []string{},
			Usage:   "DescribeSecurityGroupRules",
			Action:  cmdDescribeSecurityGroupRules,
		},
		{
			Name:    "AddSecurityGroupRules",
			Aliases: []string{},
			Usage:   "AddSecurityGroupRules",
			Action:  cmdAddSecurityGroupRules,
		},
		{
			Name:    "DeleteSecurityGroupRules",
			Aliases: []string{},
			Usage:   "DeleteSecurityGroupRules",
			Action:  cmdDeleteSecurityGroupRules,
		},
		{
			Name:    "ModifySecurityGroupRuleAttributes",
			Aliases: []string{},
			Usage:   "ModifySecurityGroupRuleAttributes",
			Action:  cmdModifySecurityGroupRuleAttributes,
		},
		{
			Name:    "CreateSecurityGroupSnapshot",
			Aliases: []string{},
			Usage:   "CreateSecurityGroupSnapshot",
			Action:  cmdCreateSecurityGroupSnapshot,
		},
		{
			Name:    "DescribeSecurityGroupSnapshots",
			Aliases: []string{},
			Usage:   "DescribeSecurityGroupSnapshots",
			Action:  cmdDescribeSecurityGroupSnapshots,
		},
		{
			Name:    "DeleteSecurityGroupSnapshots",
			Aliases: []string{},
			Usage:   "DeleteSecurityGroupSnapshots",
			Action:  cmdDeleteSecurityGroupSnapshots,
		},
		{
			Name:    "RollbackSecurityGroup",
			Aliases: []string{},
			Usage:   "RollbackSecurityGroup",
			Action:  cmdRollbackSecurityGroup,
		},
		{
			Name:    "DescribeSecurityGroupIPSets",
			Aliases: []string{},
			Usage:   "DescribeSecurityGroupIPSets",
			Action:  cmdDescribeSecurityGroupIPSets,
		},
		{
			Name:    "CreateSecurityGroupIPSet",
			Aliases: []string{},
			Usage:   "CreateSecurityGroupIPSet",
			Action:  cmdCreateSecurityGroupIPSet,
		},
		{
			Name:    "DeleteSecurityGroupIPSets",
			Aliases: []string{},
			Usage:   "DeleteSecurityGroupIPSets",
			Action:  cmdDeleteSecurityGroupIPSets,
		},
		{
			Name:    "ModifySecurityGroupIPSetAttributes",
			Aliases: []string{},
			Usage:   "ModifySecurityGroupIPSetAttributes",
			Action:  cmdModifySecurityGroupIPSetAttributes,
		},
		{
			Name:    "CopySecurityGroupIPSets",
			Aliases: []string{},
			Usage:   "CopySecurityGroupIPSets",
			Action:  cmdCopySecurityGroupIPSets,
		},
	},
}

func cmdDescribeSecurityGroups(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSecurityGroupService(conf, zone)

	in := new(pb.DescribeSecurityGroupsInput)

	// TODO: fill field from flags

	out, err := qc.DescribeSecurityGroups(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCreateSecurityGroup(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSecurityGroupService(conf, zone)

	in := new(pb.CreateSecurityGroupInput)

	// TODO: fill field from flags

	out, err := qc.CreateSecurityGroup(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteSecurityGroups(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSecurityGroupService(conf, zone)

	in := new(pb.DeleteSecurityGroupsInput)

	// TODO: fill field from flags

	out, err := qc.DeleteSecurityGroups(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdApplySecurityGroup(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSecurityGroupService(conf, zone)

	in := new(pb.ApplySecurityGroupInput)

	// TODO: fill field from flags

	out, err := qc.ApplySecurityGroup(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifySecurityGroupAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSecurityGroupService(conf, zone)

	in := new(pb.ModifySecurityGroupAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifySecurityGroupAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeSecurityGroupRules(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSecurityGroupService(conf, zone)

	in := new(pb.DescribeSecurityGroupRulesInput)

	// TODO: fill field from flags

	out, err := qc.DescribeSecurityGroupRules(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdAddSecurityGroupRules(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSecurityGroupService(conf, zone)

	in := new(pb.AddSecurityGroupRulesInput)

	// TODO: fill field from flags

	out, err := qc.AddSecurityGroupRules(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteSecurityGroupRules(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSecurityGroupService(conf, zone)

	in := new(pb.DeleteSecurityGroupRulesInput)

	// TODO: fill field from flags

	out, err := qc.DeleteSecurityGroupRules(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifySecurityGroupRuleAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSecurityGroupService(conf, zone)

	in := new(pb.ModifySecurityGroupRuleAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifySecurityGroupRuleAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCreateSecurityGroupSnapshot(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSecurityGroupService(conf, zone)

	in := new(pb.CreateSecurityGroupSnapshotInput)

	// TODO: fill field from flags

	out, err := qc.CreateSecurityGroupSnapshot(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeSecurityGroupSnapshots(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSecurityGroupService(conf, zone)

	in := new(pb.DescribeSecurityGroupSnapshotsInput)

	// TODO: fill field from flags

	out, err := qc.DescribeSecurityGroupSnapshots(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteSecurityGroupSnapshots(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSecurityGroupService(conf, zone)

	in := new(pb.DeleteSecurityGroupSnapshotsInput)

	// TODO: fill field from flags

	out, err := qc.DeleteSecurityGroupSnapshots(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdRollbackSecurityGroup(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSecurityGroupService(conf, zone)

	in := new(pb.RollbackSecurityGroupInput)

	// TODO: fill field from flags

	out, err := qc.RollbackSecurityGroup(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeSecurityGroupIPSets(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSecurityGroupService(conf, zone)

	in := new(pb.DescribeSecurityGroupIPSetsInput)

	// TODO: fill field from flags

	out, err := qc.DescribeSecurityGroupIPSets(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCreateSecurityGroupIPSet(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSecurityGroupService(conf, zone)

	in := new(pb.CreateSecurityGroupIPSetInput)

	// TODO: fill field from flags

	out, err := qc.CreateSecurityGroupIPSet(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteSecurityGroupIPSets(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSecurityGroupService(conf, zone)

	in := new(pb.DeleteSecurityGroupIPSetsInput)

	// TODO: fill field from flags

	out, err := qc.DeleteSecurityGroupIPSets(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifySecurityGroupIPSetAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSecurityGroupService(conf, zone)

	in := new(pb.ModifySecurityGroupIPSetAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifySecurityGroupIPSetAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCopySecurityGroupIPSets(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSecurityGroupService(conf, zone)

	in := new(pb.CopySecurityGroupIPSetsInput)

	// TODO: fill field from flags

	out, err := qc.CopySecurityGroupIPSets(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}
