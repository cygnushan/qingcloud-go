// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/golang
// source: load_balancer.proto

package qcli_pb

import (
	"fmt"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/urfave/cli"

	pb "github.com/chai2010/qingcloud-go/pkg/api"
	"github.com/chai2010/qingcloud-go/pkg/config"
	"github.com/chai2010/qingcloud-go/pkg/logger"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf

	_ = cli.Command{}
	_ = jsonpb.Unmarshal
	_ = proto.Marshal

	_ = config.Config{}
	_ = logger.Info
	_ = pb.AlarmService{}
)

func init() {
	AllCommands = append(AllCommands, CmdLoadBalancerService)
}

var CmdLoadBalancerService = cli.Command{
	Name:    "loadbalancer",
	Aliases: []string{},
	Usage:   "manage LoadBalancerService",
	Subcommands: []cli.Command{
		{
			Name:    "CreateLoadBalancer",
			Aliases: []string{},
			Usage:   "CreateLoadBalancer",
			Action:  cmdCreateLoadBalancer,
		},
		{
			Name:    "DescribeLoadBalancers",
			Aliases: []string{},
			Usage:   "DescribeLoadBalancers",
			Action:  cmdDescribeLoadBalancers,
		},
		{
			Name:    "DeleteLoadBalancers",
			Aliases: []string{},
			Usage:   "DeleteLoadBalancers",
			Action:  cmdDeleteLoadBalancers,
		},
		{
			Name:    "ModifyLoadBalancerAttributes",
			Aliases: []string{},
			Usage:   "ModifyLoadBalancerAttributes",
			Action:  cmdModifyLoadBalancerAttributes,
		},
		{
			Name:    "StartLoadBalancers",
			Aliases: []string{},
			Usage:   "StartLoadBalancers",
			Action:  cmdStartLoadBalancers,
		},
		{
			Name:    "StopLoadBalancers",
			Aliases: []string{},
			Usage:   "StopLoadBalancers",
			Action:  cmdStopLoadBalancers,
		},
		{
			Name:    "UpdateLoadBalancers",
			Aliases: []string{},
			Usage:   "UpdateLoadBalancers",
			Action:  cmdUpdateLoadBalancers,
		},
		{
			Name:    "ResizeLoadBalancers",
			Aliases: []string{},
			Usage:   "ResizeLoadBalancers",
			Action:  cmdResizeLoadBalancers,
		},
		{
			Name:    "AssociateEipsToLoadBalancer",
			Aliases: []string{},
			Usage:   "AssociateEipsToLoadBalancer",
			Action:  cmdAssociateEipsToLoadBalancer,
		},
		{
			Name:    "DissociateEipsFromLoadBalancer",
			Aliases: []string{},
			Usage:   "DissociateEipsFromLoadBalancer",
			Action:  cmdDissociateEipsFromLoadBalancer,
		},
		{
			Name:    "AddLoadBalancerListeners",
			Aliases: []string{},
			Usage:   "AddLoadBalancerListeners",
			Action:  cmdAddLoadBalancerListeners,
		},
		{
			Name:    "DescribeLoadBalancerListeners",
			Aliases: []string{},
			Usage:   "DescribeLoadBalancerListeners",
			Action:  cmdDescribeLoadBalancerListeners,
		},
		{
			Name:    "DeleteLoadBalancerListeners",
			Aliases: []string{},
			Usage:   "DeleteLoadBalancerListeners",
			Action:  cmdDeleteLoadBalancerListeners,
		},
		{
			Name:    "ModifyLoadBalancerListenerAttributes",
			Aliases: []string{},
			Usage:   "ModifyLoadBalancerListenerAttributes",
			Action:  cmdModifyLoadBalancerListenerAttributes,
		},
		{
			Name:    "AddLoadBalancerBackends",
			Aliases: []string{},
			Usage:   "AddLoadBalancerBackends",
			Action:  cmdAddLoadBalancerBackends,
		},
		{
			Name:    "DescribeLoadBalancerBackends",
			Aliases: []string{},
			Usage:   "DescribeLoadBalancerBackends",
			Action:  cmdDescribeLoadBalancerBackends,
		},
		{
			Name:    "DeleteLoadBalancerBackends",
			Aliases: []string{},
			Usage:   "DeleteLoadBalancerBackends",
			Action:  cmdDeleteLoadBalancerBackends,
		},
		{
			Name:    "ModifyLoadBalancerBackendAttributes",
			Aliases: []string{},
			Usage:   "ModifyLoadBalancerBackendAttributes",
			Action:  cmdModifyLoadBalancerBackendAttributes,
		},
		{
			Name:    "CreateLoadBalancerPolicy",
			Aliases: []string{},
			Usage:   "CreateLoadBalancerPolicy",
			Action:  cmdCreateLoadBalancerPolicy,
		},
		{
			Name:    "DescribeLoadBalancerPolicies",
			Aliases: []string{},
			Usage:   "DescribeLoadBalancerPolicies",
			Action:  cmdDescribeLoadBalancerPolicies,
		},
		{
			Name:    "ModifyLoadBalancerPolicyAttributes",
			Aliases: []string{},
			Usage:   "ModifyLoadBalancerPolicyAttributes",
			Action:  cmdModifyLoadBalancerPolicyAttributes,
		},
		{
			Name:    "ApplyLoadBalancerPolicy",
			Aliases: []string{},
			Usage:   "ApplyLoadBalancerPolicy",
			Action:  cmdApplyLoadBalancerPolicy,
		},
		{
			Name:    "DeleteLoadBalancerPolicies",
			Aliases: []string{},
			Usage:   "DeleteLoadBalancerPolicies",
			Action:  cmdDeleteLoadBalancerPolicies,
		},
		{
			Name:    "AddLoadBalancerPolicyRules",
			Aliases: []string{},
			Usage:   "AddLoadBalancerPolicyRules",
			Action:  cmdAddLoadBalancerPolicyRules,
		},
		{
			Name:    "DescribeLoadBalancerPolicyRules",
			Aliases: []string{},
			Usage:   "DescribeLoadBalancerPolicyRules",
			Action:  cmdDescribeLoadBalancerPolicyRules,
		},
		{
			Name:    "ModifyLoadBalancerPolicyRuleAttributes",
			Aliases: []string{},
			Usage:   "ModifyLoadBalancerPolicyRuleAttributes",
			Action:  cmdModifyLoadBalancerPolicyRuleAttributes,
		},
		{
			Name:    "DeleteLoadBalancerPolicyRules",
			Aliases: []string{},
			Usage:   "DeleteLoadBalancerPolicyRules",
			Action:  cmdDeleteLoadBalancerPolicyRules,
		},
		{
			Name:    "CreateServerCertificate",
			Aliases: []string{},
			Usage:   "CreateServerCertificate",
			Action:  cmdCreateServerCertificate,
		},
		{
			Name:    "DescribeServerCertificates",
			Aliases: []string{},
			Usage:   "DescribeServerCertificates",
			Action:  cmdDescribeServerCertificates,
		},
		{
			Name:    "ModifyServerCertificateAttributes",
			Aliases: []string{},
			Usage:   "ModifyServerCertificateAttributes",
			Action:  cmdModifyServerCertificateAttributes,
		},
		{
			Name:    "DeleteServerCertificates",
			Aliases: []string{},
			Usage:   "DeleteServerCertificates",
			Action:  cmdDeleteServerCertificates,
		},
	},
}

func cmdCreateLoadBalancer(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.CreateLoadBalancerInput)

	// TODO: fill field from flags

	out, err := qc.CreateLoadBalancer(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeLoadBalancers(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.DescribeLoadBalancersInput)

	// TODO: fill field from flags

	out, err := qc.DescribeLoadBalancers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteLoadBalancers(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.DeleteLoadBalancersInput)

	// TODO: fill field from flags

	out, err := qc.DeleteLoadBalancers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyLoadBalancerAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.ModifyLoadBalancerAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyLoadBalancerAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdStartLoadBalancers(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.StartLoadBalancersInput)

	// TODO: fill field from flags

	out, err := qc.StartLoadBalancers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdStopLoadBalancers(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.StopLoadBalancersInput)

	// TODO: fill field from flags

	out, err := qc.StopLoadBalancers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdUpdateLoadBalancers(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.UpdateLoadBalancersInput)

	// TODO: fill field from flags

	out, err := qc.UpdateLoadBalancers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdResizeLoadBalancers(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.ResizeLoadBalancersInput)

	// TODO: fill field from flags

	out, err := qc.ResizeLoadBalancers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdAssociateEipsToLoadBalancer(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.AssociateEipsToLoadBalancerInput)

	// TODO: fill field from flags

	out, err := qc.AssociateEipsToLoadBalancer(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDissociateEipsFromLoadBalancer(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.DissociateEipsFromLoadBalancerInput)

	// TODO: fill field from flags

	out, err := qc.DissociateEipsFromLoadBalancer(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdAddLoadBalancerListeners(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.AddLoadBalancerListenersInput)

	// TODO: fill field from flags

	out, err := qc.AddLoadBalancerListeners(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeLoadBalancerListeners(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.DescribeLoadBalancerListenersInput)

	// TODO: fill field from flags

	out, err := qc.DescribeLoadBalancerListeners(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteLoadBalancerListeners(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.DeleteLoadBalancerListenersInput)

	// TODO: fill field from flags

	out, err := qc.DeleteLoadBalancerListeners(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyLoadBalancerListenerAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.ModifyLoadBalancerListenerAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyLoadBalancerListenerAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdAddLoadBalancerBackends(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.AddLoadBalancerBackendsInput)

	// TODO: fill field from flags

	out, err := qc.AddLoadBalancerBackends(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeLoadBalancerBackends(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.DescribeLoadBalancerBackendsInput)

	// TODO: fill field from flags

	out, err := qc.DescribeLoadBalancerBackends(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteLoadBalancerBackends(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.DeleteLoadBalancerBackendsInput)

	// TODO: fill field from flags

	out, err := qc.DeleteLoadBalancerBackends(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyLoadBalancerBackendAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.ModifyLoadBalancerBackendAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyLoadBalancerBackendAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCreateLoadBalancerPolicy(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.CreateLoadBalancerPolicyInput)

	// TODO: fill field from flags

	out, err := qc.CreateLoadBalancerPolicy(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeLoadBalancerPolicies(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.DescribeLoadBalancerPoliciesInput)

	// TODO: fill field from flags

	out, err := qc.DescribeLoadBalancerPolicies(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyLoadBalancerPolicyAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.ModifyLoadBalancerPolicyAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyLoadBalancerPolicyAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdApplyLoadBalancerPolicy(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.ApplyLoadBalancerPolicyInput)

	// TODO: fill field from flags

	out, err := qc.ApplyLoadBalancerPolicy(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteLoadBalancerPolicies(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.DeleteLoadBalancerPoliciesInput)

	// TODO: fill field from flags

	out, err := qc.DeleteLoadBalancerPolicies(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdAddLoadBalancerPolicyRules(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.AddLoadBalancerPolicyRulesInput)

	// TODO: fill field from flags

	out, err := qc.AddLoadBalancerPolicyRules(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeLoadBalancerPolicyRules(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.DescribeLoadBalancerPolicyRulesInput)

	// TODO: fill field from flags

	out, err := qc.DescribeLoadBalancerPolicyRules(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyLoadBalancerPolicyRuleAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.ModifyLoadBalancerPolicyRuleAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyLoadBalancerPolicyRuleAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteLoadBalancerPolicyRules(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.DeleteLoadBalancerPolicyRulesInput)

	// TODO: fill field from flags

	out, err := qc.DeleteLoadBalancerPolicyRules(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCreateServerCertificate(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.CreateServerCertificateInput)

	// TODO: fill field from flags

	out, err := qc.CreateServerCertificate(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeServerCertificates(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.DescribeServerCertificatesInput)

	// TODO: fill field from flags

	out, err := qc.DescribeServerCertificates(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyServerCertificateAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.ModifyServerCertificateAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyServerCertificateAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteServerCertificates(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewLoadBalancerService(conf, zone)

	in := new(pb.DeleteServerCertificatesInput)

	// TODO: fill field from flags

	out, err := qc.DeleteServerCertificates(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}
