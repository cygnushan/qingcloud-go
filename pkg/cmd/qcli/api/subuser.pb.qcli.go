// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/golang
// source: subuser.proto

package qcli_pb

import (
	"fmt"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/urfave/cli"

	pb "github.com/chai2010/qingcloud-go/pkg/api"
	"github.com/chai2010/qingcloud-go/pkg/config"
	"github.com/chai2010/qingcloud-go/pkg/logger"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf

	_ = cli.Command{}
	_ = jsonpb.Unmarshal
	_ = proto.Marshal

	_ = config.Config{}
	_ = logger.Info
	_ = pb.AlarmService{}
)

func init() {
	AllCommands = append(AllCommands, CmdSubuserService)
}

var CmdSubuserService = cli.Command{
	Name:    "subuser",
	Aliases: []string{},
	Usage:   "manage SubuserService",
	Subcommands: []cli.Command{
		{
			Name:    "DescribeSubUsers",
			Aliases: []string{},
			Usage:   "DescribeSubUsers",
			Action:  cmdDescribeSubUsers,
		},
		{
			Name:    "CreateSubUser",
			Aliases: []string{},
			Usage:   "CreateSubUser",
			Action:  cmdCreateSubUser,
		},
		{
			Name:    "ModifySubUserAttributes",
			Aliases: []string{},
			Usage:   "ModifySubUserAttributes",
			Action:  cmdModifySubUserAttributes,
		},
		{
			Name:    "DeleteSubUsers",
			Aliases: []string{},
			Usage:   "DeleteSubUsers",
			Action:  cmdDeleteSubUsers,
		},
		{
			Name:    "RestoreSubUsers",
			Aliases: []string{},
			Usage:   "RestoreSubUsers",
			Action:  cmdRestoreSubUsers,
		},
	},
}

func cmdDescribeSubUsers(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSubuserService(conf, zone)

	in := new(pb.DescribeSubUsersInput)

	// TODO: fill field from flags

	out, err := qc.DescribeSubUsers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCreateSubUser(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSubuserService(conf, zone)

	in := new(pb.CreateSubUserInput)

	// TODO: fill field from flags

	out, err := qc.CreateSubUser(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifySubUserAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSubuserService(conf, zone)

	in := new(pb.ModifySubUserAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifySubUserAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteSubUsers(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSubuserService(conf, zone)

	in := new(pb.DeleteSubUsersInput)

	// TODO: fill field from flags

	out, err := qc.DeleteSubUsers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdRestoreSubUsers(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewSubuserService(conf, zone)

	in := new(pb.RestoreSubUsersInput)

	// TODO: fill field from flags

	out, err := qc.RestoreSubUsers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}
