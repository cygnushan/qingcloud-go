// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/qcli
// source: cluster.proto

package qcli_pb

import (
	"fmt"
	"os"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/urfave/cli"

	pb "github.com/chai2010/qingcloud-go/pkg/api"
	"github.com/chai2010/qingcloud-go/pkg/config"
	"github.com/chai2010/qingcloud-go/pkg/logger"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = os.Stdin

	_ = cli.Command{}
	_ = jsonpb.Unmarshal
	_ = proto.Marshal

	_ = config.Config{}
	_ = logger.Info
	_ = pb.AlarmService{}
)

func init() {
	AllCommands = append(AllCommands, CmdClusterService)
}

var CmdClusterService = cli.Command{
	Name:    "cluster",
	Aliases: []string{},
	Usage:   "manage ClusterService",
	Subcommands: []cli.Command{
		{
			Name:    "CreateCluster",
			Aliases: []string{},
			Usage:   "CreateCluster",
			Flags:   _flag_ClusterService_CreateCluster,
			Action:  _cmd_ClusterService_CreateCluster,
		},
		{
			Name:    "DescribeClusters",
			Aliases: []string{},
			Usage:   "DescribeClusters",
			Flags:   _flag_ClusterService_DescribeClusters,
			Action:  _cmd_ClusterService_DescribeClusters,
		},
		{
			Name:    "DescribeClusterNodes",
			Aliases: []string{},
			Usage:   "DescribeClusterNodes",
			Flags:   _flag_ClusterService_DescribeClusterNodes,
			Action:  _cmd_ClusterService_DescribeClusterNodes,
		},
		{
			Name:    "StopClusters",
			Aliases: []string{},
			Usage:   "StopClusters",
			Flags:   _flag_ClusterService_StopClusters,
			Action:  _cmd_ClusterService_StopClusters,
		},
		{
			Name:    "StartClusters",
			Aliases: []string{},
			Usage:   "StartClusters",
			Flags:   _flag_ClusterService_StartClusters,
			Action:  _cmd_ClusterService_StartClusters,
		},
		{
			Name:    "DeleteClusters",
			Aliases: []string{},
			Usage:   "DeleteClusters",
			Flags:   _flag_ClusterService_DeleteClusters,
			Action:  _cmd_ClusterService_DeleteClusters,
		},
		{
			Name:    "Lease",
			Aliases: []string{},
			Usage:   "Lease",
			Flags:   _flag_ClusterService_Lease,
			Action:  _cmd_ClusterService_Lease,
		},
		{
			Name:    "AddClusterNodes",
			Aliases: []string{},
			Usage:   "AddClusterNodes",
			Flags:   _flag_ClusterService_AddClusterNodes,
			Action:  _cmd_ClusterService_AddClusterNodes,
		},
		{
			Name:    "DeleteClusterNodes",
			Aliases: []string{},
			Usage:   "DeleteClusterNodes",
			Flags:   _flag_ClusterService_DeleteClusterNodes,
			Action:  _cmd_ClusterService_DeleteClusterNodes,
		},
		{
			Name:    "ResizeCluster",
			Aliases: []string{},
			Usage:   "ResizeCluster",
			Flags:   _flag_ClusterService_ResizeCluster,
			Action:  _cmd_ClusterService_ResizeCluster,
		},
		{
			Name:    "ChangeClusterVxnet",
			Aliases: []string{},
			Usage:   "ChangeClusterVxnet",
			Flags:   _flag_ClusterService_ChangeClusterVxnet,
			Action:  _cmd_ClusterService_ChangeClusterVxnet,
		},
		{
			Name:    "SuspendClusters",
			Aliases: []string{},
			Usage:   "SuspendClusters",
			Flags:   _flag_ClusterService_SuspendClusters,
			Action:  _cmd_ClusterService_SuspendClusters,
		},
		{
			Name:    "UpdateClusterEnvironment",
			Aliases: []string{},
			Usage:   "UpdateClusterEnvironment",
			Flags:   _flag_ClusterService_UpdateClusterEnvironment,
			Action:  _cmd_ClusterService_UpdateClusterEnvironment,
		},
		{
			Name:    "ModifyClusterAttributes",
			Aliases: []string{},
			Usage:   "ModifyClusterAttributes",
			Flags:   _flag_ClusterService_ModifyClusterAttributes,
			Action:  _cmd_ClusterService_ModifyClusterAttributes,
		},
		{
			Name:    "ModifyClusterNodeAttributes",
			Aliases: []string{},
			Usage:   "ModifyClusterNodeAttributes",
			Flags:   _flag_ClusterService_ModifyClusterNodeAttributes,
			Action:  _cmd_ClusterService_ModifyClusterNodeAttributes,
		},
		{
			Name:    "GetClustersStats",
			Aliases: []string{},
			Usage:   "GetClustersStats",
			Flags:   _flag_ClusterService_GetClustersStats,
			Action:  _cmd_ClusterService_GetClustersStats,
		},
		{
			Name:    "DescribeClusterUsers",
			Aliases: []string{},
			Usage:   "DescribeClusterUsers",
			Flags:   _flag_ClusterService_DescribeClusterUsers,
			Action:  _cmd_ClusterService_DescribeClusterUsers,
		},
		{
			Name:    "RestartClusterService",
			Aliases: []string{},
			Usage:   "RestartClusterService",
			Flags:   _flag_ClusterService_RestartClusterService,
			Action:  _cmd_ClusterService_RestartClusterService,
		},
		{
			Name:    "UpgradeClusters",
			Aliases: []string{},
			Usage:   "UpgradeClusters",
			Flags:   _flag_ClusterService_UpgradeClusters,
			Action:  _cmd_ClusterService_UpgradeClusters,
		},
		{
			Name:    "AuthorizeClustersBrokerToDeveloper",
			Aliases: []string{},
			Usage:   "AuthorizeClustersBrokerToDeveloper",
			Flags:   _flag_ClusterService_AuthorizeClustersBrokerToDeveloper,
			Action:  _cmd_ClusterService_AuthorizeClustersBrokerToDeveloper,
		},
		{
			Name:    "RevokeClustersBrokerFromDeveloper",
			Aliases: []string{},
			Usage:   "RevokeClustersBrokerFromDeveloper",
			Flags:   _flag_ClusterService_RevokeClustersBrokerFromDeveloper,
			Action:  _cmd_ClusterService_RevokeClustersBrokerFromDeveloper,
		},
	},
}

var _flag_ClusterService_CreateCluster = []cli.Flag{ /* fields */ }

func _cmd_ClusterService_CreateCluster(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewClusterService(conf, zone)

	in := new(pb.CreateClusterInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.CreateCluster(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_ClusterService_DescribeClusters = []cli.Flag{ /* fields */ }

func _cmd_ClusterService_DescribeClusters(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewClusterService(conf, zone)

	in := new(pb.DescribeClustersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DescribeClusters(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_ClusterService_DescribeClusterNodes = []cli.Flag{ /* fields */ }

func _cmd_ClusterService_DescribeClusterNodes(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewClusterService(conf, zone)

	in := new(pb.DescribeClusterNodesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DescribeClusterNodes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_ClusterService_StopClusters = []cli.Flag{ /* fields */ }

func _cmd_ClusterService_StopClusters(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewClusterService(conf, zone)

	in := new(pb.StopClustersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.StopClusters(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_ClusterService_StartClusters = []cli.Flag{ /* fields */ }

func _cmd_ClusterService_StartClusters(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewClusterService(conf, zone)

	in := new(pb.StartClustersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.StartClusters(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_ClusterService_DeleteClusters = []cli.Flag{ /* fields */ }

func _cmd_ClusterService_DeleteClusters(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewClusterService(conf, zone)

	in := new(pb.DeleteClustersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DeleteClusters(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_ClusterService_Lease = []cli.Flag{ /* fields */ }

func _cmd_ClusterService_Lease(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewClusterService(conf, zone)

	in := new(pb.LeaseInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.Lease(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_ClusterService_AddClusterNodes = []cli.Flag{ /* fields */ }

func _cmd_ClusterService_AddClusterNodes(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewClusterService(conf, zone)

	in := new(pb.AddClusterNodesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.AddClusterNodes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_ClusterService_DeleteClusterNodes = []cli.Flag{ /* fields */ }

func _cmd_ClusterService_DeleteClusterNodes(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewClusterService(conf, zone)

	in := new(pb.DeleteClusterNodesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DeleteClusterNodes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_ClusterService_ResizeCluster = []cli.Flag{ /* fields */ }

func _cmd_ClusterService_ResizeCluster(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewClusterService(conf, zone)

	in := new(pb.ResizeClusterInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.ResizeCluster(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_ClusterService_ChangeClusterVxnet = []cli.Flag{ /* fields */ }

func _cmd_ClusterService_ChangeClusterVxnet(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewClusterService(conf, zone)

	in := new(pb.ChangeClusterVxnetInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.ChangeClusterVxnet(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_ClusterService_SuspendClusters = []cli.Flag{ /* fields */ }

func _cmd_ClusterService_SuspendClusters(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewClusterService(conf, zone)

	in := new(pb.SuspendClustersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.SuspendClusters(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_ClusterService_UpdateClusterEnvironment = []cli.Flag{ /* fields */ }

func _cmd_ClusterService_UpdateClusterEnvironment(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewClusterService(conf, zone)

	in := new(pb.UpdateClusterEnvironmentInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.UpdateClusterEnvironment(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_ClusterService_ModifyClusterAttributes = []cli.Flag{ /* fields */ }

func _cmd_ClusterService_ModifyClusterAttributes(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewClusterService(conf, zone)

	in := new(pb.ModifyClusterAttributesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.ModifyClusterAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_ClusterService_ModifyClusterNodeAttributes = []cli.Flag{ /* fields */ }

func _cmd_ClusterService_ModifyClusterNodeAttributes(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewClusterService(conf, zone)

	in := new(pb.ModifyClusterNodeAttributesInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.ModifyClusterNodeAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_ClusterService_GetClustersStats = []cli.Flag{ /* fields */ }

func _cmd_ClusterService_GetClustersStats(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewClusterService(conf, zone)

	in := new(pb.GetClustersStatsInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.GetClustersStats(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_ClusterService_DescribeClusterUsers = []cli.Flag{ /* fields */ }

func _cmd_ClusterService_DescribeClusterUsers(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewClusterService(conf, zone)

	in := new(pb.DescribeClusterUsersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.DescribeClusterUsers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_ClusterService_RestartClusterService = []cli.Flag{ /* fields */ }

func _cmd_ClusterService_RestartClusterService(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewClusterService(conf, zone)

	in := new(pb.RestartClusterServiceInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.RestartClusterService(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_ClusterService_UpgradeClusters = []cli.Flag{ /* fields */ }

func _cmd_ClusterService_UpgradeClusters(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewClusterService(conf, zone)

	in := new(pb.UpgradeClustersInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.UpgradeClusters(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_ClusterService_AuthorizeClustersBrokerToDeveloper = []cli.Flag{ /* fields */ }

func _cmd_ClusterService_AuthorizeClustersBrokerToDeveloper(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewClusterService(conf, zone)

	in := new(pb.AuthorizeClustersBrokerToDeveloperInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.AuthorizeClustersBrokerToDeveloper(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_ClusterService_RevokeClustersBrokerFromDeveloper = []cli.Flag{ /* fields */ }

func _cmd_ClusterService_RevokeClustersBrokerFromDeveloper(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewClusterService(conf, zone)

	in := new(pb.RevokeClustersBrokerFromDeveloperInput)

	if c.NArg() == 1 && c.Args().Get(0) == "-" {
		// read from stdin json
		err := jsonpb.Unmarshal(os.Stdin, in)
		if err != nil {
			logger.Fatal(err)
		}
	} else {
		// read from flags
	}

	out, err := qc.RevokeClustersBrokerFromDeveloper(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}
