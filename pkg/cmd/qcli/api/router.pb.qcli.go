// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/golang
// source: router.proto

package qcli_pb

import (
	"fmt"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/urfave/cli"

	pb "github.com/chai2010/qingcloud-go/pkg/api"
	"github.com/chai2010/qingcloud-go/pkg/config"
	"github.com/chai2010/qingcloud-go/pkg/logger"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf

	_ = cli.Command{}
	_ = jsonpb.Unmarshal
	_ = proto.Marshal

	_ = config.Config{}
	_ = logger.Info
	_ = pb.AlarmService{}
)

func init() {
	AllCommands = append(AllCommands, CmdRouterService)
}

var CmdRouterService = cli.Command{
	Name:    "router",
	Aliases: []string{},
	Usage:   "manage RouterService",
	Subcommands: []cli.Command{
		{
			Name:    "DescribeRouters",
			Aliases: []string{},
			Usage:   "DescribeRouters",
			Action:  cmdDescribeRouters,
		},
		{
			Name:    "CreateRouters",
			Aliases: []string{},
			Usage:   "CreateRouters",
			Action:  cmdCreateRouters,
		},
		{
			Name:    "DeleteRouters",
			Aliases: []string{},
			Usage:   "DeleteRouters",
			Action:  cmdDeleteRouters,
		},
		{
			Name:    "UpdateRouters",
			Aliases: []string{},
			Usage:   "UpdateRouters",
			Action:  cmdUpdateRouters,
		},
		{
			Name:    "PowerOffRouters",
			Aliases: []string{},
			Usage:   "PowerOffRouters",
			Action:  cmdPowerOffRouters,
		},
		{
			Name:    "PowerOnRouters",
			Aliases: []string{},
			Usage:   "PowerOnRouters",
			Action:  cmdPowerOnRouters,
		},
		{
			Name:    "JoinRouter",
			Aliases: []string{},
			Usage:   "JoinRouter",
			Action:  cmdJoinRouter,
		},
		{
			Name:    "LeaveRouter",
			Aliases: []string{},
			Usage:   "LeaveRouter",
			Action:  cmdLeaveRouter,
		},
		{
			Name:    "ModifyRouterAttributes",
			Aliases: []string{},
			Usage:   "ModifyRouterAttributes",
			Action:  cmdModifyRouterAttributes,
		},
		{
			Name:    "DescribeRouterStatics",
			Aliases: []string{},
			Usage:   "DescribeRouterStatics",
			Action:  cmdDescribeRouterStatics,
		},
		{
			Name:    "AddRouterStatics",
			Aliases: []string{},
			Usage:   "AddRouterStatics",
			Action:  cmdAddRouterStatics,
		},
		{
			Name:    "ModifyRouterStaticAttributes",
			Aliases: []string{},
			Usage:   "ModifyRouterStaticAttributes",
			Action:  cmdModifyRouterStaticAttributes,
		},
		{
			Name:    "DeleteRouterStatics",
			Aliases: []string{},
			Usage:   "DeleteRouterStatics",
			Action:  cmdDeleteRouterStatics,
		},
		{
			Name:    "CopyRouterStatics",
			Aliases: []string{},
			Usage:   "CopyRouterStatics",
			Action:  cmdCopyRouterStatics,
		},
		{
			Name:    "DescribeRouterVxnets",
			Aliases: []string{},
			Usage:   "DescribeRouterVxnets",
			Action:  cmdDescribeRouterVxnets,
		},
		{
			Name:    "AddRouterStaticEntries",
			Aliases: []string{},
			Usage:   "AddRouterStaticEntries",
			Action:  cmdAddRouterStaticEntries,
		},
		{
			Name:    "DeleteRouterStaticEntries",
			Aliases: []string{},
			Usage:   "DeleteRouterStaticEntries",
			Action:  cmdDeleteRouterStaticEntries,
		},
		{
			Name:    "ModifyRouterStaticEntryAttributes",
			Aliases: []string{},
			Usage:   "ModifyRouterStaticEntryAttributes",
			Action:  cmdModifyRouterStaticEntryAttributes,
		},
		{
			Name:    "DescribeRouterStaticEntries",
			Aliases: []string{},
			Usage:   "DescribeRouterStaticEntries",
			Action:  cmdDescribeRouterStaticEntries,
		},
	},
}

func cmdDescribeRouters(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewRouterService(conf, zone)

	in := new(pb.DescribeRoutersInput)

	// TODO: fill field from flags

	out, err := qc.DescribeRouters(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCreateRouters(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewRouterService(conf, zone)

	in := new(pb.CreateRoutersInput)

	// TODO: fill field from flags

	out, err := qc.CreateRouters(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteRouters(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewRouterService(conf, zone)

	in := new(pb.DeleteRoutersInput)

	// TODO: fill field from flags

	out, err := qc.DeleteRouters(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdUpdateRouters(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewRouterService(conf, zone)

	in := new(pb.UpdateRoutersInput)

	// TODO: fill field from flags

	out, err := qc.UpdateRouters(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdPowerOffRouters(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewRouterService(conf, zone)

	in := new(pb.PowerOffRoutersInput)

	// TODO: fill field from flags

	out, err := qc.PowerOffRouters(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdPowerOnRouters(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewRouterService(conf, zone)

	in := new(pb.PowerOnRoutersInput)

	// TODO: fill field from flags

	out, err := qc.PowerOnRouters(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdJoinRouter(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewRouterService(conf, zone)

	in := new(pb.JoinRouterInput)

	// TODO: fill field from flags

	out, err := qc.JoinRouter(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdLeaveRouter(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewRouterService(conf, zone)

	in := new(pb.LeaveRouterInput)

	// TODO: fill field from flags

	out, err := qc.LeaveRouter(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyRouterAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewRouterService(conf, zone)

	in := new(pb.ModifyRouterAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyRouterAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeRouterStatics(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewRouterService(conf, zone)

	in := new(pb.DescribeRouterStaticsInput)

	// TODO: fill field from flags

	out, err := qc.DescribeRouterStatics(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdAddRouterStatics(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewRouterService(conf, zone)

	in := new(pb.AddRouterStaticsInput)

	// TODO: fill field from flags

	out, err := qc.AddRouterStatics(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyRouterStaticAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewRouterService(conf, zone)

	in := new(pb.ModifyRouterStaticAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyRouterStaticAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteRouterStatics(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewRouterService(conf, zone)

	in := new(pb.DeleteRouterStaticsInput)

	// TODO: fill field from flags

	out, err := qc.DeleteRouterStatics(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCopyRouterStatics(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewRouterService(conf, zone)

	in := new(pb.CopyRouterStaticsInput)

	// TODO: fill field from flags

	out, err := qc.CopyRouterStatics(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeRouterVxnets(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewRouterService(conf, zone)

	in := new(pb.DescribeRouterVxnetsInput)

	// TODO: fill field from flags

	out, err := qc.DescribeRouterVxnets(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdAddRouterStaticEntries(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewRouterService(conf, zone)

	in := new(pb.AddRouterStaticEntriesInput)

	// TODO: fill field from flags

	out, err := qc.AddRouterStaticEntries(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteRouterStaticEntries(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewRouterService(conf, zone)

	in := new(pb.DeleteRouterStaticEntriesInput)

	// TODO: fill field from flags

	out, err := qc.DeleteRouterStaticEntries(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyRouterStaticEntryAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewRouterService(conf, zone)

	in := new(pb.ModifyRouterStaticEntryAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyRouterStaticEntryAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeRouterStaticEntries(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewRouterService(conf, zone)

	in := new(pb.DescribeRouterStaticEntriesInput)

	// TODO: fill field from flags

	out, err := qc.DescribeRouterStaticEntries(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}
