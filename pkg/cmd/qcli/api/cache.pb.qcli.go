// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/golang
// source: cache.proto

package qcli_pb

import (
	"fmt"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/urfave/cli"

	pb "github.com/chai2010/qingcloud-go/pkg/api"
	"github.com/chai2010/qingcloud-go/pkg/config"
	"github.com/chai2010/qingcloud-go/pkg/logger"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf

	_ = cli.Command{}
	_ = jsonpb.Unmarshal
	_ = proto.Marshal

	_ = config.Config{}
	_ = logger.Info
	_ = pb.AlarmService{}
)

func init() {
	AllCommands = append(AllCommands, CmdCacheService)
}

var CmdCacheService = cli.Command{
	Name:    "cache",
	Aliases: []string{},
	Usage:   "manage CacheService",
	Subcommands: []cli.Command{
		{
			Name:    "DescribeCaches",
			Aliases: []string{},
			Usage:   "DescribeCaches",
			Action:  cmdDescribeCaches,
		},
		{
			Name:    "CreateCache",
			Aliases: []string{},
			Usage:   "CreateCache",
			Action:  cmdCreateCache,
		},
		{
			Name:    "StopCaches",
			Aliases: []string{},
			Usage:   "StopCaches",
			Action:  cmdStopCaches,
		},
		{
			Name:    "StartCaches",
			Aliases: []string{},
			Usage:   "StartCaches",
			Action:  cmdStartCaches,
		},
		{
			Name:    "RestartCaches",
			Aliases: []string{},
			Usage:   "RestartCaches",
			Action:  cmdRestartCaches,
		},
		{
			Name:    "DeleteCaches",
			Aliases: []string{},
			Usage:   "DeleteCaches",
			Action:  cmdDeleteCaches,
		},
		{
			Name:    "ResizeCaches",
			Aliases: []string{},
			Usage:   "ResizeCaches",
			Action:  cmdResizeCaches,
		},
		{
			Name:    "UpdateCache",
			Aliases: []string{},
			Usage:   "UpdateCache",
			Action:  cmdUpdateCache,
		},
		{
			Name:    "ChangeCacheVxnet",
			Aliases: []string{},
			Usage:   "ChangeCacheVxnet",
			Action:  cmdChangeCacheVxnet,
		},
		{
			Name:    "ModifyCacheAttributes",
			Aliases: []string{},
			Usage:   "ModifyCacheAttributes",
			Action:  cmdModifyCacheAttributes,
		},
		{
			Name:    "DescribeCacheNodes",
			Aliases: []string{},
			Usage:   "DescribeCacheNodes",
			Action:  cmdDescribeCacheNodes,
		},
		{
			Name:    "AddCacheNodes",
			Aliases: []string{},
			Usage:   "AddCacheNodes",
			Action:  cmdAddCacheNodes,
		},
		{
			Name:    "DeleteCacheNodes",
			Aliases: []string{},
			Usage:   "DeleteCacheNodes",
			Action:  cmdDeleteCacheNodes,
		},
		{
			Name:    "RestartCacheNodes",
			Aliases: []string{},
			Usage:   "RestartCacheNodes",
			Action:  cmdRestartCacheNodes,
		},
		{
			Name:    "ModifyCacheNodeAttributes",
			Aliases: []string{},
			Usage:   "ModifyCacheNodeAttributes",
			Action:  cmdModifyCacheNodeAttributes,
		},
		{
			Name:    "CreateCacheFromSnapshot",
			Aliases: []string{},
			Usage:   "CreateCacheFromSnapshot",
			Action:  cmdCreateCacheFromSnapshot,
		},
		{
			Name:    "DescribeCacheParameterGroups",
			Aliases: []string{},
			Usage:   "DescribeCacheParameterGroups",
			Action:  cmdDescribeCacheParameterGroups,
		},
		{
			Name:    "CreateCacheParameterGroup",
			Aliases: []string{},
			Usage:   "CreateCacheParameterGroup",
			Action:  cmdCreateCacheParameterGroup,
		},
		{
			Name:    "ApplyCacheParameterGroup",
			Aliases: []string{},
			Usage:   "ApplyCacheParameterGroup",
			Action:  cmdApplyCacheParameterGroup,
		},
		{
			Name:    "DeleteCacheParameterGroups",
			Aliases: []string{},
			Usage:   "DeleteCacheParameterGroups",
			Action:  cmdDeleteCacheParameterGroups,
		},
		{
			Name:    "ModifyCacheParameterGroupAttributes",
			Aliases: []string{},
			Usage:   "ModifyCacheParameterGroupAttributes",
			Action:  cmdModifyCacheParameterGroupAttributes,
		},
		{
			Name:    "DescribeCacheParameters",
			Aliases: []string{},
			Usage:   "DescribeCacheParameters",
			Action:  cmdDescribeCacheParameters,
		},
		{
			Name:    "UpdateCacheParameters",
			Aliases: []string{},
			Usage:   "UpdateCacheParameters",
			Action:  cmdUpdateCacheParameters,
		},
		{
			Name:    "ResetCacheParameters",
			Aliases: []string{},
			Usage:   "ResetCacheParameters",
			Action:  cmdResetCacheParameters,
		},
	},
}

func cmdDescribeCaches(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewCacheService(conf, zone)

	in := new(pb.DescribeCachesInput)

	// TODO: fill field from flags

	out, err := qc.DescribeCaches(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCreateCache(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewCacheService(conf, zone)

	in := new(pb.CreateCacheInput)

	// TODO: fill field from flags

	out, err := qc.CreateCache(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdStopCaches(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewCacheService(conf, zone)

	in := new(pb.StopCachesInput)

	// TODO: fill field from flags

	out, err := qc.StopCaches(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdStartCaches(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewCacheService(conf, zone)

	in := new(pb.StartCachesInput)

	// TODO: fill field from flags

	out, err := qc.StartCaches(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdRestartCaches(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewCacheService(conf, zone)

	in := new(pb.RestartCachesInput)

	// TODO: fill field from flags

	out, err := qc.RestartCaches(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteCaches(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewCacheService(conf, zone)

	in := new(pb.DeleteCachesInput)

	// TODO: fill field from flags

	out, err := qc.DeleteCaches(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdResizeCaches(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewCacheService(conf, zone)

	in := new(pb.ResizeCachesInput)

	// TODO: fill field from flags

	out, err := qc.ResizeCaches(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdUpdateCache(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewCacheService(conf, zone)

	in := new(pb.UpdateCacheInput)

	// TODO: fill field from flags

	out, err := qc.UpdateCache(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdChangeCacheVxnet(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewCacheService(conf, zone)

	in := new(pb.ChangeCacheVxnetInput)

	// TODO: fill field from flags

	out, err := qc.ChangeCacheVxnet(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyCacheAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewCacheService(conf, zone)

	in := new(pb.ModifyCacheAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyCacheAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeCacheNodes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewCacheService(conf, zone)

	in := new(pb.DescribeCacheNodesInput)

	// TODO: fill field from flags

	out, err := qc.DescribeCacheNodes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdAddCacheNodes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewCacheService(conf, zone)

	in := new(pb.AddCacheNodesInput)

	// TODO: fill field from flags

	out, err := qc.AddCacheNodes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteCacheNodes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewCacheService(conf, zone)

	in := new(pb.DeleteCacheNodesInput)

	// TODO: fill field from flags

	out, err := qc.DeleteCacheNodes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdRestartCacheNodes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewCacheService(conf, zone)

	in := new(pb.RestartCacheNodesInput)

	// TODO: fill field from flags

	out, err := qc.RestartCacheNodes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyCacheNodeAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewCacheService(conf, zone)

	in := new(pb.ModifyCacheNodeAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyCacheNodeAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCreateCacheFromSnapshot(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewCacheService(conf, zone)

	in := new(pb.CreateCacheFromSnapshotInput)

	// TODO: fill field from flags

	out, err := qc.CreateCacheFromSnapshot(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeCacheParameterGroups(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewCacheService(conf, zone)

	in := new(pb.DescribeCacheParameterGroupsInput)

	// TODO: fill field from flags

	out, err := qc.DescribeCacheParameterGroups(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCreateCacheParameterGroup(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewCacheService(conf, zone)

	in := new(pb.CreateCacheParameterGroupInput)

	// TODO: fill field from flags

	out, err := qc.CreateCacheParameterGroup(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdApplyCacheParameterGroup(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewCacheService(conf, zone)

	in := new(pb.ApplyCacheParameterGroupInput)

	// TODO: fill field from flags

	out, err := qc.ApplyCacheParameterGroup(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteCacheParameterGroups(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewCacheService(conf, zone)

	in := new(pb.DeleteCacheParameterGroupsInput)

	// TODO: fill field from flags

	out, err := qc.DeleteCacheParameterGroups(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyCacheParameterGroupAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewCacheService(conf, zone)

	in := new(pb.ModifyCacheParameterGroupAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyCacheParameterGroupAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeCacheParameters(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewCacheService(conf, zone)

	in := new(pb.DescribeCacheParametersInput)

	// TODO: fill field from flags

	out, err := qc.DescribeCacheParameters(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdUpdateCacheParameters(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewCacheService(conf, zone)

	in := new(pb.UpdateCacheParametersInput)

	// TODO: fill field from flags

	out, err := qc.UpdateCacheParameters(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdResetCacheParameters(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewCacheService(conf, zone)

	in := new(pb.ResetCacheParametersInput)

	// TODO: fill field from flags

	out, err := qc.ResetCacheParameters(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}
