// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/golang
// source: spark.proto

package qcli_pb

import (
	"fmt"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/urfave/cli"

	pb "github.com/chai2010/qingcloud-go/pkg/api"
	"github.com/chai2010/qingcloud-go/pkg/config"
	"github.com/chai2010/qingcloud-go/pkg/logger"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf

	_ = cli.Command{}
	_ = jsonpb.Unmarshal
	_ = proto.Marshal

	_ = config.Config{}
	_ = logger.Info
	_ = pb.AlarmService{}
)

func init() {
	AllCommands = append(AllCommands, CmdSparkService)
}

var CmdSparkService = cli.Command{
	Name:    "spark",
	Aliases: []string{},
	Usage:   "manage SparkService",
	Subcommands: []cli.Command{
		{
			Name:    "CreateSpark",
			Aliases: []string{},
			Usage:   "CreateSpark",
			Flags:   _flag_SparkService_CreateSpark,
			Action:  _cmd_SparkService_CreateSpark,
		},
		{
			Name:    "DescribeSparks",
			Aliases: []string{},
			Usage:   "DescribeSparks",
			Flags:   _flag_SparkService_DescribeSparks,
			Action:  _cmd_SparkService_DescribeSparks,
		},
		{
			Name:    "AddSparkNodes",
			Aliases: []string{},
			Usage:   "AddSparkNodes",
			Flags:   _flag_SparkService_AddSparkNodes,
			Action:  _cmd_SparkService_AddSparkNodes,
		},
		{
			Name:    "DeleteSparkNodes",
			Aliases: []string{},
			Usage:   "DeleteSparkNodes",
			Flags:   _flag_SparkService_DeleteSparkNodes,
			Action:  _cmd_SparkService_DeleteSparkNodes,
		},
		{
			Name:    "StartSparks",
			Aliases: []string{},
			Usage:   "StartSparks",
			Flags:   _flag_SparkService_StartSparks,
			Action:  _cmd_SparkService_StartSparks,
		},
		{
			Name:    "StopSparks",
			Aliases: []string{},
			Usage:   "StopSparks",
			Flags:   _flag_SparkService_StopSparks,
			Action:  _cmd_SparkService_StopSparks,
		},
		{
			Name:    "DeleteSparks",
			Aliases: []string{},
			Usage:   "DeleteSparks",
			Flags:   _flag_SparkService_DeleteSparks,
			Action:  _cmd_SparkService_DeleteSparks,
		},
	},
}

var _flag_SparkService_CreateSpark = []cli.Flag{ /* fields */ }

func _cmd_SparkService_CreateSpark(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewSparkService(conf, zone)

	in := new(pb.CreateSparkInput)

	// TODO: fill field from flags

	out, err := qc.CreateSpark(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SparkService_DescribeSparks = []cli.Flag{ /* fields */ }

func _cmd_SparkService_DescribeSparks(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewSparkService(conf, zone)

	in := new(pb.DescribeSparksInput)

	// TODO: fill field from flags

	out, err := qc.DescribeSparks(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SparkService_AddSparkNodes = []cli.Flag{ /* fields */ }

func _cmd_SparkService_AddSparkNodes(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewSparkService(conf, zone)

	in := new(pb.AddSparkNodesInput)

	// TODO: fill field from flags

	out, err := qc.AddSparkNodes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SparkService_DeleteSparkNodes = []cli.Flag{ /* fields */ }

func _cmd_SparkService_DeleteSparkNodes(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewSparkService(conf, zone)

	in := new(pb.DeleteSparkNodesInput)

	// TODO: fill field from flags

	out, err := qc.DeleteSparkNodes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SparkService_StartSparks = []cli.Flag{ /* fields */ }

func _cmd_SparkService_StartSparks(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewSparkService(conf, zone)

	in := new(pb.StartSparksInput)

	// TODO: fill field from flags

	out, err := qc.StartSparks(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SparkService_StopSparks = []cli.Flag{ /* fields */ }

func _cmd_SparkService_StopSparks(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewSparkService(conf, zone)

	in := new(pb.StopSparksInput)

	// TODO: fill field from flags

	out, err := qc.StopSparks(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

var _flag_SparkService_DeleteSparks = []cli.Flag{ /* fields */ }

func _cmd_SparkService_DeleteSparks(c *cli.Context) error {
	conf := config.MustLoadConfigFromFilepath(c.GlobalString("config"))
	zone := c.GlobalString("zone")
	qc := pb.NewSparkService(conf, zone)

	in := new(pb.DeleteSparksInput)

	// TODO: fill field from flags

	out, err := qc.DeleteSparks(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}
