// Code generated by protoc-gen-qingcloud. DO NOT EDIT.
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud
// plugin: https://github.com/chai2010/qingcloud-go/tree/master/pkg/cmd/protoc-gen-qingcloud/generator/golang
// source: resource_acl.proto

package qcli_pb

import (
	"fmt"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/urfave/cli"

	pb "github.com/chai2010/qingcloud-go/pkg/api"
	"github.com/chai2010/qingcloud-go/pkg/config"
	"github.com/chai2010/qingcloud-go/pkg/logger"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf

	_ = cli.Command{}
	_ = jsonpb.Unmarshal
	_ = proto.Marshal

	_ = config.Config{}
	_ = logger.Info
	_ = pb.AlarmService{}
)

func init() {
	AllCommands = append(AllCommands, CmdResourceACLService)
}

var CmdResourceACLService = cli.Command{
	Name:    "resourceacl",
	Aliases: []string{},
	Usage:   "manage ResourceACLService",
	Subcommands: []cli.Command{
		{
			Name:    "DescribeSharedResourceGroups",
			Aliases: []string{},
			Usage:   "DescribeSharedResourceGroups",
			Action:  cmdDescribeSharedResourceGroups,
		},
		{
			Name:    "DescribeResourceGroups",
			Aliases: []string{},
			Usage:   "DescribeResourceGroups",
			Action:  cmdDescribeResourceGroups,
		},
		{
			Name:    "CreateResourceGroups",
			Aliases: []string{},
			Usage:   "CreateResourceGroups",
			Action:  cmdCreateResourceGroups,
		},
		{
			Name:    "ModifyResourceGroupAttributes",
			Aliases: []string{},
			Usage:   "ModifyResourceGroupAttributes",
			Action:  cmdModifyResourceGroupAttributes,
		},
		{
			Name:    "DeleteResourceGroups",
			Aliases: []string{},
			Usage:   "DeleteResourceGroups",
			Action:  cmdDeleteResourceGroups,
		},
		{
			Name:    "DescribeResourceGroupItems",
			Aliases: []string{},
			Usage:   "DescribeResourceGroupItems",
			Action:  cmdDescribeResourceGroupItems,
		},
		{
			Name:    "AddResourceGroupItems",
			Aliases: []string{},
			Usage:   "AddResourceGroupItems",
			Action:  cmdAddResourceGroupItems,
		},
		{
			Name:    "DeleteResourceGroupItems",
			Aliases: []string{},
			Usage:   "DeleteResourceGroupItems",
			Action:  cmdDeleteResourceGroupItems,
		},
		{
			Name:    "DescribeUserGroups",
			Aliases: []string{},
			Usage:   "DescribeUserGroups",
			Action:  cmdDescribeUserGroups,
		},
		{
			Name:    "CreateUserGroups",
			Aliases: []string{},
			Usage:   "CreateUserGroups",
			Action:  cmdCreateUserGroups,
		},
		{
			Name:    "ModifyUserGroupAttributes",
			Aliases: []string{},
			Usage:   "ModifyUserGroupAttributes",
			Action:  cmdModifyUserGroupAttributes,
		},
		{
			Name:    "DeleteUserGroups",
			Aliases: []string{},
			Usage:   "DeleteUserGroups",
			Action:  cmdDeleteUserGroups,
		},
		{
			Name:    "DescribeUserGroupMembers",
			Aliases: []string{},
			Usage:   "DescribeUserGroupMembers",
			Action:  cmdDescribeUserGroupMembers,
		},
		{
			Name:    "AddUserGroupMembers",
			Aliases: []string{},
			Usage:   "AddUserGroupMembers",
			Action:  cmdAddUserGroupMembers,
		},
		{
			Name:    "ModifyUserGroupMemberAttributes",
			Aliases: []string{},
			Usage:   "ModifyUserGroupMemberAttributes",
			Action:  cmdModifyUserGroupMemberAttributes,
		},
		{
			Name:    "DeleteUserGroupMembers",
			Aliases: []string{},
			Usage:   "DeleteUserGroupMembers",
			Action:  cmdDeleteUserGroupMembers,
		},
		{
			Name:    "DescribeGroupRoles",
			Aliases: []string{},
			Usage:   "DescribeGroupRoles",
			Action:  cmdDescribeGroupRoles,
		},
		{
			Name:    "CreateGroupRoles",
			Aliases: []string{},
			Usage:   "CreateGroupRoles",
			Action:  cmdCreateGroupRoles,
		},
		{
			Name:    "ModifyGroupRoleAttributes",
			Aliases: []string{},
			Usage:   "ModifyGroupRoleAttributes",
			Action:  cmdModifyGroupRoleAttributes,
		},
		{
			Name:    "DeleteGroupRoles",
			Aliases: []string{},
			Usage:   "DeleteGroupRoles",
			Action:  cmdDeleteGroupRoles,
		},
		{
			Name:    "DescribeGroupRoleRules",
			Aliases: []string{},
			Usage:   "DescribeGroupRoleRules",
			Action:  cmdDescribeGroupRoleRules,
		},
		{
			Name:    "AddGroupRoleRules",
			Aliases: []string{},
			Usage:   "AddGroupRoleRules",
			Action:  cmdAddGroupRoleRules,
		},
		{
			Name:    "ModifyGroupRoleRuleAttributes",
			Aliases: []string{},
			Usage:   "ModifyGroupRoleRuleAttributes",
			Action:  cmdModifyGroupRoleRuleAttributes,
		},
		{
			Name:    "DeleteGroupRoleRules",
			Aliases: []string{},
			Usage:   "DeleteGroupRoleRules",
			Action:  cmdDeleteGroupRoleRules,
		},
		{
			Name:    "GrantResourceGroupsToUserGroups",
			Aliases: []string{},
			Usage:   "GrantResourceGroupsToUserGroups",
			Action:  cmdGrantResourceGroupsToUserGroups,
		},
		{
			Name:    "RevokeResourceGroupsFromUserGroups",
			Aliases: []string{},
			Usage:   "RevokeResourceGroupsFromUserGroups",
			Action:  cmdRevokeResourceGroupsFromUserGroups,
		},
		{
			Name:    "DescribeResourceUserGroups",
			Aliases: []string{},
			Usage:   "DescribeResourceUserGroups",
			Action:  cmdDescribeResourceUserGroups,
		},
	},
}

func cmdDescribeSharedResourceGroups(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.DescribeSharedResourceGroupsInput)

	// TODO: fill field from flags

	out, err := qc.DescribeSharedResourceGroups(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeResourceGroups(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.DescribeResourceGroupsInput)

	// TODO: fill field from flags

	out, err := qc.DescribeResourceGroups(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCreateResourceGroups(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.CreateResourceGroupsInput)

	// TODO: fill field from flags

	out, err := qc.CreateResourceGroups(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyResourceGroupAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.ModifyResourceGroupAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyResourceGroupAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteResourceGroups(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.DeleteResourceGroupsInput)

	// TODO: fill field from flags

	out, err := qc.DeleteResourceGroups(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeResourceGroupItems(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.DescribeResourceGroupItemsInput)

	// TODO: fill field from flags

	out, err := qc.DescribeResourceGroupItems(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdAddResourceGroupItems(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.AddResourceGroupItemsInput)

	// TODO: fill field from flags

	out, err := qc.AddResourceGroupItems(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteResourceGroupItems(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.DeleteResourceGroupItemsInput)

	// TODO: fill field from flags

	out, err := qc.DeleteResourceGroupItems(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeUserGroups(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.DescribeUserGroupsInput)

	// TODO: fill field from flags

	out, err := qc.DescribeUserGroups(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCreateUserGroups(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.CreateUserGroupsInput)

	// TODO: fill field from flags

	out, err := qc.CreateUserGroups(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyUserGroupAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.ModifyUserGroupAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyUserGroupAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteUserGroups(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.DeleteUserGroupsInput)

	// TODO: fill field from flags

	out, err := qc.DeleteUserGroups(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeUserGroupMembers(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.DescribeUserGroupMembersInput)

	// TODO: fill field from flags

	out, err := qc.DescribeUserGroupMembers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdAddUserGroupMembers(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.AddUserGroupMembersInput)

	// TODO: fill field from flags

	out, err := qc.AddUserGroupMembers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyUserGroupMemberAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.ModifyUserGroupMemberAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyUserGroupMemberAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteUserGroupMembers(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.DeleteUserGroupMembersInput)

	// TODO: fill field from flags

	out, err := qc.DeleteUserGroupMembers(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeGroupRoles(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.DescribeGroupRolesInput)

	// TODO: fill field from flags

	out, err := qc.DescribeGroupRoles(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdCreateGroupRoles(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.CreateGroupRolesInput)

	// TODO: fill field from flags

	out, err := qc.CreateGroupRoles(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyGroupRoleAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.ModifyGroupRoleAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyGroupRoleAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteGroupRoles(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.DeleteGroupRolesInput)

	// TODO: fill field from flags

	out, err := qc.DeleteGroupRoles(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeGroupRoleRules(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.DescribeGroupRoleRulesInput)

	// TODO: fill field from flags

	out, err := qc.DescribeGroupRoleRules(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdAddGroupRoleRules(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.AddGroupRoleRulesInput)

	// TODO: fill field from flags

	out, err := qc.AddGroupRoleRules(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdModifyGroupRoleRuleAttributes(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.ModifyGroupRoleRuleAttributesInput)

	// TODO: fill field from flags

	out, err := qc.ModifyGroupRoleRuleAttributes(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDeleteGroupRoleRules(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.DeleteGroupRoleRulesInput)

	// TODO: fill field from flags

	out, err := qc.DeleteGroupRoleRules(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdGrantResourceGroupsToUserGroups(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.GrantResourceGroupsToUserGroupsInput)

	// TODO: fill field from flags

	out, err := qc.GrantResourceGroupsToUserGroups(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdRevokeResourceGroupsFromUserGroups(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.RevokeResourceGroupsFromUserGroupsInput)

	// TODO: fill field from flags

	out, err := qc.RevokeResourceGroupsFromUserGroups(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}

func cmdDescribeResourceUserGroups(c *cli.Context) error {
	var conf *config.Config
	var zone string
	qc := pb.NewResourceACLService(conf, zone)

	in := new(pb.DescribeResourceUserGroupsInput)

	// TODO: fill field from flags

	out, err := qc.DescribeResourceUserGroups(in)
	if err != nil {
		logger.Fatal(err)
	}

	jsonMarshaler := &jsonpb.Marshaler{
		OrigName:     true,
		EnumsAsInts:  true,
		EmitDefaults: true,
		Indent:       "  ",
	}
	s, err := jsonMarshaler.MarshalToString(out)
	if err != nil {
		logger.Fatal(err)
	}

	fmt.Println(s)
	return nil
}
