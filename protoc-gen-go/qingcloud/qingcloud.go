// Copyright 2017 <chaishushan{AT}gmail.com>. All rights reserved.
// Use of this source code is governed by a Apache
// license that can be found in the LICENSE file.

// Package qingcloud outputs qingcloud stub code.
package qingcloud

import (
	rule_pb "github.com/chai2010/qingcloud-go/spec.pb/qingcloud_sdk_rule"
	"github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/protoc-gen-go/descriptor"
	"github.com/golang/protobuf/protoc-gen-go/generator"
)

// qingcloudPlugin produce the Service interface.
type qingcloudPlugin struct {
	*generator.Generator
}

// Name returns the name of the plugin.
func (p *qingcloudPlugin) Name() string { return "qingcloud" }

// Init is called once after data structures are built but before
// code generation begins.
func (p *qingcloudPlugin) Init(g *generator.Generator) {
	p.Generator = g
}

// Generate produces the code generated by the plugin for this file.
func (p *qingcloudPlugin) GenerateImports(file *generator.FileDescriptor) {
	if len(file.Service) > 0 {
		p.P(GetImportsCode())
	}
}

// Generate generates the Service interface.
// rpc service can't handle other proto message!!!
func (p *qingcloudPlugin) Generate(file *generator.FileDescriptor) {
	for _, v := range file.Service {
		p.P(p.buildServiceSpec(v).Code())
	}
	for _, v := range file.MessageType {
		p.P(p.buildMessageSpec(v).Code())
	}
}

func (p *qingcloudPlugin) buildServiceSpec(svc *descriptor.ServiceDescriptorProto) *ServiceSpec {
	spec := new(ServiceSpec)

	if rule := p.getServiceRule(svc); rule != nil {
		spec.DocUrl = rule.GetDocUrl()
		spec.ServiceName = rule.GetServiceName()
		spec.MainServiceName = rule.GetMainServiceName()
	} else {
		spec.ServiceName = generator.CamelCase(svc.GetName())
	}

	for _, m := range svc.Method {
		methodSpec := MethodSpec{
			MethodName: generator.CamelCase(m.GetName()),
		}

		if rule := p.getMethodRule(m); rule != nil {
			methodSpec.DocUrl = rule.GetDocUrl()
			methodSpec.HttpMethod = rule.GetHttpMethod()
			methodSpec.InputTypeName = rule.GetInputType()
			methodSpec.OutputTypeName = rule.GetOutputType()
		}

		if methodSpec.InputTypeName == "" {
			methodSpec.InputTypeName = p.TypeName(p.ObjectNamed(m.GetInputType()))
		}
		if methodSpec.OutputTypeName == "" {
			methodSpec.OutputTypeName = p.TypeName(p.ObjectNamed(m.GetOutputType()))
		}
		if methodSpec.HttpMethod == "" {
			methodSpec.HttpMethod = "GET"
		}

		spec.MethodList = append(spec.MethodList, methodSpec)
	}

	return spec
}

func (p *qingcloudPlugin) buildMessageSpec(msg *descriptor.DescriptorProto) *MessageSpec {
	if rule := p.getMessageRule(msg); rule != nil {
		// TODO
	}
	return &MessageSpec{
		MessageTypeName: generator.CamelCase(msg.GetName()),
	}
}

func (p *qingcloudPlugin) getServiceRule(svc *descriptor.ServiceDescriptorProto) (svcRule *ServiceRule) {
	if svc.Options != nil && proto.HasExtension(svc.Options, rule_pb.E_ServiceRule) {
		if ext, _ := proto.GetExtension(svc.Options, rule_pb.E_ServiceRule); ext != nil {
			if x, _ := ext.(*rule_pb.ServiceOptionsRule); x != nil {
				svcRule = &ServiceRule{x}
			}
		}
	}
	return
}

func (p *qingcloudPlugin) getMethodRule(m *descriptor.MethodDescriptorProto) *MethodRule {
	if m.Options != nil && proto.HasExtension(m.Options, rule_pb.E_MethodRule) {
		if ext, _ := proto.GetExtension(m.Options, rule_pb.E_MethodRule); ext != nil {
			if x, _ := ext.(*rule_pb.MethodOptionsRule); x != nil {
				return &MethodRule{x}
			}
		}
	}
	return nil
}

func (p *qingcloudPlugin) getMessageRule(m *descriptor.DescriptorProto) *MessageRule {
	if m.Options != nil && proto.HasExtension(m.Options, rule_pb.E_MessageRule) {
		if ext, _ := proto.GetExtension(m.Options, rule_pb.E_MessageRule); ext != nil {
			if x, _ := ext.(*rule_pb.MessageOptionsRule); x != nil {
				return &MessageRule{x}
			}
		}
	}
	return nil
}

func (p *qingcloudPlugin) getMethodInputDescriptor(m *descriptor.MethodDescriptorProto) *descriptor.DescriptorProto {
	return p.ObjectNamed(m.GetInputType()).(*generator.Descriptor).DescriptorProto
}
func (p *qingcloudPlugin) getMethodOutputDescriptor(m *descriptor.MethodDescriptorProto) *descriptor.DescriptorProto {
	return p.ObjectNamed(m.GetOutputType()).(*generator.Descriptor).DescriptorProto
}

func init() {
	generator.RegisterPlugin(new(qingcloudPlugin))
}
