// Copyright 2017 <chaishushan{AT}gmail.com>. All rights reserved.
// Use of this source code is governed by a Apache
// license that can be found in the LICENSE file.

syntax = "proto3";

package spec;

import "google/protobuf/timestamp.proto";

message Tag {
	string color = 1;
	google.protobuf.Timestamp create_time = 2;
	string description = 3;
	string owner = 4;
	int32 resource_count = 5;
	repeated ResourceTagPair resource_tag_pairs = 6;
	repeated ResourceTypeCount resource_type_count = 7;
	string tag_id = 8;
	string tag_key = 9;
	string tag_name = 10;

	message ResourceTagPair {
		string resource_id = 1;
		string resource_type = 2;
		string status = 3;
		google.protobuf.Timestamp status_time = 4;
		string tag_id = 5;
	}

	message ResourceTypeCount {
		int32 count = 1;
		string resource_type = 2;
	}
}

message EIP {
	string alarm_status = 1;
	int32 associate_mode = 2;
	int32 bandwidth = 3;
	string billing_mode = 4;
	google.protobuf.Timestamp create_time = 5;
	string description = 6;
	string eip_addr = 7;
	string eip_group = 8;
	string eip_id = 9;
	string eip_name = 10;
	string icp_codes = 11;
	int32 need_icp = 12;
	Resource resource = 13;
	string status = 14;
	google.protobuf.Timestamp status_time = 15;
	int32 sub_code = 16;
	repeated Tag tags = 17;
	string transition_status = 18;

	message Resource {
		string resource_id = 1;
		string resource_name = 2;
		string resource_type = 3;
	}
}

message Job {
	google.protobuf.Timestamp create_time = 1;
	string job_action = 2;
	string job_id = 3;
	string owner = 4;
	string resource_ids = 5;
	string status = 6;
	google.protobuf.Timestamp status_time = 7;
}

message Volume {
	google.protobuf.Timestamp create_time = 1;
	string description = 2;
	string device = 3;
	Instance instance = 4;
	repeated Instance instances = 5;
	google.protobuf.Timestamp latest_snapshot_time = 6;
	string owner = 7;
	string place_group_id = 8;
	int32 size = 9;
	string status = 10;
	google.protobuf.Timestamp status_time = 11;
	int32 sub_code = 12;
	repeated Tag tags = 13;
	string transition_status = 14;
	string volume_id = 15;
	string volume_name = 16;
	int32 volume_type = 17;
}

message NIC {
	google.protobuf.Timestamp create_time = 1;
	string instance_id = 2;
	string nic_id = 3;
	string nic_name = 4;
	string owner = 5;
	string private_ip = 6;
	int32 role = 7;
	string root_user_id = 8;
	string security_group = 9;
	int32 sequence = 10;
	string status = 11;
	google.protobuf.Timestamp status_time = 12;
	repeated Tag tags = 13;
	string vxnet_id = 14;
	EIP eip = 15;
	string transition_status = 16;
	string controller = 17;
	int32 vxnet_type = 18;
	string console_id = 19;
	string resource_id = 20;
}

message KeyPair {
	string description = 1;
	string encrypt_method = 2;
	repeated string instance_ids = 3;
	string keypair_id = 4;
	string keypair_name = 5;
	string pub_key = 6;
	repeated Tag tags = 7;
}

message VxNet {
	int32 available_ip_count = 1;
	google.protobuf.Timestamp create_time = 2;
	string description = 3;
	repeated string instance_ids = 4;
	string owner = 5;
	Router router = 6;
	repeated Tag tags = 7;
	string vpc_router_id = 8;
	string vxnet_id = 9;
	string vxnet_name = 10;
	int32 vxnet_type = 11;
}

message Router {
	google.protobuf.Timestamp create_time = 1;
	string description = 2;
	string dyn_ip_end = 3;
	string dyn_ip_start = 4;
	EIP eip = 5;
	string ip_network = 6;
	int32 is_applied = 7;
	string manager_ip = 8;
	int32 mode = 9;
	string private_ip = 10;
	string router_id = 11;
	string router_name = 12;
	int32 router_type = 13;
	string security_group_id = 14;
	string status = 15;
	google.protobuf.Timestamp status_time = 16;
	repeated Tag tags = 17;
	string transition_status = 18;
	repeated VxNet vxnets = 19;
}

message Instance {
	string alarm_status = 1;
	string cpu_topology = 2;
	google.protobuf.Timestamp create_time = 3;
	string description = 4;
	string device = 5;
	//DHCPOptions      *DHCPOption    `json:"dhcp_options" name:"dhcp_options"`
	//DNSAliases       []*DNSAlias    `json:"dns_aliases" name:"dns_aliases"`
	EIP eip = 8;
	//Extra            *Extra         `json:"extra" name:"extra"`
	string graphics_passwd = 10;
	string graphics_protocol = 11;
	Image image = 12;
	string image_id = 13;
	int32 instance_class = 14;
	string instance_id = 15;
	string instance_name = 16;
	string instance_type = 17;
	repeated string keypair_ids = 18;
	int32 memory_current = 19;
	string private_ip = 20;
	//SecurityGroup    *SecurityGroup `json:"security_group" name:"security_group"`
	string status = 22;
	google.protobuf.Timestamp status_time = 23;
	int32 sub_code = 24;
	repeated Tag tags = 25;
	string transition_status = 26;
	int32 vcpus_current = 27;
	repeated string volume_ids = 28;
	repeated Volume volumes = 29;
	repeated InstanceVxNet vxnets = 30;

	message InstanceVxNet {
		string nic_id = 1;
		string private_ip = 2;
		int32 role = 3;
		string vxnet_id = 4;
		string vxnet_name = 5;
		int32 vxnet_type = 6;
	}
}

message Image {
	string app_billing_id = 1;
	string architecture = 2;
	string billing_id = 3;
	google.protobuf.Timestamp create_time = 4;
	string default_passwd = 5;
	string default_user = 6;
	string description = 7;
	int32 f_resetpwd = 8;
	int32 feature = 9;
	int32 features = 10;
	string hypervisor = 11;
	string image_id = 12;
	string image_name = 13;
	repeated string instance_ids = 14;
	string os_family = 15;
	string owner = 16;
	string platform = 17;
	string processor_type = 18;
	string provider = 19;
	string recommended_type = 20;
	string root_id = 21;
	int32 size = 22;
	string status = 23;
	google.protobuf.Timestamp status_time = 24;
	int32 sub_code = 25;
	string transition_status = 26;
	string ui_type = 27;
	string visibility = 28;
}

message Mongo {
	string alarm_status = 1;
	int32 auto_backup_time = 2;
	int32 auto_minor_ver_upgrade = 3;
	google.protobuf.Timestamp create_time = 4;
	string description = 5;
	google.protobuf.Timestamp latest_snapshot_time = 6;
	string mongo_id = 7;
	string mongo_name = 8;
	int32 mongo_type = 9;
	string mongo_version = 10;
	string status = 11;
	google.protobuf.Timestamp status_time = 12;
	int32 storage_size = 13;
	repeated Tag tags = 14;
	string transition_status = 15;
	VxNet vxnet = 16;
}

message MongoNode {
	string ip = 1;
	string mongo_id = 2;
	string mongo_node_id = 3;
	int32 primary = 4;
	string status = 5;
	string vxnet_id = 6;
}

/*

*/

/*



type Cache struct {
	AutoBackupTime *int `json:"auto_backup_time" name:"auto_backup_time"`
	// CacheClass's available values: 0, 1
	CacheClass            *int    `json:"cache_class" name:"cache_class"`
	CacheID               *string `json:"cache_id" name:"cache_id"`
	CacheName             *string `json:"cache_name" name:"cache_name"`
	CacheParameterGroupID *string `json:"cache_parameter_group_id" name:"cache_parameter_group_id"`
	CachePort             *int    `json:"cache_port" name:"cache_port"`
	CacheSize             *int    `json:"cache_size" name:"cache_size"`
	// CacheType's available values: Redis2.8.17, Memcached1.4.13
	CacheType    *string    `json:"cache_type" name:"cache_type"`
	CacheVersion *string    `json:"cache_version" name:"cache_version"`
	CreateTime   *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description  *string    `json:"description" name:"description"`
	// IsApplied's available values: 0, 1
	IsApplied       *int         `json:"is_applied" name:"is_applied"`
	MasterCount     *int         `json:"master_count" name:"master_count"`
	MaxMemory       *int         `json:"max_memory" name:"max_memory"`
	NodeCount       *int         `json:"node_count" name:"node_count"`
	Nodes           []*CacheNode `json:"nodes" name:"nodes"`
	ReplicateCount  *int         `json:"replicate_count" name:"replicate_count"`
	SecurityGroupID *string      `json:"security_group_id" name:"security_group_id"`
	// Status's available values: pending, active, stopped, suspended, deleted, ceased
	Status     *string    `json:"status" name:"status"`
	StatusTime *time.Time `json:"status_time" name:"status_time" format:"ISO 8601"`
	SubCode    *int       `json:"sub_code" name:"sub_code"`
	Tags       []*Tag     `json:"tags" name:"tags"`
	// TransitionStatus's available values: creating, starting, stopping, updating, suspending, resuming, deleting
	TransitionStatus *string `json:"transition_status" name:"transition_status"`
	VxNet            *VxNet  `json:"vxnet" name:"vxnet"`
}

type CacheNode struct {
	AlarmStatus   *string `json:"alarm_status" name:"alarm_status"`
	CacheID       *string `json:"cache_id" name:"cache_id"`
	CacheNodeID   *string `json:"cache_node_id" name:"cache_node_id"`
	CacheNodeName *string `json:"cache_node_name" name:"cache_node_name"`
	// CacheRole's available values: master, slave
	CacheRole  *string    `json:"cache_role" name:"cache_role"`
	CacheType  *string    `json:"cache_type" name:"cache_type"`
	CreateTime *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	PrivateIP  *string    `json:"private_ip" name:"private_ip"`
	Slaveof    *string    `json:"slaveof" name:"slaveof"`
	// Status's available values: pending, active, down, suspended
	Status     *string    `json:"status" name:"status"`
	StatusTime *time.Time `json:"status_time" name:"status_time" format:"ISO 8601"`
	// TransitionStatus's available values: creating, starting, stopping, updating, suspending, resuming, deleting
	TransitionStatus *string `json:"transition_status" name:"transition_status"`
}

type CacheParameter struct {
	CacheParameterName  *string `json:"cache_parameter_name" name:"cache_parameter_name"` // Required
	CacheParameterType  *string `json:"cache_parameter_type" name:"cache_parameter_type"`
	CacheParameterValue *string `json:"cache_parameter_value" name:"cache_parameter_value"` // Required
	CacheType           *string `json:"cache_type" name:"cache_type"`
	// IsReadonly's available values: 0, 1
	IsReadonly      *int    `json:"is_readonly" name:"is_readonly"`
	IsStatic        *int    `json:"is_static" name:"is_static"`
	OPTName         *string `json:"opt_name" name:"opt_name"`
	ParameterType   *string `json:"parameter_type" name:"parameter_type"`
	ResourceVersion *string `json:"resource_version" name:"resource_version"`
	ValueRange      *string `json:"value_range" name:"value_range"`
}

type CacheParameterGroup struct {
	CacheParameterGroupID   *string    `json:"cache_parameter_group_id" name:"cache_parameter_group_id"`
	CacheParameterGroupName *string    `json:"cache_parameter_group_name" name:"cache_parameter_group_name"`
	CacheType               *string    `json:"cache_type" name:"cache_type"`
	CreateTime              *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description             *string    `json:"description" name:"description"`
	// IsApplied's available values: 0, 1
	IsApplied *int        `json:"is_applied" name:"is_applied"`
	IsDefault *int        `json:"is_default" name:"is_default"`
	Resources []*Resource `json:"resources" name:"resources"`
}

type CachePrivateIP struct {
	CacheNodeID *string `json:"cache_node_id" name:"cache_node_id"`
	// CacheRole's available values: master, slave
	CacheRole  *string `json:"cache_role" name:"cache_role"`
	PrivateIPs *string `json:"private_ips" name:"private_ips"`
}

type Data struct {
	Data  *string `json:"data" name:"data"`
	EIPID *string `json:"eip_id" name:"eip_id"`
}


type DHCPOption struct {
	RouterStaticID *string `json:"router_static_id" name:"router_static_id"`
	Val2           *string `json:"val2" name:"val2"`
}

type DNSAlias struct {
	CreateTime   *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description  *string    `json:"description" name:"description"`
	DNSAliasID   *string    `json:"dns_alias_id" name:"dns_alias_id"`
	DNSAliasName *string    `json:"dns_alias_name" name:"dns_alias_name"`
	DomainName   *string    `json:"domain_name" name:"domain_name"`
	ResourceID   *string    `json:"resource_id" name:"resource_id"`
	Status       *string    `json:"status" name:"status"`
}


type EIPGroup struct {
	EIPGroupID   *string `json:"eip_group_id" name:"eip_group_id"`
	EIPGroupName *string `json:"eip_group_name" name:"eip_group_name"`
}


type Extra struct {
	BlockBus   *string `json:"block_bus" name:"block_bus"`
	BootDev    *string `json:"boot_dev" name:"boot_dev"`
	CPUMax     *int    `json:"cpu_max" name:"cpu_max"`
	CPUModel   *string `json:"cpu_model" name:"cpu_model"`
	Features   *int    `json:"features" name:"features"`
	Hypervisor *string `json:"hypervisor" name:"hypervisor"`
	MemMax     *int    `json:"mem_max" name:"mem_max"`
	NICMqueue  *int    `json:"nic_mqueue" name:"nic_mqueue"`
	NoLimit    *int    `json:"no_limit" name:"no_limit"`
	NoRestrict *int    `json:"no_restrict" name:"no_restrict"`
	OSDiskSize *int    `json:"os_disk_size" name:"os_disk_size"`
	USB        *int    `json:"usb" name:"usb"`
}

type File struct {
	File       *string `json:"file" name:"file"`
	LastModify *string `json:"last_modify" name:"last_modify"`
	Size       *int    `json:"size" name:"size"`
}


type InstanceType struct {
	Description      *string `json:"description" name:"description"`
	InstanceTypeID   *string `json:"instance_type_id" name:"instance_type_id"`
	InstanceTypeName *string `json:"instance_type_name" name:"instance_type_name"`
	MemoryCurrent    *int    `json:"memory_current" name:"memory_current"`
	// Status's available values: available, deprecated
	Status       *string `json:"status" name:"status"`
	VCPUsCurrent *int    `json:"vcpus_current" name:"vcpus_current"`
	ZoneID       *string `json:"zone_id" name:"zone_id"`
}



type LoadBalancer struct {
	Cluster     []*EIP     `json:"cluster" name:"cluster"`
	CreateTime  *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description *string    `json:"description" name:"description"`
	// IsApplied's available values: 0, 1
	IsApplied        *int                    `json:"is_applied" name:"is_applied"`
	Listeners        []*LoadBalancerListener `json:"listeners" name:"listeners"`
	LoadBalancerID   *string                 `json:"loadbalancer_id" name:"loadbalancer_id"`
	LoadBalancerName *string                 `json:"loadbalancer_name" name:"loadbalancer_name"`
	// LoadBalancerType's available values: 0, 1, 2, 3, 4, 5
	LoadBalancerType *int      `json:"loadbalancer_type" name:"loadbalancer_type"`
	PrivateIPs       []*string `json:"private_ips" name:"private_ips"`
	SecurityGroupID  *string   `json:"security_group_id" name:"security_group_id"`
	// Status's available values: pending, active, stopped, suspended, deleted, ceased
	Status     *string    `json:"status" name:"status"`
	StatusTime *time.Time `json:"status_time" name:"status_time" format:"ISO 8601"`
	Tags       []*Tag     `json:"tags" name:"tags"`
	// TransitionStatus's available values: creating, starting, stopping, updating, suspending, resuming, deleting
	TransitionStatus *string `json:"transition_status" name:"transition_status"`
	VxNetID          *string `json:"vxnet_id" name:"vxnet_id"`
}

type LoadBalancerBackend struct {
	CreateTime              *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	LoadBalancerBackendID   *string    `json:"loadbalancer_backend_id" name:"loadbalancer_backend_id"`
	LoadBalancerBackendName *string    `json:"loadbalancer_backend_name" name:"loadbalancer_backend_name"`
	LoadBalancerID          *string    `json:"loadbalancer_id" name:"loadbalancer_id"`
	LoadBalancerListenerID  *string    `json:"loadbalancer_listener_id" name:"loadbalancer_listener_id"`
	LoadBalancerPolicyID    *string    `json:"loadbalancer_policy_id" name:"loadbalancer_policy_id"`
	Port                    *int       `json:"port" name:"port"`
	ResourceID              *string    `json:"resource_id" name:"resource_id"`
	Status                  *string    `json:"status" name:"status"`
	Weight                  *int       `json:"weight" name:"weight"`
}

type LoadBalancerListener struct {
	BackendProtocol *string                `json:"backend_protocol" name:"backend_protocol"`
	Backends        []*LoadBalancerBackend `json:"backends" name:"backends"`
	// BalanceMode's available values: roundrobin, leastconn, source
	BalanceMode              *string    `json:"balance_mode" name:"balance_mode"`
	CreateTime               *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	Forwardfor               *int       `json:"forwardfor" name:"forwardfor"`
	HealthyCheckMethod       *string    `json:"healthy_check_method" name:"healthy_check_method"`
	HealthyCheckOption       *string    `json:"healthy_check_option" name:"healthy_check_option" default:"10|5|2|5"`
	ListenerOption           *int       `json:"listener_option" name:"listener_option"`
	ListenerPort             *int       `json:"listener_port" name:"listener_port"`
	ListenerProtocol         *string    `json:"listener_protocol" name:"listener_protocol"`
	LoadBalancerID           *string    `json:"loadbalancer_id" name:"loadbalancer_id"`
	LoadBalancerListenerID   *string    `json:"loadbalancer_listener_id" name:"loadbalancer_listener_id"`
	LoadBalancerListenerName *string    `json:"loadbalancer_listener_name" name:"loadbalancer_listener_name"`
	ServerCertificateID      *string    `json:"server_certificate_id" name:"server_certificate_id"`
	SessionSticky            *string    `json:"session_sticky" name:"session_sticky"`
}

type LoadBalancerPolicy struct {
	CreateTime *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	// IsApplied's available values: 0, 1
	IsApplied              *int      `json:"is_applied" name:"is_applied"`
	LoadBalancerIDs        []*string `json:"loadbalancer_ids" name:"loadbalancer_ids"`
	LoadBalancerPolicyID   *string   `json:"loadbalancer_policy_id" name:"loadbalancer_policy_id"`
	LoadBalancerPolicyName *string   `json:"loadbalancer_policy_name" name:"loadbalancer_policy_name"`
}

type LoadBalancerPolicyRule struct {
	LoadBalancerPolicyRuleID   *string `json:"loadbalancer_policy_rule_id" name:"loadbalancer_policy_rule_id"`
	LoadBalancerPolicyRuleName *string `json:"loadbalancer_policy_rule_name" name:"loadbalancer_policy_rule_name"`
	RuleType                   *string `json:"rule_type" name:"rule_type"`
	Val                        *string `json:"val" name:"val"`
}

type Meter struct {
	Data     interface{}   `json:"data" name:"data"`
	DataSet  []interface{} `json:"data_set" name:"data_set"`
	MeterID  *string       `json:"meter_id" name:"meter_id"`
	Sequence *int          `json:"sequence" name:"sequence"`
	VxNetID  *string       `json:"vxnet_id" name:"vxnet_id"`
}

func (v *Meter) Validate() error {

	return nil
}


type MongoParameter struct {
	// IsReadonly's available values: 0, 1
	IsReadonly *int `json:"is_readonly" name:"is_readonly"`
	// IsStatic's available values: 0, 1
	IsStatic      *int    `json:"is_static" name:"is_static"`
	OPTName       *string `json:"opt_name" name:"opt_name"`
	ParameterName *string `json:"parameter_name" name:"parameter_name"`
	// ParameterType's available values: string, int, bool
	ParameterType  *string `json:"parameter_type" name:"parameter_type"`
	ParameterValue *string `json:"parameter_value" name:"parameter_value"`
	ResourceType   *string `json:"resource_type" name:"resource_type"`
}

type MongoPrivateIP struct {
	Priority0 *string `json:"priority0" name:"priority0"`
	Replica   *string `json:"replica" name:"replica"`
}


type NICIP struct {
	NICID     *string `json:"nic_id" name:"nic_id"`
	PrivateIP *string `json:"private_ip" name:"private_ip"`
}

type RDB struct {
	// AlarmStatus's available values: ok, alarm, insufficient
	AlarmStatus         *string    `json:"alarm_status" name:"alarm_status"`
	AutoBackupTime      *int       `json:"auto_backup_time" name:"auto_backup_time"`
	AutoMinorVerUpgrade *int       `json:"auto_minor_ver_upgrade" name:"auto_minor_ver_upgrade"`
	CreateTime          *string    `json:"create_time" name:"create_time"`
	Description         *string    `json:"description" name:"description"`
	EngineVersion       *string    `json:"engine_version" name:"engine_version"`
	LatestSnapshotTime  *time.Time `json:"latest_snapshot_time" name:"latest_snapshot_time" format:"ISO 8601"`
	MasterIP            *string    `json:"master_ip" name:"master_ip"`
	RDBEngine           *string    `json:"rdb_engine" name:"rdb_engine"`
	RDBID               *string    `json:"rdb_id" name:"rdb_id"`
	RDBName             *string    `json:"rdb_name" name:"rdb_name"`
	RDBType             *int       `json:"rdb_type" name:"rdb_type"`
	// Status's available values: pending, active, stopped, deleted, suspended, ceased
	Status      *string `json:"status" name:"status"`
	StatusTime  *string `json:"status_time" name:"status_time"`
	StorageSize *int    `json:"storage_size" name:"storage_size"`
	Tags        []*Tag  `json:"tags" name:"tags"`
	// TransitionStatus's available values: creating, stopping, starting, deleting, backup-creating, temp-creating, configuring, switching, invalid-tackling, resizing, suspending, ceasing, instance-ceasing, vxnet-leaving, vxnet-joining
	TransitionStatus *string `json:"transition_status" name:"transition_status"`
	VxNet            *VxNet  `json:"vxnet" name:"vxnet"`
}

type RDBFile struct {
	BinaryLog []*File `json:"binary_log" name:"binary_log"`
	ErrorLog  []*File `json:"error_log" name:"error_log"`
	SlowLog   []*File `json:"slow_log" name:"slow_log"`
}

type RDBParameter struct {
	Family *string `json:"family" name:"family"`
	// IsReadonly's available values: 0, 1
	IsReadonly *int `json:"is_readonly" name:"is_readonly"`
	// IsStatic's available values: 0, 1
	IsStatic    *int    `json:"is_static" name:"is_static"`
	MaxValue    *int    `json:"max_value" name:"max_value"`
	MinValue    *int    `json:"min_value" name:"min_value"`
	OPTName     *string `json:"opt_name" name:"opt_name"`
	SectionName *string `json:"section_name" name:"section_name"`
	VarName     *string `json:"var_name" name:"var_name"`
	VarType     *string `json:"var_type" name:"var_type"`
	VarValue    *string `json:"var_value" name:"var_value"`
}

type RDBParameters struct {
	BindAddress               *string `json:"bind_address" name:"bind_address"`
	BinlogFormat              *string `json:"binlog_format" name:"binlog_format"`
	CharacterSetServer        *string `json:"character_set_server" name:"character_set_server"`
	DataDir                   *string `json:"datadir" name:"datadir"`
	DefaultStorageEngine      *string `json:"default_storage_engine" name:"default_storage_engine"`
	ExpireLogsDays            *int    `json:"expire_logs_days" name:"expire_logs_days"`
	InnoDB                    *string `json:"innodb" name:"innodb"`
	InnoDBBufferPoolInstances *int    `json:"innodb_buffer_pool_instances" name:"innodb_buffer_pool_instances"`
	InnoDBBufferPoolSize      *string `json:"innodb_buffer_pool_size" name:"innodb_buffer_pool_size"`
	InnoDBFilePerTable        *int    `json:"innodb_file_per_table" name:"innodb_file_per_table"`
	InnoDBFlushLogAtTRXCommit *int    `json:"innodb_flush_log_at_trx_commit" name:"innodb_flush_log_at_trx_commit"`
	InnoDBFlushMethod         *string `json:"innodb_flush_method" name:"innodb_flush_method"`
	InnoDBIOCapacity          *int    `json:"innodb_io_capacity" name:"innodb_io_capacity"`
	InnoDBLogBufferSize       *string `json:"innodb_log_buffer_size" name:"innodb_log_buffer_size"`
	InnoDBLogFileSize         *string `json:"innodb_log_file_size" name:"innodb_log_file_size"`
	InnoDBLogFilesInGroup     *int    `json:"innodb_log_files_in_group" name:"innodb_log_files_in_group"`
	InnoDBMaxDirtyPagesPct    *int    `json:"innodb_max_dirty_pages_pct" name:"innodb_max_dirty_pages_pct"`
	InnoDBReadIOThreads       *int    `json:"innodb_read_io_threads" name:"innodb_read_io_threads"`
	InnoDBWriteIOThreads      *int    `json:"innodb_write_io_threads" name:"innodb_write_io_threads"`
	InteractiveTimeout        *int    `json:"interactive_timeout" name:"interactive_timeout"`
	KeyBufferSize             *string `json:"key_buffer_size" name:"key_buffer_size"`
	LogBinIndex               *string `json:"log-bin-index" name:"log-bin-index"`
	LogBin                    *string `json:"log_bin" name:"log_bin"`
	LogError                  *string `json:"log_error" name:"log_error"`
	LogQueriesNotUsingIndexes *string `json:"log_queries_not_using_indexes" name:"log_queries_not_using_indexes"`
	LogSlaveUpdates           *int    `json:"log_slave_updates" name:"log_slave_updates"`
	LongQueryTime             *int    `json:"long_query_time" name:"long_query_time"`
	LowerCaseTableNames       *int    `json:"lower_case_table_names" name:"lower_case_table_names"`
	MaxAllowedPacket          *string `json:"max_allowed_packet" name:"max_allowed_packet"`
	MaxConnectErrors          *int    `json:"max_connect_errors" name:"max_connect_errors"`
	MaxConnections            *int    `json:"max_connections" name:"max_connections"`
	MaxHeapTableSize          *string `json:"max_heap_table_size" name:"max_heap_table_size"`
	OpenFilesLimit            *int    `json:"open_files_limit" name:"open_files_limit"`
	Port                      *int    `json:"port" name:"port"`
	QueryCacheSize            *int    `json:"query_cache_size" name:"query_cache_size"`
	QueryCacheType            *int    `json:"query_cache_type" name:"query_cache_type"`
	RelayLog                  *string `json:"relay_log" name:"relay_log"`
	RelayLogIndex             *string `json:"relay_log_index" name:"relay_log_index"`
	SkipSlaveStart            *int    `json:"skip-slave-start" name:"skip-slave-start"`
	SkipNameResolve           *int    `json:"skip_name_resolve" name:"skip_name_resolve"`
	SlaveExecMode             *string `json:"slave_exec_mode" name:"slave_exec_mode"`
	SlaveNetTimeout           *int    `json:"slave_net_timeout" name:"slave_net_timeout"`
	SlowQueryLog              *int    `json:"slow_query_log" name:"slow_query_log"`
	SlowQueryLogFile          *string `json:"slow_query_log_file" name:"slow_query_log_file"`
	SQLMode                   *string `json:"sql_mode" name:"sql_mode"`
	SyncBinlog                *int    `json:"sync_binlog" name:"sync_binlog"`
	SyncMasterInfo            *int    `json:"sync_master_info" name:"sync_master_info"`
	SyncRelayLog              *int    `json:"sync_relay_log" name:"sync_relay_log"`
	SyncRelayLogInfo          *int    `json:"sync_relay_log_info" name:"sync_relay_log_info"`
	TableOpenCache            *int    `json:"table_open_cache" name:"table_open_cache"`
	ThreadCacheSize           *int    `json:"thread_cache_size" name:"thread_cache_size"`
	TMPTableSize              *string `json:"tmp_table_size" name:"tmp_table_size"`
	TMPDir                    *string `json:"tmpdir" name:"tmpdir"`
	User                      *string `json:"user" name:"user"`
	WaitTimeout               *int    `json:"wait_timeout" name:"wait_timeout"`
}

type RDBPrivateIP struct {
	Master   *string `json:"master" name:"master"`
	TopSlave *string `json:"topslave" name:"topslave"`
}

type Resource struct {
	ResourceID   *string `json:"resource_id" name:"resource_id"`
	ResourceName *string `json:"resource_name" name:"resource_name"`
	ResourceType *string `json:"resource_type" name:"resource_type"`
}

type ResourceTagPair struct {
	ResourceID   *string    `json:"resource_id" name:"resource_id"`
	ResourceType *string    `json:"resource_type" name:"resource_type"`
	Status       *string    `json:"status" name:"status"`
	StatusTime   *time.Time `json:"status_time" name:"status_time" format:"ISO 8601"`
	TagID        *string    `json:"tag_id" name:"tag_id"`
}

type ResourceTypeCount struct {
	Count        *int    `json:"count" name:"count"`
	ResourceType *string `json:"resource_type" name:"resource_type"`
}


type RouterStatic struct {
	CreateTime       *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	RouterID         *string    `json:"router_id" name:"router_id"`
	RouterStaticID   *string    `json:"router_static_id" name:"router_static_id"`
	RouterStaticName *string    `json:"router_static_name" name:"router_static_name"`
	// StaticType's available values: 1, 2, 3, 4, 5, 6, 7, 8
	StaticType *int    `json:"static_type" name:"static_type"`
	Val1       *string `json:"val1" name:"val1"`
	Val2       *string `json:"val2" name:"val2"`
	Val3       *string `json:"val3" name:"val3"`
	Val4       *string `json:"val4" name:"val4"`
	VxNetID    *string `json:"vxnet_id" name:"vxnet_id"`
}

type RouterStaticEntry struct {
	RouterID              *string `json:"router_id" name:"router_id"`
	RouterStaticEntryID   *string `json:"router_static_entry_id" name:"router_static_entry_id"`
	RouterStaticEntryName *string `json:"router_static_entry_name" name:"router_static_entry_name"`
	Val1                  *string `json:"val1" name:"val1"`
	Val2                  *string `json:"val2" name:"val2"`
}

type RouterVxNet struct {
	CreateTime *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	DYNIPEnd   *string    `json:"dyn_ip_end" name:"dyn_ip_end"`
	DYNIPStart *string    `json:"dyn_ip_start" name:"dyn_ip_start"`
	Features   *int       `json:"features" name:"features"`
	IPNetwork  *string    `json:"ip_network" name:"ip_network"`
	ManagerIP  *string    `json:"manager_ip" name:"manager_ip"`
	RouterID   *string    `json:"router_id" name:"router_id"`
	VxNetID    *string    `json:"vxnet_id" name:"vxnet_id"`
}

type S2DefaultParameters struct {
	DefaultValue *string `json:"default_value" name:"default_value"`
	Description  *string `json:"description" name:"description"`
	ParamName    *string `json:"param_name" name:"param_name"`
	ServiceType  *string `json:"service_type" name:"service_type"`
	TargetType   *string `json:"target_type" name:"target_type"`
}

type S2Server struct {
	CreateTime  *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description *string    `json:"description" name:"description"`
	// IsApplied's available values: 0, 1
	IsApplied  *int    `json:"is_applied" name:"is_applied"`
	Name       *string `json:"name" name:"name"`
	PrivateIP  *string `json:"private_ip" name:"private_ip"`
	S2ServerID *string `json:"s2_server_id" name:"s2_server_id"`
	// S2ServerType's available values: 0, 1, 2, 3
	S2ServerType *int `json:"s2_server_type" name:"s2_server_type"`
	// ServiceType's available values: vsan
	ServiceType *string `json:"service_type" name:"service_type"`
	// Status's available values: pending, active, poweroffed, suspended, deleted, ceased
	Status     *string    `json:"status" name:"status"`
	StatusTime *time.Time `json:"status_time" name:"status_time" format:"ISO 8601"`
	Tags       []*Tag     `json:"tags" name:"tags"`
	// TransitionStatus's available values: creating, updating, suspending, resuming, poweroffing
	TransitionStatus *string `json:"transition_status" name:"transition_status"`
	VxNet            *VxNet  `json:"vxnet" name:"vxnet"`
}

type S2SharedTarget struct {
	CreateTime       *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description      *string    `json:"description" name:"description"`
	ExportName       *string    `json:"export_name" name:"export_name"`
	S2ServerID       *string    `json:"s2_server_id" name:"s2_server_id"`
	S2SharedTargetID *string    `json:"s2_shared_target_id" name:"s2_shared_target_id"`
	StatusTime       *time.Time `json:"status_time" name:"status_time" format:"ISO 8601"`
	// TargetType's available values: ISCSI, NFS
	TargetType *string `json:"target_type" name:"target_type"`
}

type SecurityGroup struct {
	CreateTime        *time.Time  `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description       *string     `json:"description" name:"description"`
	IsApplied         *int        `json:"is_applied" name:"is_applied"`
	IsDefault         *int        `json:"is_default" name:"is_default"`
	Resources         []*Resource `json:"resources" name:"resources"`
	SecurityGroupID   *string     `json:"security_group_id" name:"security_group_id"`
	SecurityGroupName *string     `json:"security_group_name" name:"security_group_name"`
	Tags              []*Tag      `json:"tags" name:"tags"`
}

type SecurityGroupIPSet struct {
	CreateTime  *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description *string    `json:"description" name:"description"`
	// IPSetType's available values: 0, 1
	IPSetType              *int    `json:"ipset_type" name:"ipset_type"`
	SecurityGroupIPSetID   *string `json:"security_group_ipset_id" name:"security_group_ipset_id"`
	SecurityGroupIPSetName *string `json:"security_group_ipset_name" name:"security_group_ipset_name"`
	Val                    *string `json:"val" name:"val"`
}

type SecurityGroupRule struct {
	// Action's available values: accept, drop
	Action              *string `json:"action" name:"action"`
	Priority            *int    `json:"priority" name:"priority"`
	Protocol            *string `json:"protocol" name:"protocol"`
	SecurityGroupID     *string `json:"security_group_id" name:"security_group_id"`
	SecurityGroupRuleID *string `json:"security_group_rule_id" name:"security_group_rule_id"`
	Val1                *string `json:"val1" name:"val1"`
	Val2                *string `json:"val2" name:"val2"`
	Val3                *string `json:"val3" name:"val3"`
}

type SecurityGroupSnapshot struct {
	GroupID                 *string              `json:"group_id" name:"group_id"`
	Rules                   []*SecurityGroupRule `json:"rules" name:"rules"`
	SecurityGroupSnapshotID *string              `json:"security_group_snapshot_id" name:"security_group_snapshot_id"`
}

type ServerCertificate struct {
	CertificateContent    *string    `json:"certificate_content" name:"certificate_content"`
	CreateTime            *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description           *string    `json:"description" name:"description"`
	PrivateKey            *string    `json:"private_key" name:"private_key"`
	ServerCertificateID   *string    `json:"server_certificate_id" name:"server_certificate_id"`
	ServerCertificateName *string    `json:"server_certificate_name" name:"server_certificate_name"`
}

type Snapshot struct {
	CreateTime  *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description *string    `json:"description" name:"description"`
	HeadChain   *string    `json:"head_chain" name:"head_chain"`
	// IsHead's available values: 0, 1
	IsHead *int `json:"is_head" name:"is_head"`
	// IsTaken's available values: 0, 1
	IsTaken            *int              `json:"is_taken" name:"is_taken"`
	LatestSnapshotTime *time.Time        `json:"latest_snapshot_time" name:"latest_snapshot_time" format:"ISO 8601"`
	ParentID           *string           `json:"parent_id" name:"parent_id"`
	Provider           *string           `json:"provider" name:"provider"`
	Resource           *Resource         `json:"resource" name:"resource"`
	RootID             *string           `json:"root_id" name:"root_id"`
	Size               *int              `json:"size" name:"size"`
	SnapshotID         *string           `json:"snapshot_id" name:"snapshot_id"`
	SnapshotName       *string           `json:"snapshot_name" name:"snapshot_name"`
	SnapshotResource   *SnapshotResource `json:"snapshot_resource" name:"snapshot_resource"`
	SnapshotTime       *time.Time        `json:"snapshot_time" name:"snapshot_time" format:"ISO 8601"`
	// SnapshotType's available values: 0, 1
	SnapshotType *string `json:"snapshot_type" name:"snapshot_type"`
	// Status's available values: pending, available, suspended, deleted, ceased
	Status     *string    `json:"status" name:"status"`
	StatusTime *time.Time `json:"status_time" name:"status_time" format:"ISO 8601"`
	SubCode    *int       `json:"sub_code" name:"sub_code"`
	Tags       []*Tag     `json:"tags" name:"tags"`
	TotalCount *int       `json:"total_count" name:"total_count"`
	TotalSize  *int       `json:"total_size" name:"total_size"`
	// TransitionStatus's available values: creating, suspending, resuming, deleting, recovering
	TransitionStatus *string `json:"transition_status" name:"transition_status"`
	VirtualSize      *int    `json:"virtual_size" name:"virtual_size"`
	Visibility       *string `json:"visibility" name:"visibility"`
}

type SnapshotResource struct {
	OSFamily *string `json:"os_family" name:"os_family"`
	Platform *string `json:"platform" name:"platform"`
}


type User struct {
	Email  *string `json:"email" name:"email"`
	UserID *string `json:"user_id" name:"user_id"`
}


type Zone struct {
	// Status's available values: active, faulty, defunct
	Status *string `json:"status" name:"status"`
	ZoneID *string `json:"zone_id" name:"zone_id"`
}

*/

