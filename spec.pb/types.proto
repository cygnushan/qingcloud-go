// Copyright 2017 <chaishushan{AT}gmail.com>. All rights reserved.
// Use of this source code is governed by a Apache
// license that can be found in the LICENSE file.

syntax = "proto3";

package spec;

/*



type Cache struct {
	AutoBackupTime *int `json:"auto_backup_time" name:"auto_backup_time"`
	// CacheClass's available values: 0, 1
	CacheClass            *int    `json:"cache_class" name:"cache_class"`
	CacheID               *string `json:"cache_id" name:"cache_id"`
	CacheName             *string `json:"cache_name" name:"cache_name"`
	CacheParameterGroupID *string `json:"cache_parameter_group_id" name:"cache_parameter_group_id"`
	CachePort             *int    `json:"cache_port" name:"cache_port"`
	CacheSize             *int    `json:"cache_size" name:"cache_size"`
	// CacheType's available values: Redis2.8.17, Memcached1.4.13
	CacheType    *string    `json:"cache_type" name:"cache_type"`
	CacheVersion *string    `json:"cache_version" name:"cache_version"`
	CreateTime   *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description  *string    `json:"description" name:"description"`
	// IsApplied's available values: 0, 1
	IsApplied       *int         `json:"is_applied" name:"is_applied"`
	MasterCount     *int         `json:"master_count" name:"master_count"`
	MaxMemory       *int         `json:"max_memory" name:"max_memory"`
	NodeCount       *int         `json:"node_count" name:"node_count"`
	Nodes           []*CacheNode `json:"nodes" name:"nodes"`
	ReplicateCount  *int         `json:"replicate_count" name:"replicate_count"`
	SecurityGroupID *string      `json:"security_group_id" name:"security_group_id"`
	// Status's available values: pending, active, stopped, suspended, deleted, ceased
	Status     *string    `json:"status" name:"status"`
	StatusTime *time.Time `json:"status_time" name:"status_time" format:"ISO 8601"`
	SubCode    *int       `json:"sub_code" name:"sub_code"`
	Tags       []*Tag     `json:"tags" name:"tags"`
	// TransitionStatus's available values: creating, starting, stopping, updating, suspending, resuming, deleting
	TransitionStatus *string `json:"transition_status" name:"transition_status"`
	VxNet            *VxNet  `json:"vxnet" name:"vxnet"`
}

type CacheNode struct {
	AlarmStatus   *string `json:"alarm_status" name:"alarm_status"`
	CacheID       *string `json:"cache_id" name:"cache_id"`
	CacheNodeID   *string `json:"cache_node_id" name:"cache_node_id"`
	CacheNodeName *string `json:"cache_node_name" name:"cache_node_name"`
	// CacheRole's available values: master, slave
	CacheRole  *string    `json:"cache_role" name:"cache_role"`
	CacheType  *string    `json:"cache_type" name:"cache_type"`
	CreateTime *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	PrivateIP  *string    `json:"private_ip" name:"private_ip"`
	Slaveof    *string    `json:"slaveof" name:"slaveof"`
	// Status's available values: pending, active, down, suspended
	Status     *string    `json:"status" name:"status"`
	StatusTime *time.Time `json:"status_time" name:"status_time" format:"ISO 8601"`
	// TransitionStatus's available values: creating, starting, stopping, updating, suspending, resuming, deleting
	TransitionStatus *string `json:"transition_status" name:"transition_status"`
}

type CacheParameter struct {
	CacheParameterName  *string `json:"cache_parameter_name" name:"cache_parameter_name"` // Required
	CacheParameterType  *string `json:"cache_parameter_type" name:"cache_parameter_type"`
	CacheParameterValue *string `json:"cache_parameter_value" name:"cache_parameter_value"` // Required
	CacheType           *string `json:"cache_type" name:"cache_type"`
	// IsReadonly's available values: 0, 1
	IsReadonly      *int    `json:"is_readonly" name:"is_readonly"`
	IsStatic        *int    `json:"is_static" name:"is_static"`
	OPTName         *string `json:"opt_name" name:"opt_name"`
	ParameterType   *string `json:"parameter_type" name:"parameter_type"`
	ResourceVersion *string `json:"resource_version" name:"resource_version"`
	ValueRange      *string `json:"value_range" name:"value_range"`
}

type CacheParameterGroup struct {
	CacheParameterGroupID   *string    `json:"cache_parameter_group_id" name:"cache_parameter_group_id"`
	CacheParameterGroupName *string    `json:"cache_parameter_group_name" name:"cache_parameter_group_name"`
	CacheType               *string    `json:"cache_type" name:"cache_type"`
	CreateTime              *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description             *string    `json:"description" name:"description"`
	// IsApplied's available values: 0, 1
	IsApplied *int        `json:"is_applied" name:"is_applied"`
	IsDefault *int        `json:"is_default" name:"is_default"`
	Resources []*Resource `json:"resources" name:"resources"`
}

type CachePrivateIP struct {
	CacheNodeID *string `json:"cache_node_id" name:"cache_node_id"`
	// CacheRole's available values: master, slave
	CacheRole  *string `json:"cache_role" name:"cache_role"`
	PrivateIPs *string `json:"private_ips" name:"private_ips"`
}

type Data struct {
	Data  *string `json:"data" name:"data"`
	EIPID *string `json:"eip_id" name:"eip_id"`
}


type DHCPOption struct {
	RouterStaticID *string `json:"router_static_id" name:"router_static_id"`
	Val2           *string `json:"val2" name:"val2"`
}

type DNSAlias struct {
	CreateTime   *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description  *string    `json:"description" name:"description"`
	DNSAliasID   *string    `json:"dns_alias_id" name:"dns_alias_id"`
	DNSAliasName *string    `json:"dns_alias_name" name:"dns_alias_name"`
	DomainName   *string    `json:"domain_name" name:"domain_name"`
	ResourceID   *string    `json:"resource_id" name:"resource_id"`
	Status       *string    `json:"status" name:"status"`
}

type EIP struct {
	AlarmStatus   *string `json:"alarm_status" name:"alarm_status"`
	AssociateMode *int    `json:"associate_mode" name:"associate_mode"`
	Bandwidth     *int    `json:"bandwidth" name:"bandwidth"`
	// BillingMode's available values: bandwidth, traffic
	BillingMode *string      `json:"billing_mode" name:"billing_mode"`
	CreateTime  *time.Time   `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description *string      `json:"description" name:"description"`
	EIPAddr     *string      `json:"eip_addr" name:"eip_addr"`
	EIPGroup    *EIPGroup    `json:"eip_group" name:"eip_group"`
	EIPID       *string      `json:"eip_id" name:"eip_id"`
	EIPName     *string      `json:"eip_name" name:"eip_name"`
	ICPCodes    *string      `json:"icp_codes" name:"icp_codes"`
	NeedICP     *int         `json:"need_icp" name:"need_icp"`
	Resource    *EIPResource `json:"resource" name:"resource"`
	// Status's available values: pending, available, associated, suspended, released, ceased
	Status     *string    `json:"status" name:"status"`
	StatusTime *time.Time `json:"status_time" name:"status_time" format:"ISO 8601"`
	SubCode    *int       `json:"sub_code" name:"sub_code"`
	Tags       []*Tag     `json:"tags" name:"tags"`
	// TransitionStatus's available values: associating, dissociating, suspending, resuming, releasing
	TransitionStatus *string `json:"transition_status" name:"transition_status"`
}

type EIPGroup struct {
	EIPGroupID   *string `json:"eip_group_id" name:"eip_group_id"`
	EIPGroupName *string `json:"eip_group_name" name:"eip_group_name"`
}

type EIPResource struct {
	ResourceID   *string `json:"resource_id" name:"resource_id"`
	ResourceName *string `json:"resource_name" name:"resource_name"`
	ResourceType *string `json:"resource_type" name:"resource_type"`
}

type Extra struct {
	BlockBus   *string `json:"block_bus" name:"block_bus"`
	BootDev    *string `json:"boot_dev" name:"boot_dev"`
	CPUMax     *int    `json:"cpu_max" name:"cpu_max"`
	CPUModel   *string `json:"cpu_model" name:"cpu_model"`
	Features   *int    `json:"features" name:"features"`
	Hypervisor *string `json:"hypervisor" name:"hypervisor"`
	MemMax     *int    `json:"mem_max" name:"mem_max"`
	NICMqueue  *int    `json:"nic_mqueue" name:"nic_mqueue"`
	NoLimit    *int    `json:"no_limit" name:"no_limit"`
	NoRestrict *int    `json:"no_restrict" name:"no_restrict"`
	OSDiskSize *int    `json:"os_disk_size" name:"os_disk_size"`
	USB        *int    `json:"usb" name:"usb"`
}

type File struct {
	File       *string `json:"file" name:"file"`
	LastModify *string `json:"last_modify" name:"last_modify"`
	Size       *int    `json:"size" name:"size"`
}

type Image struct {
	AppBillingID  *string    `json:"app_billing_id" name:"app_billing_id"`
	Architecture  *string    `json:"architecture" name:"architecture"`
	BillingID     *string    `json:"billing_id" name:"billing_id"`
	CreateTime    *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	DefaultPasswd *string    `json:"default_passwd" name:"default_passwd"`
	DefaultUser   *string    `json:"default_user" name:"default_user"`
	Description   *string    `json:"description" name:"description"`
	FResetpwd     *int       `json:"f_resetpwd" name:"f_resetpwd"`
	Feature       *int       `json:"feature" name:"feature"`
	Features      *int       `json:"features" name:"features"`
	Hypervisor    *string    `json:"hypervisor" name:"hypervisor"`
	ImageID       *string    `json:"image_id" name:"image_id"`
	ImageName     *string    `json:"image_name" name:"image_name"`
	InstanceIDs   []*string  `json:"instance_ids" name:"instance_ids"`
	OSFamily      *string    `json:"os_family" name:"os_family"`
	Owner         *string    `json:"owner" name:"owner"`
	// Platform's available values: linux, windows
	Platform *string `json:"platform" name:"platform"`
	// ProcessorType's available values: 64bit, 32bit
	ProcessorType *string `json:"processor_type" name:"processor_type"`
	// Provider's available values: system, self
	Provider        *string `json:"provider" name:"provider"`
	RecommendedType *string `json:"recommended_type" name:"recommended_type"`
	RootID          *string `json:"root_id" name:"root_id"`
	Size            *int    `json:"size" name:"size"`
	// Status's available values: pending, available, deprecated, suspended, deleted, ceased
	Status     *string    `json:"status" name:"status"`
	StatusTime *time.Time `json:"status_time" name:"status_time" format:"ISO 8601"`
	SubCode    *int       `json:"sub_code" name:"sub_code"`
	// TransitionStatus's available values: creating, suspending, resuming, deleting, recovering
	TransitionStatus *string `json:"transition_status" name:"transition_status"`
	UIType           *string `json:"ui_type" name:"ui_type"`
	// Visibility's available values: public, private
	Visibility *string `json:"visibility" name:"visibility"`
}

type ImageUser struct {
	CreateTime *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	ImageID    *string    `json:"image_id" name:"image_id"`
	User       *User      `json:"user" name:"user"`
}

type Instance struct {
	AlarmStatus      *string        `json:"alarm_status" name:"alarm_status"`
	CPUTopology      *string        `json:"cpu_topology" name:"cpu_topology"`
	CreateTime       *time.Time     `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description      *string        `json:"description" name:"description"`
	Device           *string        `json:"device" name:"device"`
	DHCPOptions      *DHCPOption    `json:"dhcp_options" name:"dhcp_options"`
	DNSAliases       []*DNSAlias    `json:"dns_aliases" name:"dns_aliases"`
	EIP              *EIP           `json:"eip" name:"eip"`
	Extra            *Extra         `json:"extra" name:"extra"`
	GraphicsPasswd   *string        `json:"graphics_passwd" name:"graphics_passwd"`
	GraphicsProtocol *string        `json:"graphics_protocol" name:"graphics_protocol"`
	Image            *Image         `json:"image" name:"image"`
	ImageID          *string        `json:"image_id" name:"image_id"`
	InstanceClass    *int           `json:"instance_class" name:"instance_class"`
	InstanceID       *string        `json:"instance_id" name:"instance_id"`
	InstanceName     *string        `json:"instance_name" name:"instance_name"`
	InstanceType     *string        `json:"instance_type" name:"instance_type"`
	KeyPairIDs       []*string      `json:"keypair_ids" name:"keypair_ids"`
	MemoryCurrent    *int           `json:"memory_current" name:"memory_current"`
	PrivateIP        *string        `json:"private_ip" name:"private_ip"`
	SecurityGroup    *SecurityGroup `json:"security_group" name:"security_group"`
	// Status's available values: pending, running, stopped, suspended, terminated, ceased
	Status     *string    `json:"status" name:"status"`
	StatusTime *time.Time `json:"status_time" name:"status_time" format:"ISO 8601"`
	SubCode    *int       `json:"sub_code" name:"sub_code"`
	Tags       []*Tag     `json:"tags" name:"tags"`
	// TransitionStatus's available values: creating, starting, stopping, restarting, suspending, resuming, terminating, recovering, resetting
	TransitionStatus *string          `json:"transition_status" name:"transition_status"`
	VCPUsCurrent     *int             `json:"vcpus_current" name:"vcpus_current"`
	VolumeIDs        []*string        `json:"volume_ids" name:"volume_ids"`
	Volumes          []*Volume        `json:"volumes" name:"volumes"`
	VxNets           []*InstanceVxNet `json:"vxnets" name:"vxnets"`
}

type InstanceType struct {
	Description      *string `json:"description" name:"description"`
	InstanceTypeID   *string `json:"instance_type_id" name:"instance_type_id"`
	InstanceTypeName *string `json:"instance_type_name" name:"instance_type_name"`
	MemoryCurrent    *int    `json:"memory_current" name:"memory_current"`
	// Status's available values: available, deprecated
	Status       *string `json:"status" name:"status"`
	VCPUsCurrent *int    `json:"vcpus_current" name:"vcpus_current"`
	ZoneID       *string `json:"zone_id" name:"zone_id"`
}

type InstanceVxNet struct {
	NICID     *string `json:"nic_id" name:"nic_id"`
	PrivateIP *string `json:"private_ip" name:"private_ip"`
	Role      *int    `json:"role" name:"role"`
	VxNetID   *string `json:"vxnet_id" name:"vxnet_id"`
	VxNetName *string `json:"vxnet_name" name:"vxnet_name"`
	// VxNetType's available values: 0, 1
	VxNetType *int `json:"vxnet_type" name:"vxnet_type"`
}

type Job struct {
	CreateTime  *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	JobAction   *string    `json:"job_action" name:"job_action"`
	JobID       *string    `json:"job_id" name:"job_id"`
	Owner       *string    `json:"owner" name:"owner"`
	ResourceIDs *string    `json:"resource_ids" name:"resource_ids"`
	// Status's available values: pending, working, failed, successful, done with failure
	Status     *string    `json:"status" name:"status"`
	StatusTime *time.Time `json:"status_time" name:"status_time" format:"ISO 8601"`
}

type KeyPair struct {
	Description *string `json:"description" name:"description"`
	// EncryptMethod's available values: ssh-rsa, ssh-dss
	EncryptMethod *string   `json:"encrypt_method" name:"encrypt_method"`
	InstanceIDs   []*string `json:"instance_ids" name:"instance_ids"`
	KeyPairID     *string   `json:"keypair_id" name:"keypair_id"`
	KeyPairName   *string   `json:"keypair_name" name:"keypair_name"`
	PubKey        *string   `json:"pub_key" name:"pub_key"`
	Tags          []*Tag    `json:"tags" name:"tags"`
}

type LoadBalancer struct {
	Cluster     []*EIP     `json:"cluster" name:"cluster"`
	CreateTime  *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description *string    `json:"description" name:"description"`
	// IsApplied's available values: 0, 1
	IsApplied        *int                    `json:"is_applied" name:"is_applied"`
	Listeners        []*LoadBalancerListener `json:"listeners" name:"listeners"`
	LoadBalancerID   *string                 `json:"loadbalancer_id" name:"loadbalancer_id"`
	LoadBalancerName *string                 `json:"loadbalancer_name" name:"loadbalancer_name"`
	// LoadBalancerType's available values: 0, 1, 2, 3, 4, 5
	LoadBalancerType *int      `json:"loadbalancer_type" name:"loadbalancer_type"`
	PrivateIPs       []*string `json:"private_ips" name:"private_ips"`
	SecurityGroupID  *string   `json:"security_group_id" name:"security_group_id"`
	// Status's available values: pending, active, stopped, suspended, deleted, ceased
	Status     *string    `json:"status" name:"status"`
	StatusTime *time.Time `json:"status_time" name:"status_time" format:"ISO 8601"`
	Tags       []*Tag     `json:"tags" name:"tags"`
	// TransitionStatus's available values: creating, starting, stopping, updating, suspending, resuming, deleting
	TransitionStatus *string `json:"transition_status" name:"transition_status"`
	VxNetID          *string `json:"vxnet_id" name:"vxnet_id"`
}

type LoadBalancerBackend struct {
	CreateTime              *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	LoadBalancerBackendID   *string    `json:"loadbalancer_backend_id" name:"loadbalancer_backend_id"`
	LoadBalancerBackendName *string    `json:"loadbalancer_backend_name" name:"loadbalancer_backend_name"`
	LoadBalancerID          *string    `json:"loadbalancer_id" name:"loadbalancer_id"`
	LoadBalancerListenerID  *string    `json:"loadbalancer_listener_id" name:"loadbalancer_listener_id"`
	LoadBalancerPolicyID    *string    `json:"loadbalancer_policy_id" name:"loadbalancer_policy_id"`
	Port                    *int       `json:"port" name:"port"`
	ResourceID              *string    `json:"resource_id" name:"resource_id"`
	Status                  *string    `json:"status" name:"status"`
	Weight                  *int       `json:"weight" name:"weight"`
}

type LoadBalancerListener struct {
	BackendProtocol *string                `json:"backend_protocol" name:"backend_protocol"`
	Backends        []*LoadBalancerBackend `json:"backends" name:"backends"`
	// BalanceMode's available values: roundrobin, leastconn, source
	BalanceMode              *string    `json:"balance_mode" name:"balance_mode"`
	CreateTime               *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	Forwardfor               *int       `json:"forwardfor" name:"forwardfor"`
	HealthyCheckMethod       *string    `json:"healthy_check_method" name:"healthy_check_method"`
	HealthyCheckOption       *string    `json:"healthy_check_option" name:"healthy_check_option" default:"10|5|2|5"`
	ListenerOption           *int       `json:"listener_option" name:"listener_option"`
	ListenerPort             *int       `json:"listener_port" name:"listener_port"`
	ListenerProtocol         *string    `json:"listener_protocol" name:"listener_protocol"`
	LoadBalancerID           *string    `json:"loadbalancer_id" name:"loadbalancer_id"`
	LoadBalancerListenerID   *string    `json:"loadbalancer_listener_id" name:"loadbalancer_listener_id"`
	LoadBalancerListenerName *string    `json:"loadbalancer_listener_name" name:"loadbalancer_listener_name"`
	ServerCertificateID      *string    `json:"server_certificate_id" name:"server_certificate_id"`
	SessionSticky            *string    `json:"session_sticky" name:"session_sticky"`
}

type LoadBalancerPolicy struct {
	CreateTime *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	// IsApplied's available values: 0, 1
	IsApplied              *int      `json:"is_applied" name:"is_applied"`
	LoadBalancerIDs        []*string `json:"loadbalancer_ids" name:"loadbalancer_ids"`
	LoadBalancerPolicyID   *string   `json:"loadbalancer_policy_id" name:"loadbalancer_policy_id"`
	LoadBalancerPolicyName *string   `json:"loadbalancer_policy_name" name:"loadbalancer_policy_name"`
}

type LoadBalancerPolicyRule struct {
	LoadBalancerPolicyRuleID   *string `json:"loadbalancer_policy_rule_id" name:"loadbalancer_policy_rule_id"`
	LoadBalancerPolicyRuleName *string `json:"loadbalancer_policy_rule_name" name:"loadbalancer_policy_rule_name"`
	RuleType                   *string `json:"rule_type" name:"rule_type"`
	Val                        *string `json:"val" name:"val"`
}

type Meter struct {
	Data     interface{}   `json:"data" name:"data"`
	DataSet  []interface{} `json:"data_set" name:"data_set"`
	MeterID  *string       `json:"meter_id" name:"meter_id"`
	Sequence *int          `json:"sequence" name:"sequence"`
	VxNetID  *string       `json:"vxnet_id" name:"vxnet_id"`
}

func (v *Meter) Validate() error {

	return nil
}

type Mongo struct {
	// AlarmStatus's available values: ok, alarm, insufficient
	AlarmStatus         *string    `json:"alarm_status" name:"alarm_status"`
	AutoBackupTime      *int       `json:"auto_backup_time" name:"auto_backup_time"`
	AutoMinorVerUpgrade *int       `json:"auto_minor_ver_upgrade" name:"auto_minor_ver_upgrade"`
	CreateTime          *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description         *string    `json:"description" name:"description"`
	LatestSnapshotTime  *time.Time `json:"latest_snapshot_time" name:"latest_snapshot_time" format:"ISO 8601"`
	MongoID             *string    `json:"mongo_id" name:"mongo_id"`
	MongoName           *string    `json:"mongo_name" name:"mongo_name"`
	MongoType           *int       `json:"mongo_type" name:"mongo_type"`
	MongoVersion        *string    `json:"mongo_version" name:"mongo_version"`
	// Status's available values: pending, active, stopped, deleted, suspended, ceased
	Status      *string    `json:"status" name:"status"`
	StatusTime  *time.Time `json:"status_time" name:"status_time" format:"ISO 8601"`
	StorageSize *int       `json:"storage_size" name:"storage_size"`
	Tags        []*Tag     `json:"tags" name:"tags"`
	// TransitionStatus's available values: creating, stopping, starting, deleting, resizing, suspending, vxnet-changing, snapshot-creating, instances-adding, instances-removing, pg-applying
	TransitionStatus *string `json:"transition_status" name:"transition_status"`
	VxNet            *VxNet  `json:"vxnet" name:"vxnet"`
}

type MongoNode struct {
	IP          *string `json:"ip" name:"ip"`
	MongoID     *string `json:"mongo_id" name:"mongo_id"`
	MongoNodeID *string `json:"mongo_node_id" name:"mongo_node_id"`
	Primary     *int    `json:"primary" name:"primary"`
	Status      *string `json:"status" name:"status"`
	VxNetID     *string `json:"vxnet_id" name:"vxnet_id"`
}

type MongoParameter struct {
	// IsReadonly's available values: 0, 1
	IsReadonly *int `json:"is_readonly" name:"is_readonly"`
	// IsStatic's available values: 0, 1
	IsStatic      *int    `json:"is_static" name:"is_static"`
	OPTName       *string `json:"opt_name" name:"opt_name"`
	ParameterName *string `json:"parameter_name" name:"parameter_name"`
	// ParameterType's available values: string, int, bool
	ParameterType  *string `json:"parameter_type" name:"parameter_type"`
	ParameterValue *string `json:"parameter_value" name:"parameter_value"`
	ResourceType   *string `json:"resource_type" name:"resource_type"`
}

type MongoPrivateIP struct {
	Priority0 *string `json:"priority0" name:"priority0"`
	Replica   *string `json:"replica" name:"replica"`
}

type NIC struct {
	CreateTime    *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	InstanceID    *string    `json:"instance_id" name:"instance_id"`
	NICID         *string    `json:"nic_id" name:"nic_id"`
	NICName       *string    `json:"nic_name" name:"nic_name"`
	Owner         *string    `json:"owner" name:"owner"`
	PrivateIP     *string    `json:"private_ip" name:"private_ip"`
	Role          *int       `json:"role" name:"role"`
	RootUserID    *string    `json:"root_user_id" name:"root_user_id"`
	SecurityGroup *string    `json:"security_group" name:"security_group"`
	Sequence      *int       `json:"sequence" name:"sequence"`
	// Status's available values: available, in-use
	Status     *string    `json:"status" name:"status"`
	StatusTime *time.Time `json:"status_time" name:"status_time" format:"ISO 8601"`
	Tags       []*Tag     `json:"tags" name:"tags"`
	VxNetID    *string    `json:"vxnet_id" name:"vxnet_id"`
}

type NICIP struct {
	NICID     *string `json:"nic_id" name:"nic_id"`
	PrivateIP *string `json:"private_ip" name:"private_ip"`
}

type RDB struct {
	// AlarmStatus's available values: ok, alarm, insufficient
	AlarmStatus         *string    `json:"alarm_status" name:"alarm_status"`
	AutoBackupTime      *int       `json:"auto_backup_time" name:"auto_backup_time"`
	AutoMinorVerUpgrade *int       `json:"auto_minor_ver_upgrade" name:"auto_minor_ver_upgrade"`
	CreateTime          *string    `json:"create_time" name:"create_time"`
	Description         *string    `json:"description" name:"description"`
	EngineVersion       *string    `json:"engine_version" name:"engine_version"`
	LatestSnapshotTime  *time.Time `json:"latest_snapshot_time" name:"latest_snapshot_time" format:"ISO 8601"`
	MasterIP            *string    `json:"master_ip" name:"master_ip"`
	RDBEngine           *string    `json:"rdb_engine" name:"rdb_engine"`
	RDBID               *string    `json:"rdb_id" name:"rdb_id"`
	RDBName             *string    `json:"rdb_name" name:"rdb_name"`
	RDBType             *int       `json:"rdb_type" name:"rdb_type"`
	// Status's available values: pending, active, stopped, deleted, suspended, ceased
	Status      *string `json:"status" name:"status"`
	StatusTime  *string `json:"status_time" name:"status_time"`
	StorageSize *int    `json:"storage_size" name:"storage_size"`
	Tags        []*Tag  `json:"tags" name:"tags"`
	// TransitionStatus's available values: creating, stopping, starting, deleting, backup-creating, temp-creating, configuring, switching, invalid-tackling, resizing, suspending, ceasing, instance-ceasing, vxnet-leaving, vxnet-joining
	TransitionStatus *string `json:"transition_status" name:"transition_status"`
	VxNet            *VxNet  `json:"vxnet" name:"vxnet"`
}

type RDBFile struct {
	BinaryLog []*File `json:"binary_log" name:"binary_log"`
	ErrorLog  []*File `json:"error_log" name:"error_log"`
	SlowLog   []*File `json:"slow_log" name:"slow_log"`
}

type RDBParameter struct {
	Family *string `json:"family" name:"family"`
	// IsReadonly's available values: 0, 1
	IsReadonly *int `json:"is_readonly" name:"is_readonly"`
	// IsStatic's available values: 0, 1
	IsStatic    *int    `json:"is_static" name:"is_static"`
	MaxValue    *int    `json:"max_value" name:"max_value"`
	MinValue    *int    `json:"min_value" name:"min_value"`
	OPTName     *string `json:"opt_name" name:"opt_name"`
	SectionName *string `json:"section_name" name:"section_name"`
	VarName     *string `json:"var_name" name:"var_name"`
	VarType     *string `json:"var_type" name:"var_type"`
	VarValue    *string `json:"var_value" name:"var_value"`
}

type RDBParameters struct {
	BindAddress               *string `json:"bind_address" name:"bind_address"`
	BinlogFormat              *string `json:"binlog_format" name:"binlog_format"`
	CharacterSetServer        *string `json:"character_set_server" name:"character_set_server"`
	DataDir                   *string `json:"datadir" name:"datadir"`
	DefaultStorageEngine      *string `json:"default_storage_engine" name:"default_storage_engine"`
	ExpireLogsDays            *int    `json:"expire_logs_days" name:"expire_logs_days"`
	InnoDB                    *string `json:"innodb" name:"innodb"`
	InnoDBBufferPoolInstances *int    `json:"innodb_buffer_pool_instances" name:"innodb_buffer_pool_instances"`
	InnoDBBufferPoolSize      *string `json:"innodb_buffer_pool_size" name:"innodb_buffer_pool_size"`
	InnoDBFilePerTable        *int    `json:"innodb_file_per_table" name:"innodb_file_per_table"`
	InnoDBFlushLogAtTRXCommit *int    `json:"innodb_flush_log_at_trx_commit" name:"innodb_flush_log_at_trx_commit"`
	InnoDBFlushMethod         *string `json:"innodb_flush_method" name:"innodb_flush_method"`
	InnoDBIOCapacity          *int    `json:"innodb_io_capacity" name:"innodb_io_capacity"`
	InnoDBLogBufferSize       *string `json:"innodb_log_buffer_size" name:"innodb_log_buffer_size"`
	InnoDBLogFileSize         *string `json:"innodb_log_file_size" name:"innodb_log_file_size"`
	InnoDBLogFilesInGroup     *int    `json:"innodb_log_files_in_group" name:"innodb_log_files_in_group"`
	InnoDBMaxDirtyPagesPct    *int    `json:"innodb_max_dirty_pages_pct" name:"innodb_max_dirty_pages_pct"`
	InnoDBReadIOThreads       *int    `json:"innodb_read_io_threads" name:"innodb_read_io_threads"`
	InnoDBWriteIOThreads      *int    `json:"innodb_write_io_threads" name:"innodb_write_io_threads"`
	InteractiveTimeout        *int    `json:"interactive_timeout" name:"interactive_timeout"`
	KeyBufferSize             *string `json:"key_buffer_size" name:"key_buffer_size"`
	LogBinIndex               *string `json:"log-bin-index" name:"log-bin-index"`
	LogBin                    *string `json:"log_bin" name:"log_bin"`
	LogError                  *string `json:"log_error" name:"log_error"`
	LogQueriesNotUsingIndexes *string `json:"log_queries_not_using_indexes" name:"log_queries_not_using_indexes"`
	LogSlaveUpdates           *int    `json:"log_slave_updates" name:"log_slave_updates"`
	LongQueryTime             *int    `json:"long_query_time" name:"long_query_time"`
	LowerCaseTableNames       *int    `json:"lower_case_table_names" name:"lower_case_table_names"`
	MaxAllowedPacket          *string `json:"max_allowed_packet" name:"max_allowed_packet"`
	MaxConnectErrors          *int    `json:"max_connect_errors" name:"max_connect_errors"`
	MaxConnections            *int    `json:"max_connections" name:"max_connections"`
	MaxHeapTableSize          *string `json:"max_heap_table_size" name:"max_heap_table_size"`
	OpenFilesLimit            *int    `json:"open_files_limit" name:"open_files_limit"`
	Port                      *int    `json:"port" name:"port"`
	QueryCacheSize            *int    `json:"query_cache_size" name:"query_cache_size"`
	QueryCacheType            *int    `json:"query_cache_type" name:"query_cache_type"`
	RelayLog                  *string `json:"relay_log" name:"relay_log"`
	RelayLogIndex             *string `json:"relay_log_index" name:"relay_log_index"`
	SkipSlaveStart            *int    `json:"skip-slave-start" name:"skip-slave-start"`
	SkipNameResolve           *int    `json:"skip_name_resolve" name:"skip_name_resolve"`
	SlaveExecMode             *string `json:"slave_exec_mode" name:"slave_exec_mode"`
	SlaveNetTimeout           *int    `json:"slave_net_timeout" name:"slave_net_timeout"`
	SlowQueryLog              *int    `json:"slow_query_log" name:"slow_query_log"`
	SlowQueryLogFile          *string `json:"slow_query_log_file" name:"slow_query_log_file"`
	SQLMode                   *string `json:"sql_mode" name:"sql_mode"`
	SyncBinlog                *int    `json:"sync_binlog" name:"sync_binlog"`
	SyncMasterInfo            *int    `json:"sync_master_info" name:"sync_master_info"`
	SyncRelayLog              *int    `json:"sync_relay_log" name:"sync_relay_log"`
	SyncRelayLogInfo          *int    `json:"sync_relay_log_info" name:"sync_relay_log_info"`
	TableOpenCache            *int    `json:"table_open_cache" name:"table_open_cache"`
	ThreadCacheSize           *int    `json:"thread_cache_size" name:"thread_cache_size"`
	TMPTableSize              *string `json:"tmp_table_size" name:"tmp_table_size"`
	TMPDir                    *string `json:"tmpdir" name:"tmpdir"`
	User                      *string `json:"user" name:"user"`
	WaitTimeout               *int    `json:"wait_timeout" name:"wait_timeout"`
}

type RDBPrivateIP struct {
	Master   *string `json:"master" name:"master"`
	TopSlave *string `json:"topslave" name:"topslave"`
}

type Resource struct {
	ResourceID   *string `json:"resource_id" name:"resource_id"`
	ResourceName *string `json:"resource_name" name:"resource_name"`
	ResourceType *string `json:"resource_type" name:"resource_type"`
}

type ResourceTagPair struct {
	ResourceID   *string    `json:"resource_id" name:"resource_id"`
	ResourceType *string    `json:"resource_type" name:"resource_type"`
	Status       *string    `json:"status" name:"status"`
	StatusTime   *time.Time `json:"status_time" name:"status_time" format:"ISO 8601"`
	TagID        *string    `json:"tag_id" name:"tag_id"`
}

type ResourceTypeCount struct {
	Count        *int    `json:"count" name:"count"`
	ResourceType *string `json:"resource_type" name:"resource_type"`
}

type Router struct {
	CreateTime  *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description *string    `json:"description" name:"description"`
	DYNIPEnd    *string    `json:"dyn_ip_end" name:"dyn_ip_end"`
	DYNIPStart  *string    `json:"dyn_ip_start" name:"dyn_ip_start"`
	EIP         *EIP       `json:"eip" name:"eip"`
	IPNetwork   *string    `json:"ip_network" name:"ip_network"`
	// IsApplied's available values: 0, 1
	IsApplied  *int    `json:"is_applied" name:"is_applied"`
	ManagerIP  *string `json:"manager_ip" name:"manager_ip"`
	Mode       *int    `json:"mode" name:"mode"`
	PrivateIP  *string `json:"private_ip" name:"private_ip"`
	RouterID   *string `json:"router_id" name:"router_id"`
	RouterName *string `json:"router_name" name:"router_name"`
	// RouterType's available values: 1
	RouterType      *int    `json:"router_type" name:"router_type"`
	SecurityGroupID *string `json:"security_group_id" name:"security_group_id"`
	// Status's available values: pending, active, poweroffed, suspended, deleted, ceased
	Status     *string    `json:"status" name:"status"`
	StatusTime *time.Time `json:"status_time" name:"status_time" format:"ISO 8601"`
	Tags       []*Tag     `json:"tags" name:"tags"`
	// TransitionStatus's available values: creating, updating, suspending, resuming, poweroffing, poweroning, deleting
	TransitionStatus *string  `json:"transition_status" name:"transition_status"`
	VxNets           []*VxNet `json:"vxnets" name:"vxnets"`
}

type RouterStatic struct {
	CreateTime       *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	RouterID         *string    `json:"router_id" name:"router_id"`
	RouterStaticID   *string    `json:"router_static_id" name:"router_static_id"`
	RouterStaticName *string    `json:"router_static_name" name:"router_static_name"`
	// StaticType's available values: 1, 2, 3, 4, 5, 6, 7, 8
	StaticType *int    `json:"static_type" name:"static_type"`
	Val1       *string `json:"val1" name:"val1"`
	Val2       *string `json:"val2" name:"val2"`
	Val3       *string `json:"val3" name:"val3"`
	Val4       *string `json:"val4" name:"val4"`
	VxNetID    *string `json:"vxnet_id" name:"vxnet_id"`
}

type RouterStaticEntry struct {
	RouterID              *string `json:"router_id" name:"router_id"`
	RouterStaticEntryID   *string `json:"router_static_entry_id" name:"router_static_entry_id"`
	RouterStaticEntryName *string `json:"router_static_entry_name" name:"router_static_entry_name"`
	Val1                  *string `json:"val1" name:"val1"`
	Val2                  *string `json:"val2" name:"val2"`
}

type RouterVxNet struct {
	CreateTime *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	DYNIPEnd   *string    `json:"dyn_ip_end" name:"dyn_ip_end"`
	DYNIPStart *string    `json:"dyn_ip_start" name:"dyn_ip_start"`
	Features   *int       `json:"features" name:"features"`
	IPNetwork  *string    `json:"ip_network" name:"ip_network"`
	ManagerIP  *string    `json:"manager_ip" name:"manager_ip"`
	RouterID   *string    `json:"router_id" name:"router_id"`
	VxNetID    *string    `json:"vxnet_id" name:"vxnet_id"`
}

type S2DefaultParameters struct {
	DefaultValue *string `json:"default_value" name:"default_value"`
	Description  *string `json:"description" name:"description"`
	ParamName    *string `json:"param_name" name:"param_name"`
	ServiceType  *string `json:"service_type" name:"service_type"`
	TargetType   *string `json:"target_type" name:"target_type"`
}

type S2Server struct {
	CreateTime  *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description *string    `json:"description" name:"description"`
	// IsApplied's available values: 0, 1
	IsApplied  *int    `json:"is_applied" name:"is_applied"`
	Name       *string `json:"name" name:"name"`
	PrivateIP  *string `json:"private_ip" name:"private_ip"`
	S2ServerID *string `json:"s2_server_id" name:"s2_server_id"`
	// S2ServerType's available values: 0, 1, 2, 3
	S2ServerType *int `json:"s2_server_type" name:"s2_server_type"`
	// ServiceType's available values: vsan
	ServiceType *string `json:"service_type" name:"service_type"`
	// Status's available values: pending, active, poweroffed, suspended, deleted, ceased
	Status     *string    `json:"status" name:"status"`
	StatusTime *time.Time `json:"status_time" name:"status_time" format:"ISO 8601"`
	Tags       []*Tag     `json:"tags" name:"tags"`
	// TransitionStatus's available values: creating, updating, suspending, resuming, poweroffing
	TransitionStatus *string `json:"transition_status" name:"transition_status"`
	VxNet            *VxNet  `json:"vxnet" name:"vxnet"`
}

type S2SharedTarget struct {
	CreateTime       *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description      *string    `json:"description" name:"description"`
	ExportName       *string    `json:"export_name" name:"export_name"`
	S2ServerID       *string    `json:"s2_server_id" name:"s2_server_id"`
	S2SharedTargetID *string    `json:"s2_shared_target_id" name:"s2_shared_target_id"`
	StatusTime       *time.Time `json:"status_time" name:"status_time" format:"ISO 8601"`
	// TargetType's available values: ISCSI, NFS
	TargetType *string `json:"target_type" name:"target_type"`
}

type SecurityGroup struct {
	CreateTime        *time.Time  `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description       *string     `json:"description" name:"description"`
	IsApplied         *int        `json:"is_applied" name:"is_applied"`
	IsDefault         *int        `json:"is_default" name:"is_default"`
	Resources         []*Resource `json:"resources" name:"resources"`
	SecurityGroupID   *string     `json:"security_group_id" name:"security_group_id"`
	SecurityGroupName *string     `json:"security_group_name" name:"security_group_name"`
	Tags              []*Tag      `json:"tags" name:"tags"`
}

type SecurityGroupIPSet struct {
	CreateTime  *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description *string    `json:"description" name:"description"`
	// IPSetType's available values: 0, 1
	IPSetType              *int    `json:"ipset_type" name:"ipset_type"`
	SecurityGroupIPSetID   *string `json:"security_group_ipset_id" name:"security_group_ipset_id"`
	SecurityGroupIPSetName *string `json:"security_group_ipset_name" name:"security_group_ipset_name"`
	Val                    *string `json:"val" name:"val"`
}

type SecurityGroupRule struct {
	// Action's available values: accept, drop
	Action              *string `json:"action" name:"action"`
	Priority            *int    `json:"priority" name:"priority"`
	Protocol            *string `json:"protocol" name:"protocol"`
	SecurityGroupID     *string `json:"security_group_id" name:"security_group_id"`
	SecurityGroupRuleID *string `json:"security_group_rule_id" name:"security_group_rule_id"`
	Val1                *string `json:"val1" name:"val1"`
	Val2                *string `json:"val2" name:"val2"`
	Val3                *string `json:"val3" name:"val3"`
}

type SecurityGroupSnapshot struct {
	GroupID                 *string              `json:"group_id" name:"group_id"`
	Rules                   []*SecurityGroupRule `json:"rules" name:"rules"`
	SecurityGroupSnapshotID *string              `json:"security_group_snapshot_id" name:"security_group_snapshot_id"`
}

type ServerCertificate struct {
	CertificateContent    *string    `json:"certificate_content" name:"certificate_content"`
	CreateTime            *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description           *string    `json:"description" name:"description"`
	PrivateKey            *string    `json:"private_key" name:"private_key"`
	ServerCertificateID   *string    `json:"server_certificate_id" name:"server_certificate_id"`
	ServerCertificateName *string    `json:"server_certificate_name" name:"server_certificate_name"`
}

type Snapshot struct {
	CreateTime  *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description *string    `json:"description" name:"description"`
	HeadChain   *string    `json:"head_chain" name:"head_chain"`
	// IsHead's available values: 0, 1
	IsHead *int `json:"is_head" name:"is_head"`
	// IsTaken's available values: 0, 1
	IsTaken            *int              `json:"is_taken" name:"is_taken"`
	LatestSnapshotTime *time.Time        `json:"latest_snapshot_time" name:"latest_snapshot_time" format:"ISO 8601"`
	ParentID           *string           `json:"parent_id" name:"parent_id"`
	Provider           *string           `json:"provider" name:"provider"`
	Resource           *Resource         `json:"resource" name:"resource"`
	RootID             *string           `json:"root_id" name:"root_id"`
	Size               *int              `json:"size" name:"size"`
	SnapshotID         *string           `json:"snapshot_id" name:"snapshot_id"`
	SnapshotName       *string           `json:"snapshot_name" name:"snapshot_name"`
	SnapshotResource   *SnapshotResource `json:"snapshot_resource" name:"snapshot_resource"`
	SnapshotTime       *time.Time        `json:"snapshot_time" name:"snapshot_time" format:"ISO 8601"`
	// SnapshotType's available values: 0, 1
	SnapshotType *string `json:"snapshot_type" name:"snapshot_type"`
	// Status's available values: pending, available, suspended, deleted, ceased
	Status     *string    `json:"status" name:"status"`
	StatusTime *time.Time `json:"status_time" name:"status_time" format:"ISO 8601"`
	SubCode    *int       `json:"sub_code" name:"sub_code"`
	Tags       []*Tag     `json:"tags" name:"tags"`
	TotalCount *int       `json:"total_count" name:"total_count"`
	TotalSize  *int       `json:"total_size" name:"total_size"`
	// TransitionStatus's available values: creating, suspending, resuming, deleting, recovering
	TransitionStatus *string `json:"transition_status" name:"transition_status"`
	VirtualSize      *int    `json:"virtual_size" name:"virtual_size"`
	Visibility       *string `json:"visibility" name:"visibility"`
}

type SnapshotResource struct {
	OSFamily *string `json:"os_family" name:"os_family"`
	Platform *string `json:"platform" name:"platform"`
}

type Tag struct {
	Color             *string              `json:"color" name:"color"`
	CreateTime        *time.Time           `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description       *string              `json:"description" name:"description"`
	Owner             *string              `json:"owner" name:"owner"`
	ResourceCount     *int                 `json:"resource_count" name:"resource_count"`
	ResourceTagPairs  []*ResourceTagPair   `json:"resource_tag_pairs" name:"resource_tag_pairs"`
	ResourceTypeCount []*ResourceTypeCount `json:"resource_type_count" name:"resource_type_count"`
	TagID             *string              `json:"tag_id" name:"tag_id"`
	TagKey            *string              `json:"tag_key" name:"tag_key"`
	TagName           *string              `json:"tag_name" name:"tag_name"`
}

type User struct {
	Email  *string `json:"email" name:"email"`
	UserID *string `json:"user_id" name:"user_id"`
}

type Volume struct {
	CreateTime         *time.Time  `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description        *string     `json:"description" name:"description"`
	Device             *string     `json:"device" name:"device"`
	Instance           *Instance   `json:"instance" name:"instance"`
	Instances          []*Instance `json:"instances" name:"instances"`
	LatestSnapshotTime *time.Time  `json:"latest_snapshot_time" name:"latest_snapshot_time" format:"ISO 8601"`
	Owner              *string     `json:"owner" name:"owner"`
	PlaceGroupID       *string     `json:"place_group_id" name:"place_group_id"`
	Size               *int        `json:"size" name:"size"`
	// Status's available values: pending, available, in-use, suspended, deleted, ceased
	Status     *string    `json:"status" name:"status"`
	StatusTime *time.Time `json:"status_time" name:"status_time" format:"ISO 8601"`
	SubCode    *int       `json:"sub_code" name:"sub_code"`
	Tags       []*Tag     `json:"tags" name:"tags"`
	// TransitionStatus's available values: creating, attaching, detaching, suspending, resuming, deleting, recovering
	TransitionStatus *string `json:"transition_status" name:"transition_status"`
	VolumeID         *string `json:"volume_id" name:"volume_id"`
	VolumeName       *string `json:"volume_name" name:"volume_name"`
	// VolumeType's available values: 0, 1, 2, 3
	VolumeType *int `json:"volume_type" name:"volume_type"`
}

type VxNet struct {
	AvailableIPCount *int       `json:"available_ip_count" name:"available_ip_count"`
	CreateTime       *time.Time `json:"create_time" name:"create_time" format:"ISO 8601"`
	Description      *string    `json:"description" name:"description"`
	InstanceIDs      []*string  `json:"instance_ids" name:"instance_ids"`
	Owner            *string    `json:"owner" name:"owner"`
	Router           *Router    `json:"router" name:"router"`
	Tags             []*Tag     `json:"tags" name:"tags"`
	VpcRouterID      *string    `json:"vpc_router_id" name:"vpc_router_id"`
	VxNetID          *string    `json:"vxnet_id" name:"vxnet_id"`
	VxNetName        *string    `json:"vxnet_name" name:"vxnet_name"`
	// VxNetType's available values: 0, 1
	VxNetType *int `json:"vxnet_type" name:"vxnet_type"`
}

type Zone struct {
	// Status's available values: active, faulty, defunct
	Status *string `json:"status" name:"status"`
	ZoneID *string `json:"zone_id" name:"zone_id"`
}

*/

