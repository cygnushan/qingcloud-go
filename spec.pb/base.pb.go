// Code generated by protoc-gen-go. DO NOT EDIT.
// source: base.proto

package spec

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/any"
import _ "github.com/golang/protobuf/ptypes/empty"
import google_protobuf2 "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ErrorCode int32

const (
	ErrorCode_ErrorCode_NULL ErrorCode = 0
	// Client
	ErrorCode_ErrorCode_1100 ErrorCode = 1100
	ErrorCode_ErrorCode_1200 ErrorCode = 1200
	ErrorCode_ErrorCode_1300 ErrorCode = 1300
	ErrorCode_ErrorCode_1400 ErrorCode = 1400
	ErrorCode_ErrorCode_2100 ErrorCode = 2100
	ErrorCode_ErrorCode_2400 ErrorCode = 2400
	ErrorCode_ErrorCode_2500 ErrorCode = 2500
	// Server
	ErrorCode_ErrorCode_5000 ErrorCode = 5000
	ErrorCode_ErrorCode_5100 ErrorCode = 5100
	ErrorCode_ErrorCode_5200 ErrorCode = 5200
	ErrorCode_ErrorCode_5300 ErrorCode = 5300
)

var ErrorCode_name = map[int32]string{
	0:    "ErrorCode_NULL",
	1100: "ErrorCode_1100",
	1200: "ErrorCode_1200",
	1300: "ErrorCode_1300",
	1400: "ErrorCode_1400",
	2100: "ErrorCode_2100",
	2400: "ErrorCode_2400",
	2500: "ErrorCode_2500",
	5000: "ErrorCode_5000",
	5100: "ErrorCode_5100",
	5200: "ErrorCode_5200",
	5300: "ErrorCode_5300",
}
var ErrorCode_value = map[string]int32{
	"ErrorCode_NULL": 0,
	"ErrorCode_1100": 1100,
	"ErrorCode_1200": 1200,
	"ErrorCode_1300": 1300,
	"ErrorCode_1400": 1400,
	"ErrorCode_2100": 2100,
	"ErrorCode_2400": 2400,
	"ErrorCode_2500": 2500,
	"ErrorCode_5000": 5000,
	"ErrorCode_5100": 5100,
	"ErrorCode_5200": 5200,
	"ErrorCode_5300": 5300,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}
func (ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type Options struct {
	Foo int32 `protobuf:"varint,1,opt,name=foo" json:"foo,omitempty"`
}

func (m *Options) Reset()                    { *m = Options{} }
func (m *Options) String() string            { return proto.CompactTextString(m) }
func (*Options) ProtoMessage()               {}
func (*Options) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Options) GetFoo() int32 {
	if m != nil {
		return m.Foo
	}
	return 0
}

type CommonRequest struct {
	Action           string                      `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	Zone             string                      `protobuf:"bytes,2,opt,name=zone" json:"zone,omitempty"`
	TimeStamp        *google_protobuf2.Timestamp `protobuf:"bytes,3,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	AccessKeyId      string                      `protobuf:"bytes,4,opt,name=access_key_id,json=accessKeyId" json:"access_key_id,omitempty"`
	Version          int32                       `protobuf:"varint,5,opt,name=version" json:"version,omitempty"`
	SignatureMethod  string                      `protobuf:"bytes,6,opt,name=signature_method,json=signatureMethod" json:"signature_method,omitempty"`
	SignatureVersion int32                       `protobuf:"varint,7,opt,name=signature_version,json=signatureVersion" json:"signature_version,omitempty"`
	Signature        string                      `protobuf:"bytes,8,opt,name=signature" json:"signature,omitempty"`
}

func (m *CommonRequest) Reset()                    { *m = CommonRequest{} }
func (m *CommonRequest) String() string            { return proto.CompactTextString(m) }
func (*CommonRequest) ProtoMessage()               {}
func (*CommonRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CommonRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *CommonRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *CommonRequest) GetTimeStamp() *google_protobuf2.Timestamp {
	if m != nil {
		return m.TimeStamp
	}
	return nil
}

func (m *CommonRequest) GetAccessKeyId() string {
	if m != nil {
		return m.AccessKeyId
	}
	return ""
}

func (m *CommonRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CommonRequest) GetSignatureMethod() string {
	if m != nil {
		return m.SignatureMethod
	}
	return ""
}

func (m *CommonRequest) GetSignatureVersion() int32 {
	if m != nil {
		return m.SignatureVersion
	}
	return 0
}

func (m *CommonRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type Error struct {
	RetCode int32  `protobuf:"varint,1,opt,name=ret_code,json=retCode" json:"ret_code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Error) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Options)(nil), "spec.Options")
	proto.RegisterType((*CommonRequest)(nil), "spec.CommonRequest")
	proto.RegisterType((*Error)(nil), "spec.Error")
	proto.RegisterEnum("spec.ErrorCode", ErrorCode_name, ErrorCode_value)
}

func init() { proto.RegisterFile("base.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x4f, 0x6e, 0xd3, 0x40,
	0x14, 0xc6, 0x49, 0x9a, 0xc4, 0xf1, 0xab, 0x0a, 0xc3, 0x54, 0x42, 0x6e, 0x8a, 0xa0, 0xf2, 0x86,
	0x14, 0x24, 0x77, 0x9a, 0xd2, 0x05, 0x12, 0xbb, 0x8a, 0x05, 0xa2, 0x80, 0x64, 0xfe, 0x6c, 0xad,
	0x89, 0xfd, 0x6a, 0x2c, 0xb0, 0xc7, 0xcc, 0x4c, 0x40, 0xe1, 0x00, 0x88, 0x03, 0x70, 0x0a, 0x56,
	0x2c, 0x72, 0x04, 0x96, 0x2c, 0x38, 0x02, 0x07, 0xe0, 0x00, 0x2c, 0xd1, 0x8c, 0xed, 0x84, 0xce,
	0xee, 0xbd, 0xdf, 0xfb, 0xfc, 0xe9, 0xa7, 0x91, 0x01, 0xe6, 0x5c, 0x61, 0x54, 0x4b, 0xa1, 0x05,
	0x1d, 0xa8, 0x1a, 0xd3, 0xc9, 0x5e, 0x2e, 0x44, 0xfe, 0x0e, 0x8f, 0x2c, 0x9b, 0x2f, 0x2e, 0x8e,
	0x78, 0xb5, 0x6c, 0x02, 0x93, 0x7d, 0xf7, 0x84, 0x65, 0xad, 0xbb, 0xe3, 0x6d, 0xf7, 0xa8, 0x8b,
	0x12, 0x95, 0xe6, 0x65, 0xdd, 0x06, 0x6e, 0xb9, 0x81, 0x8f, 0x92, 0xd7, 0x35, 0x4a, 0xd5, 0xdc,
	0xc3, 0x7d, 0xf0, 0x9e, 0xd7, 0xba, 0x10, 0x95, 0xa2, 0x04, 0xb6, 0x2e, 0x84, 0x08, 0x7a, 0x07,
	0xbd, 0xe9, 0x30, 0x36, 0x63, 0xf8, 0xad, 0x0f, 0x3b, 0x67, 0xa2, 0x2c, 0x45, 0x15, 0xe3, 0xfb,
	0x05, 0x2a, 0x4d, 0x6f, 0xc0, 0x88, 0xa7, 0x26, 0x6e, 0x63, 0x7e, 0xdc, 0x6e, 0x94, 0xc2, 0xe0,
	0x93, 0xa8, 0x30, 0xe8, 0x5b, 0x6a, 0x67, 0xfa, 0x00, 0xc0, 0xd8, 0x24, 0x56, 0x27, 0xd8, 0x3a,
	0xe8, 0x4d, 0xb7, 0x67, 0x93, 0xa8, 0xf1, 0x89, 0x3a, 0x9f, 0xe8, 0x65, 0x27, 0x1c, 0xfb, 0x26,
	0xfd, 0xc2, 0x8c, 0x34, 0x84, 0x1d, 0x9e, 0xa6, 0xa8, 0x54, 0xf2, 0x16, 0x97, 0x49, 0x91, 0x05,
	0x03, 0xdb, 0xbb, 0xdd, 0xc0, 0x27, 0xb8, 0x7c, 0x9c, 0xd1, 0x00, 0xbc, 0x0f, 0x28, 0x95, 0x71,
	0x19, 0x5a, 0xe5, 0x6e, 0xa5, 0x87, 0x40, 0x54, 0x91, 0x57, 0x5c, 0x2f, 0x24, 0x26, 0x25, 0xea,
	0x37, 0x22, 0x0b, 0x46, 0xb6, 0xe0, 0xda, 0x9a, 0x3f, 0xb5, 0x98, 0xde, 0x83, 0xeb, 0x9b, 0x68,
	0x57, 0xe7, 0xd9, 0xba, 0x4d, 0xc7, 0xeb, 0xb6, 0xf7, 0x26, 0xf8, 0x6b, 0x16, 0x8c, 0x6d, 0xe1,
	0x06, 0x84, 0x0f, 0x61, 0xf8, 0x48, 0x4a, 0x21, 0xe9, 0x1e, 0x8c, 0x25, 0xea, 0x24, 0x15, 0x19,
	0xb6, 0x8f, 0xe9, 0x49, 0xd4, 0x67, 0x22, 0x43, 0xe3, 0x5c, 0xa2, 0x52, 0x3c, 0xef, 0x5e, 0xaa,
	0x5b, 0xef, 0x7e, 0xee, 0x83, 0x6f, 0x3f, 0xb7, 0x39, 0x0a, 0x57, 0xd7, 0x4b, 0xf2, 0xec, 0xd5,
	0xf9, 0x39, 0xb9, 0x42, 0x77, 0xff, 0x67, 0xc7, 0xc7, 0x8c, 0x91, 0x9f, 0x63, 0x07, 0xce, 0x18,
	0x23, 0xdf, 0x7d, 0x07, 0x9e, 0x30, 0x46, 0xbe, 0x82, 0x03, 0xef, 0x33, 0x46, 0xfe, 0x3a, 0x70,
	0x66, 0x3a, 0x57, 0xc4, 0x81, 0x26, 0xf9, 0x9b, 0x3a, 0xf0, 0x94, 0x31, 0xf2, 0x63, 0xf7, 0x32,
	0x3c, 0x65, 0x8c, 0x91, 0x2f, 0x77, 0x1c, 0x68, 0x3a, 0xff, 0xb8, 0xd0, 0x78, 0xfe, 0x9a, 0x3a,
	0xd0, 0x78, 0xae, 0x0e, 0xe7, 0x23, 0xfb, 0x67, 0x9c, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x96,
	0x3f, 0x81, 0x6b, 0x24, 0x03, 0x00, 0x00,
}
