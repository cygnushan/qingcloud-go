// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nic.proto

package spec

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import "github.com/chai2010/qingcloud-go/config"
import "github.com/chai2010/qingcloud-go/request"
import "github.com/chai2010/qingcloud-go/request/data"

var _ = config.Config{}
var _ = request.Request{}
var _ = data.Operation{}

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NicServiceProperties struct {
	Zone string `protobuf:"bytes,1,opt,name=zone" json:"zone,omitempty"`
}

func (m *NicServiceProperties) Reset()                    { *m = NicServiceProperties{} }
func (m *NicServiceProperties) String() string            { return proto.CompactTextString(m) }
func (*NicServiceProperties) ProtoMessage()               {}
func (*NicServiceProperties) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{0} }

func (m *NicServiceProperties) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

type CreateNicsInput struct {
}

func (m *CreateNicsInput) Reset()                    { *m = CreateNicsInput{} }
func (m *CreateNicsInput) String() string            { return proto.CompactTextString(m) }
func (*CreateNicsInput) ProtoMessage()               {}
func (*CreateNicsInput) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{1} }

type CreateNicsOutput struct {
}

func (m *CreateNicsOutput) Reset()                    { *m = CreateNicsOutput{} }
func (m *CreateNicsOutput) String() string            { return proto.CompactTextString(m) }
func (*CreateNicsOutput) ProtoMessage()               {}
func (*CreateNicsOutput) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{2} }

type DescribeNicsInput struct {
	Instances []string `protobuf:"bytes,1,rep,name=instances" json:"instances,omitempty"`
	Limit     int32    `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	NicName   string   `protobuf:"bytes,3,opt,name=nic_name,json=nicName" json:"nic_name,omitempty"`
	Nics      []string `protobuf:"bytes,4,rep,name=nics" json:"nics,omitempty"`
	Offset    int32    `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	Status    string   `protobuf:"bytes,6,opt,name=status" json:"status,omitempty"`
	VxnetType int32    `protobuf:"varint,7,opt,name=vxnet_type,json=vxnetType" json:"vxnet_type,omitempty"`
	Vxnets    []string `protobuf:"bytes,8,rep,name=vxnets" json:"vxnets,omitempty"`
}

func (m *DescribeNicsInput) Reset()                    { *m = DescribeNicsInput{} }
func (m *DescribeNicsInput) String() string            { return proto.CompactTextString(m) }
func (*DescribeNicsInput) ProtoMessage()               {}
func (*DescribeNicsInput) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{3} }

func (m *DescribeNicsInput) GetInstances() []string {
	if m != nil {
		return m.Instances
	}
	return nil
}

func (m *DescribeNicsInput) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DescribeNicsInput) GetNicName() string {
	if m != nil {
		return m.NicName
	}
	return ""
}

func (m *DescribeNicsInput) GetNics() []string {
	if m != nil {
		return m.Nics
	}
	return nil
}

func (m *DescribeNicsInput) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *DescribeNicsInput) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *DescribeNicsInput) GetVxnetType() int32 {
	if m != nil {
		return m.VxnetType
	}
	return 0
}

func (m *DescribeNicsInput) GetVxnets() []string {
	if m != nil {
		return m.Vxnets
	}
	return nil
}

type DescribeNicsOutput struct {
	Message    string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Action     string `protobuf:"bytes,2,opt,name=action" json:"action,omitempty"`
	NicSet     []*NIC `protobuf:"bytes,3,rep,name=nic_set,json=nicSet" json:"nic_set,omitempty"`
	RetCode    int32  `protobuf:"varint,4,opt,name=ret_code,json=retCode" json:"ret_code,omitempty"`
	TotalCount int32  `protobuf:"varint,5,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
}

func (m *DescribeNicsOutput) Reset()                    { *m = DescribeNicsOutput{} }
func (m *DescribeNicsOutput) String() string            { return proto.CompactTextString(m) }
func (*DescribeNicsOutput) ProtoMessage()               {}
func (*DescribeNicsOutput) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{4} }

func (m *DescribeNicsOutput) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *DescribeNicsOutput) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *DescribeNicsOutput) GetNicSet() []*NIC {
	if m != nil {
		return m.NicSet
	}
	return nil
}

func (m *DescribeNicsOutput) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *DescribeNicsOutput) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

type AttachNicsInput struct {
}

func (m *AttachNicsInput) Reset()                    { *m = AttachNicsInput{} }
func (m *AttachNicsInput) String() string            { return proto.CompactTextString(m) }
func (*AttachNicsInput) ProtoMessage()               {}
func (*AttachNicsInput) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{5} }

type AttachNicsOutput struct {
}

func (m *AttachNicsOutput) Reset()                    { *m = AttachNicsOutput{} }
func (m *AttachNicsOutput) String() string            { return proto.CompactTextString(m) }
func (*AttachNicsOutput) ProtoMessage()               {}
func (*AttachNicsOutput) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{6} }

type DetachNicsInput struct {
}

func (m *DetachNicsInput) Reset()                    { *m = DetachNicsInput{} }
func (m *DetachNicsInput) String() string            { return proto.CompactTextString(m) }
func (*DetachNicsInput) ProtoMessage()               {}
func (*DetachNicsInput) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{7} }

type DetachNicsOutput struct {
}

func (m *DetachNicsOutput) Reset()                    { *m = DetachNicsOutput{} }
func (m *DetachNicsOutput) String() string            { return proto.CompactTextString(m) }
func (*DetachNicsOutput) ProtoMessage()               {}
func (*DetachNicsOutput) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{8} }

type ModifyNicAttributesInput struct {
}

func (m *ModifyNicAttributesInput) Reset()                    { *m = ModifyNicAttributesInput{} }
func (m *ModifyNicAttributesInput) String() string            { return proto.CompactTextString(m) }
func (*ModifyNicAttributesInput) ProtoMessage()               {}
func (*ModifyNicAttributesInput) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{9} }

type ModifyNicAttributesOutput struct {
}

func (m *ModifyNicAttributesOutput) Reset()                    { *m = ModifyNicAttributesOutput{} }
func (m *ModifyNicAttributesOutput) String() string            { return proto.CompactTextString(m) }
func (*ModifyNicAttributesOutput) ProtoMessage()               {}
func (*ModifyNicAttributesOutput) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{10} }

type DeleteNicsInput struct {
}

func (m *DeleteNicsInput) Reset()                    { *m = DeleteNicsInput{} }
func (m *DeleteNicsInput) String() string            { return proto.CompactTextString(m) }
func (*DeleteNicsInput) ProtoMessage()               {}
func (*DeleteNicsInput) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{11} }

type DeleteNicsOutput struct {
}

func (m *DeleteNicsOutput) Reset()                    { *m = DeleteNicsOutput{} }
func (m *DeleteNicsOutput) String() string            { return proto.CompactTextString(m) }
func (*DeleteNicsOutput) ProtoMessage()               {}
func (*DeleteNicsOutput) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{12} }

func init() {
	proto.RegisterType((*NicServiceProperties)(nil), "spec.NicServiceProperties")
	proto.RegisterType((*CreateNicsInput)(nil), "spec.CreateNicsInput")
	proto.RegisterType((*CreateNicsOutput)(nil), "spec.CreateNicsOutput")
	proto.RegisterType((*DescribeNicsInput)(nil), "spec.DescribeNicsInput")
	proto.RegisterType((*DescribeNicsOutput)(nil), "spec.DescribeNicsOutput")
	proto.RegisterType((*AttachNicsInput)(nil), "spec.AttachNicsInput")
	proto.RegisterType((*AttachNicsOutput)(nil), "spec.AttachNicsOutput")
	proto.RegisterType((*DetachNicsInput)(nil), "spec.DetachNicsInput")
	proto.RegisterType((*DetachNicsOutput)(nil), "spec.DetachNicsOutput")
	proto.RegisterType((*ModifyNicAttributesInput)(nil), "spec.ModifyNicAttributesInput")
	proto.RegisterType((*ModifyNicAttributesOutput)(nil), "spec.ModifyNicAttributesOutput")
	proto.RegisterType((*DeleteNicsInput)(nil), "spec.DeleteNicsInput")
	proto.RegisterType((*DeleteNicsOutput)(nil), "spec.DeleteNicsOutput")
}

type NicServiceInterface interface {
	CreateNics(in *CreateNicsInput) (out *CreateNicsOutput, err error)
	DescribeNics(in *DescribeNicsInput) (out *DescribeNicsOutput, err error)
	AttachNics(in *AttachNicsInput) (out *AttachNicsOutput, err error)
	DetachNics(in *DetachNicsInput) (out *DetachNicsOutput, err error)
	ModifyNicAttributes(in *ModifyNicAttributesInput) (out *ModifyNicAttributesOutput, err error)
	DeleteNics(in *DeleteNicsInput) (out *DeleteNicsOutput, err error)
}

type NicService struct {
	Config     *config.Config
	Properties *NicServiceProperties
}

func NewNicService(conf *config.Config, zone string) (p *NicService, err error) {
	return &NicService{
		Config:     conf,
		Properties: &NicServiceProperties{Zone: zone},
	}, nil
}

func (p *NicService) CreateNics(in *CreateNicsInput) (out *CreateNicsOutput, err error) {
	if in == nil {
		in = &CreateNicsInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "CreateNics",
		RequestMethod: "GET", // GET or POST
	}

	x := &CreateNicsOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *CreateNicsInput) Validate() error {
	return nil
}

func (p *NicService) DescribeNics(in *DescribeNicsInput) (out *DescribeNicsOutput, err error) {
	if in == nil {
		in = &DescribeNicsInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DescribeNics",
		RequestMethod: "GET", // GET or POST
	}

	x := &DescribeNicsOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *DescribeNicsInput) Validate() error {
	return nil
}

func (p *NicService) AttachNics(in *AttachNicsInput) (out *AttachNicsOutput, err error) {
	if in == nil {
		in = &AttachNicsInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "AttachNics",
		RequestMethod: "GET", // GET or POST
	}

	x := &AttachNicsOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *AttachNicsInput) Validate() error {
	return nil
}

func (p *NicService) DetachNics(in *DetachNicsInput) (out *DetachNicsOutput, err error) {
	if in == nil {
		in = &DetachNicsInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DetachNics",
		RequestMethod: "GET", // GET or POST
	}

	x := &DetachNicsOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *DetachNicsInput) Validate() error {
	return nil
}

func (p *NicService) ModifyNicAttributes(in *ModifyNicAttributesInput) (out *ModifyNicAttributesOutput, err error) {
	if in == nil {
		in = &ModifyNicAttributesInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "ModifyNicAttributes",
		RequestMethod: "GET", // GET or POST
	}

	x := &ModifyNicAttributesOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *ModifyNicAttributesInput) Validate() error {
	return nil
}

func (p *NicService) DeleteNics(in *DeleteNicsInput) (out *DeleteNicsOutput, err error) {
	if in == nil {
		in = &DeleteNicsInput{}
	}
	o := &data.Operation{
		Config:        p.Config,
		Properties:    p.Properties,
		APIName:       "DeleteNics",
		RequestMethod: "GET", // GET or POST
	}

	x := &DeleteNicsOutput{}
	r, err := request.New(o, in, x)
	if err != nil {
		return nil, err
	}

	err = r.Send()
	if err != nil {
		return nil, err
	}

	return x, err
}

func (p *DeleteNicsInput) Validate() error {
	return nil
}

func init() { proto.RegisterFile("nic.proto", fileDescriptor14) }

var fileDescriptor14 = []byte{
	// 500 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0xc9, 0x57, 0x3d, 0x41, 0x2a, 0x59, 0x4a, 0xd9, 0x9a, 0x8f, 0x46, 0x3e, 0x45, 0x1c,
	0x72, 0x28, 0xc7, 0x9e, 0xa2, 0xf4, 0xd2, 0x03, 0x06, 0x19, 0xc4, 0xd5, 0x72, 0x36, 0x13, 0x58,
	0x29, 0xd9, 0xb5, 0xbc, 0xe3, 0x8a, 0xf0, 0x57, 0xb8, 0xf3, 0xaf, 0xf8, 0x2f, 0x68, 0xd7, 0xb6,
	0x36, 0x71, 0xda, 0x9b, 0xe7, 0xed, 0x7c, 0xbc, 0x79, 0x6f, 0x64, 0x08, 0x95, 0x14, 0xf3, 0xa2,
	0xd4, 0xa4, 0x59, 0xdf, 0x14, 0x28, 0xa2, 0x31, 0xed, 0x0b, 0x34, 0x35, 0x14, 0x7f, 0x80, 0x8b,
	0x44, 0x8a, 0xaf, 0x58, 0x3e, 0x48, 0x81, 0x5f, 0x4a, 0x5d, 0x60, 0x49, 0x12, 0x0d, 0x63, 0xd0,
	0xff, 0xad, 0x15, 0xf2, 0x60, 0x1a, 0xcc, 0xc2, 0xd4, 0x7d, 0xc7, 0x13, 0x38, 0x5f, 0x96, 0x98,
	0x13, 0x26, 0x52, 0x98, 0x7b, 0x55, 0x54, 0x14, 0x33, 0x78, 0xe1, 0xa1, 0xcf, 0x15, 0x59, 0xec,
	0x5f, 0x00, 0x93, 0x3b, 0x34, 0xa2, 0x94, 0x2b, 0x9f, 0xc9, 0xde, 0x42, 0x28, 0x95, 0xa1, 0x5c,
	0x09, 0x34, 0x3c, 0x98, 0xf6, 0x66, 0x61, 0xea, 0x01, 0x76, 0x01, 0x83, 0xad, 0xdc, 0x49, 0xe2,
	0xcf, 0xa6, 0xc1, 0x6c, 0x90, 0xd6, 0x01, 0xbb, 0x82, 0x33, 0x25, 0x45, 0xa6, 0xf2, 0x1d, 0xf2,
	0x9e, 0x23, 0x32, 0x52, 0x52, 0x24, 0xf9, 0x0e, 0x2d, 0x3f, 0x25, 0x85, 0xe1, 0x7d, 0xd7, 0xc9,
	0x7d, 0xb3, 0x4b, 0x18, 0xea, 0xcd, 0xc6, 0x20, 0xf1, 0x81, 0xeb, 0xd2, 0x44, 0x16, 0x37, 0x94,
	0x53, 0x65, 0xf8, 0xd0, 0x35, 0x69, 0x22, 0xf6, 0x0e, 0xe0, 0xe1, 0x97, 0x42, 0xca, 0xac, 0x20,
	0x7c, 0xe4, 0x6a, 0x42, 0x87, 0x7c, 0xdb, 0x17, 0x68, 0xcb, 0x5c, 0x60, 0xf8, 0x99, 0x1b, 0xd2,
	0x44, 0xf1, 0xdf, 0x00, 0xd8, 0xe1, 0x7e, 0xf5, 0xda, 0x8c, 0xc3, 0x68, 0x87, 0xc6, 0xe4, 0x3f,
	0x5a, 0xd1, 0xda, 0xd0, 0x36, 0xca, 0x05, 0x49, 0xad, 0xdc, 0x76, 0x61, 0xda, 0x44, 0x2c, 0x06,
	0xbb, 0x4e, 0x66, 0x09, 0xf7, 0xa6, 0xbd, 0xd9, 0xf8, 0x26, 0x9c, 0x5b, 0x83, 0xe6, 0xc9, 0xfd,
	0x32, 0x1d, 0x2a, 0xeb, 0x8a, 0x93, 0xa0, 0x44, 0xca, 0x84, 0x5e, 0x23, 0xef, 0x3b, 0x86, 0xa3,
	0x12, 0x69, 0xa9, 0xd7, 0xc8, 0xae, 0x61, 0x4c, 0x9a, 0xf2, 0x6d, 0x26, 0x74, 0xa5, 0xda, 0x9d,
	0xc1, 0x41, 0x4b, 0x8b, 0x58, 0xbf, 0x16, 0x44, 0xb9, 0xf8, 0x79, 0xe4, 0x97, 0x87, 0x1a, 0xbf,
	0x26, 0x70, 0x7e, 0x87, 0x27, 0x69, 0x1e, 0x6a, 0xd2, 0x22, 0xe0, 0x9f, 0xf4, 0x5a, 0x6e, 0xf6,
	0x89, 0x14, 0x0b, 0xa2, 0x52, 0xae, 0x2a, 0xc2, 0x26, 0xff, 0x0d, 0x5c, 0x3d, 0xf2, 0x76, 0xd8,
	0x7f, 0x8b, 0x9d, 0xb3, 0xf1, 0x50, 0x9d, 0x76, 0xf3, 0xa7, 0x07, 0xe0, 0x4f, 0x91, 0xdd, 0x02,
	0xf8, 0xcb, 0x62, 0xaf, 0x6a, 0x65, 0x3a, 0xe7, 0x17, 0x5d, 0x76, 0xe1, 0xc6, 0x8b, 0x05, 0x3c,
	0x3f, 0x74, 0x88, 0xbd, 0xae, 0xf3, 0x4e, 0xae, 0x32, 0xe2, 0xa7, 0x0f, 0x4d, 0x8b, 0x5b, 0x00,
	0xaf, 0x54, 0x3b, 0xbf, 0x23, 0x67, 0x3b, 0xbf, 0x2b, 0xa9, 0x2d, 0xf6, 0xfa, 0xb5, 0xc5, 0x1d,
	0x91, 0xdb, 0xe2, 0xae, 0xd0, 0xec, 0x3b, 0xbc, 0x7c, 0x44, 0x4c, 0xf6, 0xbe, 0x4e, 0x7f, 0xca,
	0x83, 0xe8, 0xfa, 0xc9, 0xf7, 0x43, 0x52, 0xad, 0xe8, 0x9e, 0xd4, 0x91, 0x33, 0x9e, 0xd4, 0xb1,
	0x3b, 0xab, 0xa1, 0xfb, 0x5d, 0x7c, 0xfc, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x6a, 0x58, 0x13,
	0x4e, 0x04, 0x00, 0x00,
}
